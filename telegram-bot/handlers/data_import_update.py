# File: flashcard-telegram-bot/handlers/data_import_update.py
"""
Module ch·ª©a handlers v√† conversation handler cho ch·ª©c nƒÉng
c·∫≠p nh·∫≠t b·ªô t·ª´ v·ª±ng ƒë√£ c√≥ t·ª´ file Excel.
(S·ª≠a l·∫ßn 1: ƒêi·ªÅu ch·ªânh handle_command_update_set ƒë·ªÉ x·ª≠ l√Ω callback query,
             g·ª≠i tin nh·∫Øn v·ªõi parse_mode=None.)
"""
import logging
import os
import time
import asyncio
import html
import re 

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler, MessageHandler, CommandHandler,
    CallbackQueryHandler, filters
)
from telegram.error import BadRequest, TelegramError
from telegram.constants import ChatAction, ParseMode

from config import TEMP_UPDATE_DIR, UPDATE_SET_CALLBACK_PREFIX, WAITING_FOR_UPDATE_FILE, CAN_UPLOAD_SET
from database.query_set import get_sets
from database.query_user import get_user_by_telegram_id
from services.excel_service import process_set_update_from_excel
from utils.helpers import send_or_edit_message, require_permission, escape_md_v2
from utils.exceptions import (
    DatabaseError, SetNotFoundError, UserNotFoundError, FileProcessingError,
    ExcelImportError, PermissionsError, InvalidFileFormatError
)
from ui.core_ui import build_set_management_keyboard # Kh√¥ng d√πng tr·ª±c ti·∫øp nh∆∞ng c√≥ th·ªÉ c·∫ßn cho cancel

logger = logging.getLogger(__name__)

@require_permission(CAN_UPLOAD_SET) # Quy·ªÅn n√†y c√≥ th·ªÉ c·∫ßn xem l·∫°i, c√≥ th·ªÉ l√† CAN_MANAGE_OWN_SETS
async def handle_command_update_set(update, context):
    """
    S·ª≠a l·∫ßn 1: Handler n√†y gi·ªù ƒë∆∞·ª£c g·ªçi t·ª´ callback c·ªßa menu "Qu·∫£n l√Ω b·ªô th·∫ª".
    Hi·ªÉn th·ªã danh s√°ch c√°c b·ªô t·ª´ do ng∆∞·ªùi d√πng t·∫°o ƒë·ªÉ ch·ªçn c·∫≠p nh·∫≠t.
    """
    query = None
    if update.callback_query: # ƒê∆∞·ª£c g·ªçi t·ª´ callback
        query = update.callback_query
        try: await query.answer()
        except Exception: pass
        telegram_id = query.from_user.id
        chat_id = query.message.chat_id
        message_to_edit = query.message # Tin nh·∫Øn menu "Qu·∫£n l√Ω b·ªô th·∫ª" ƒë·ªÉ s·ª≠a
        log_prefix = f"[DATA_UPDATE_CB_SELECT_SET|UserTG:{telegram_id}]"
        logger.info(f"{log_prefix} Y√™u c·∫ßu ch·ªçn b·ªô ƒë·ªÉ c·∫≠p nh·∫≠t t·ª´ callback.")
    elif update.message and update.effective_user : # ƒê∆∞·ª£c g·ªçi t·ª´ l·ªánh (gi·ªØ l·∫°i ph√≤ng tr∆∞·ªùng h·ª£p d√πng l·ªánh)
        telegram_id = update.effective_user.id
        chat_id = update.message.chat_id
        message_to_edit = None 
        log_prefix = f"[DATA_UPDATE_CMD|UserTG:{telegram_id}]"
        logger.info(f"{log_prefix} L·ªánh /flashcard_update_set.")
    else:
        logger.warning("handle_command_update_set: update kh√¥ng h·ª£p l·ªá.")
        return ConversationHandler.END # Ho·∫∑c gi√° tr·ªã ph√π h·ª£p n·∫øu kh√¥ng trong conversation

    actual_user_id = None
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception as e_action:
        logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action: {e_action}")
    try:
        user_info = get_user_by_telegram_id(telegram_id)
        if not user_info or 'user_id' not in user_info: raise UserNotFoundError(identifier=telegram_id)
        actual_user_id = user_info['user_id']
        
        user_sets, total_sets = get_sets(columns=['set_id', 'title'], creator_user_id=actual_user_id)
        if not user_sets:
            await send_or_edit_message(context=context, chat_id=chat_id, text="B·∫°n ch∆∞a t·∫°o b·ªô th·∫ª n√†o ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t.", message_to_edit=message_to_edit)
            return ConversationHandler.END # K·∫øt th√∫c n·∫øu kh√¥ng c√≥ b·ªô n√†o

        keyboard = []
        for s_item in user_sets: # ƒê·ªïi t√™n bi·∫øn l·∫∑p
            set_id = s_item.get('set_id'); title = s_item.get('title', f"B·ªô kh√¥ng t√™n {set_id}")
            if set_id is None: continue
            callback_data = f"{UPDATE_SET_CALLBACK_PREFIX}{set_id}"
            keyboard.append([InlineKeyboardButton(f"üìö {html.escape(title)}", callback_data=callback_data)])

        # N√∫t quay l·∫°i menu qu·∫£n l√Ω b·ªô th·∫ª
        keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i Menu Qu·∫£n l√Ω", callback_data="show_set_management")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # S·ª≠a l·∫ßn 1: G·ª≠i text thu·∫ßn, kh√¥ng d√πng MarkdownV2 ·ªü ƒë√¢y
        text_to_send = "Ch·ªçn b·ªô th·∫ª b·∫°n mu·ªën c·∫≠p nh·∫≠t d·ªØ li·ªáu:"
        sent_msg = await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text=text_to_send,
            reply_markup=reply_markup,
            message_to_edit=message_to_edit, # S·ª≠a tin nh·∫Øn menu "Qu·∫£n l√Ω b·ªô th·∫ª"
            parse_mode=None # G·ª≠i text thu·∫ßn
        )
        if not sent_msg:
            logger.error(f"{log_prefix} L·ªói g·ª≠i/s·ª≠a b√†n ph√≠m ch·ªçn b·ªô update.")
        # Kh√¥ng tr·∫£ v·ªÅ state c·ªßa conversation ·ªü ƒë√¢y n·∫øu ƒë√¢y ch·ªâ l√† b∆∞·ªõc ch·ªçn b·ªô
        # Logic b·∫Øt ƒë·∫ßu conversation s·∫Ω n·∫±m ·ªü handle_callback_update_set_select
        return # K·∫øt th√∫c h√†m n√†y, ch·ªù ng∆∞·ªùi d√πng ch·ªçn b·ªô

    except (UserNotFoundError, DatabaseError) as e:
        logger.error(f"{log_prefix} L·ªói DB/User khi l·∫•y list set: {e}")
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói t·∫£i danh s√°ch b·ªô th·∫ª c·ªßa b·∫°n.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
    return ConversationHandler.END # ƒê·∫£m b·∫£o tr·∫£ v·ªÅ END n·∫øu c√≥ l·ªói kh√¥ng mong mu·ªën

# C√°c h√†m c√≤n l·∫°i c·ªßa Conversation (handle_callback_update_set_select, _handle_state_update_set_file, etc.)
# gi·ªØ nguy√™n logic, ch·ªâ c·∫ßn ƒë·∫£m b·∫£o ch√∫ng ƒë∆∞·ª£c g·ªçi ƒë√∫ng c√°ch v√† x·ª≠ l√Ω message_to_edit ph√π h·ª£p.

async def handle_callback_update_set_select(update, context):
    # Gi·ªØ nguy√™n logic
    query = update.callback_query;
    if not query or not query.data or not query.from_user: return ConversationHandler.END
    user_id_tg = query.from_user.id; log_prefix = f"[DATA_UPDATE_SELECT|UserTG:{user_id_tg}]"
    target_set_id = None; chat_id_to_reply = query.message.chat_id if query.message else user_id_tg
    message_to_edit = query.message
    if chat_id_to_reply: 
        try: await context.bot.send_chat_action(chat_id=chat_id_to_reply, action=ChatAction.TYPING)
        except Exception : pass
    try: await query.answer()
    except Exception : pass
    try:
        if not query.data.startswith(UPDATE_SET_CALLBACK_PREFIX): raise ValueError("Prefix callback kh√¥ng kh·ªõp.")
        set_id_str = query.data[len(UPDATE_SET_CALLBACK_PREFIX):]; target_set_id = int(set_id_str)
        logger.info(f"{log_prefix} User ch·ªçn update Set ID: {target_set_id}")
        set_info_tuple = get_sets(columns=["title"], set_id=target_set_id); set_info = set_info_tuple[0][0] if set_info_tuple and set_info_tuple[0] else None
        if not set_info: raise SetNotFoundError(set_id=target_set_id)
        set_title = set_info.get('title', f"B·ªô {target_set_id}")
        escaped_title = escape_md_v2(set_title)
        context.user_data['target_set_id_for_update'] = target_set_id
        cancel_button = InlineKeyboardButton("üö´ H·ªßy C·∫≠p Nh·∫≠t", callback_data="cancel_update_set"); cancel_keyboard = InlineKeyboardMarkup([[cancel_button]])
        request_message = (f"‚úÖ ƒê√£ ch·ªçn b·ªô: **{escaped_title}** \\(ID: {target_set_id}\\)\\.\n\n"
                           f"B√¢y gi·ªù, h√£y g·ª≠i file Excel \\(\\.xlsx\\) ch·ª©a d·ªØ li·ªáu c·∫≠p nh·∫≠t\\.\n"
                           f"\\_\\(File n√™n c√≥ c·ªôt 'flashcard\\_id' ƒë·ªÉ x√°c ƒë·ªãnh th·∫ª c·∫ßn s·ª≠a, c√°c th·∫ª kh√¥ng c√≥ ID ho·∫∑c ID kh√¥ng t·ªìn t·∫°i/kh√¥ng thu·ªôc b·ªô n√†y s·∫Ω ƒë∆∞·ª£c th√™m m·ªõi n·∫øu h·ª£p l·ªá\\)\\_\\_\n\n"
                           f"\\(Nh·∫•n H·ªßy ho·∫∑c g√µ /cancel ƒë·ªÉ h·ªßy\\)")
        sent_msg = await send_or_edit_message(context=context, chat_id=chat_id_to_reply, text=request_message, reply_markup=cancel_keyboard, parse_mode=ParseMode.MARKDOWN_V2, message_to_edit=message_to_edit)
        if sent_msg: return WAITING_FOR_UPDATE_FILE
        else: context.user_data.pop('target_set_id_for_update', None); return ConversationHandler.END
    except (ValueError, IndexError, AttributeError) as e_parse: logger.error(f"{log_prefix} L·ªói parse callback data '{query.data}': {e_parse}", exc_info=True); await send_or_edit_message(context=context, chat_id=chat_id_to_reply, text="‚ùå L·ªói: D·ªØ li·ªáu callback kh√¥ng h·ª£p l·ªá.", message_to_edit=message_to_edit); return ConversationHandler.END
    except SetNotFoundError: logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y set ID {target_set_id}."); await send_or_edit_message(context=context, chat_id=chat_id_to_reply, text=f"‚ùå Kh√¥ng t√¨m th·∫•y b·ªô th·∫ª ID {target_set_id}.", message_to_edit=message_to_edit); return ConversationHandler.END
    except DatabaseError as e_db: logger.error(f"{log_prefix} L·ªói DB: {e_db}"); await send_or_edit_message(context=context, chat_id=chat_id_to_reply, text="‚ùå L·ªói t·∫£i th√¥ng tin b·ªô th·∫ª.", message_to_edit=message_to_edit); return ConversationHandler.END
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); context.user_data.pop('target_set_id_for_update', None); await send_or_edit_message(context=context, chat_id=chat_id_to_reply, text="‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit); return ConversationHandler.END

async def _handle_state_update_set_file(update, context):
    # Gi·ªØ nguy√™n logic
    if not update or not update.message or not update.effective_user or not update.message.document: return WAITING_FOR_UPDATE_FILE
    telegram_id = update.effective_user.id; chat_id = update.message.chat_id; log_prefix = f"[DATA_UPDATE_PROCESS|UserTG:{telegram_id}]"; logger.info(f"{log_prefix} Nh·∫≠n file document ƒë·ªÉ update.")
    document = update.message.document; loop = asyncio.get_running_loop(); file_path = None; processing_message = None; actual_updater_user_id = None
    if document.mime_type not in ("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",): await send_or_edit_message(context=context, chat_id=chat_id, text="‚ö†Ô∏è Ch·ªâ ch·∫•p nh·∫≠n file Excel (.xlsx). Vui l√≤ng g·ª≠i l·∫°i ho·∫∑c g√µ /cancel."); return WAITING_FOR_UPDATE_FILE
    target_set_id = context.user_data.get('target_set_id_for_update')
    if not target_set_id: await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói: Thi·∫øu th√¥ng tin b·ªô th·∫ª c·∫ßn c·∫≠p nh·∫≠t. Vui l√≤ng th·ª≠ l·∫°i t·ª´ ƒë·∫ßu."); return ConversationHandler.END
    try: await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception : pass
    temp_dir = TEMP_UPDATE_DIR; results = {'updated': 0, 'added': 0, 'skipped': 0, 'errors': []}
    try:
        user_info = get_user_by_telegram_id(telegram_id); actual_updater_user_id = user_info['user_id']
        file = await document.get_file(); timestamp = int(time.time()); original_filename = document.file_name or f"update_set_{target_set_id}"
        safe_filename = "".join(c for c in original_filename if c.isalnum() or c in ['.','_','-']).strip() or f"update_set_{target_set_id}.xlsx"
        os.makedirs(temp_dir, exist_ok=True); file_path = os.path.join(temp_dir, f"update_{telegram_id}_{target_set_id}_{timestamp}_{safe_filename}"); await file.download_to_drive(custom_path=file_path)
    except (UserNotFoundError, DatabaseError) as e_user_db: await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng. ƒê√£ h·ªßy c·∫≠p nh·∫≠t."); context.user_data.pop('target_set_id_for_update', None); return ConversationHandler.END
    except (BadRequest, TelegramError) as e_telegram: await send_or_edit_message(context=context, chat_id=chat_id, text=f"‚ùå L·ªói Telegram khi t·∫£i file: {e_telegram}"); return WAITING_FOR_UPDATE_FILE
    except OSError as e_os: await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói h·ªá th·ªëng khi l∆∞u file t·∫°m."); context.user_data.pop('target_set_id_for_update', None); return ConversationHandler.END
    except Exception as e_download:
        if file_path and os.path.exists(file_path): 
            try: await loop.run_in_executor(None, os.remove, file_path)
            except Exception : pass
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói kh√¥ng mong mu·ªën khi t·∫£i file update."); context.user_data.pop('target_set_id_for_update', None); return ConversationHandler.END
    processing_message = await send_or_edit_message(context=context, chat_id=chat_id, text=f"‚è≥ ƒêang x·ª≠ l√Ω file v√† c·∫≠p nh·∫≠t b·ªô th·∫ª (ID: {target_set_id})...")
    try: results = await loop.run_in_executor(None, process_set_update_from_excel, actual_updater_user_id, target_set_id, file_path)
    except (FileProcessingError, InvalidFileFormatError, ExcelImportError, DatabaseError, PermissionsError, SetNotFoundError) as e_service: results['errors'].append({'line': 'Service', 'reason': f'L·ªói service: {e_service}', 'card_info': ''})
    except Exception as e_service_unk: results['errors'].append({'line': 'Service', 'reason': f'L·ªói service kh√¥ng x√°c ƒë·ªãnh: {e_service_unk}', 'card_info': ''})
    final_report = "";
    try:
        report_lines = [f"‚úÖ **K·∫øt qu·∫£ c·∫≠p nh·∫≠t b·ªô th·∫ª (ID: {target_set_id}):**\n"]
        report_lines.append(f"üîÑ C·∫≠p nh·∫≠t th√†nh c√¥ng: **{results.get('updated', 0)}** th·∫ª"); report_lines.append(f"‚ûï Th√™m m·ªõi th√†nh c√¥ng: **{results.get('added', 0)}** th·∫ª")
        total_skipped_errors = results.get('skipped', 0) + len(results.get('errors', [])); report_lines.append(f"‚è≠Ô∏è B·ªè qua / L·ªói d√≤ng: **{total_skipped_errors}** d√≤ng")
        errors = results.get('errors', [])
        if errors: report_lines.append("\nüìÑ Chi ti·∫øt l·ªói / b·ªè qua (t·ªëi ƒëa 10 d√≤ng):"); count_err = 0
        for err_info in errors:
            if count_err >= 10: report_lines.append("  ... (v√† c√°c l·ªói kh√°c n·∫øu c√≥)"); break
            if isinstance(err_info, dict): line_num = err_info.get('line', '?'); reason = err_info.get('reason', 'Kh√¥ng r√µ l√Ω do'); card_inf = err_info.get('card_info', ''); report_lines.append(f" - D√≤ng {line_num}: {html.escape(str(reason))} {html.escape(str(card_inf))}"); count_err +=1
            else: report_lines.append(f" - L·ªói kh√¥ng r√µ ƒë·ªãnh d·∫°ng: {html.escape(str(err_info))}"); count_err += 1
        final_report = "\n".join(report_lines)
        kb_back_manage = [[InlineKeyboardButton("üóÇÔ∏è Menu Qu·∫£n l√Ω", callback_data="show_set_management")]]; reply_markup_report = InlineKeyboardMarkup(kb_back_manage)
        await send_or_edit_message(context=context, chat_id=chat_id, text=final_report, parse_mode='Markdown', message_to_edit=processing_message, reply_markup=reply_markup_report)
    except Exception as report_err: plain_report = final_report.replace('*','').replace('_','').replace('`','') if final_report else "X·ª≠ l√Ω xong, nh∆∞ng c√≥ l·ªói khi t·∫°o b√°o c√°o chi ti·∫øt."; await send_or_edit_message(context=context, chat_id=chat_id, text=plain_report, message_to_edit=processing_message)
    finally:
        if file_path and os.path.exists(file_path): 
            try: await loop.run_in_executor(None, os.remove, file_path)
            except Exception : pass
        context.user_data.pop('target_set_id_for_update', None)
    return ConversationHandler.END

async def _handle_state_update_set_unexpected(update, context):
    # Gi·ªØ nguy√™n logic
    if not update or not update.message: return WAITING_FOR_UPDATE_FILE
    await send_or_edit_message(context=context, chat_id=update.message.chat_id, text="‚ö†Ô∏è ƒêang ch·ªù file Excel (.xlsx) ƒë·ªÉ c·∫≠p nh·∫≠t.\nVui l√≤ng g·ª≠i file ho·∫∑c nh·∫•n H·ªßy / g√µ /cancel.")
    return WAITING_FOR_UPDATE_FILE

async def _handle_cancel_update_set(update, context):
    # Gi·ªØ nguy√™n logic
    if not update or not update.effective_user: return ConversationHandler.END
    user_id_tg = update.effective_user.id; log_prefix = f"[DATA_UPDATE_CANCEL|UserTG:{user_id_tg}]"; logger.info(f"{log_prefix} H·ªßy c·∫≠p nh·∫≠t b·ªô t·ª´.")
    context.user_data.pop("target_set_id_for_update", None); message_to_edit_cancel = None; chat_id_cancel = user_id_tg; parse_mode_cancel = None
    if update.callback_query: 
        query = update.callback_query
        try: 
            await query.answer()
        except Exception: pass
        if query.message: 
            message_to_edit_cancel = query.message; chat_id_cancel = query.message.chat_id 
    elif update.message: 
        chat_id_cancel = update.message.chat_id
    try:
        reply_markup_cancel = build_set_management_keyboard(); cancel_message_text = "ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t b·ªô t·ª´. Quay l·∫°i Menu Qu·∫£n l√Ω:"; parse_mode_cancel = 'Markdown'
    except Exception : reply_markup_cancel = None; cancel_message_text = "ƒê√£ h·ªßy thao t√°c c·∫≠p nh·∫≠t b·ªô t·ª´."
    try: await send_or_edit_message(context=context, chat_id=chat_id_cancel, text=cancel_message_text, message_to_edit=message_to_edit_cancel, reply_markup=reply_markup_cancel, parse_mode=parse_mode_cancel)
    except Exception : pass
    return ConversationHandler.END

update_set_conv = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_callback_update_set_select, pattern="^{}".format(UPDATE_SET_CALLBACK_PREFIX))],
    states={WAITING_FOR_UPDATE_FILE: [MessageHandler(filters.Document.FileExtension("xlsx"), _handle_state_update_set_file), MessageHandler(filters.TEXT & ~filters.COMMAND, _handle_state_update_set_unexpected), MessageHandler(filters.ALL & ~filters.COMMAND & ~filters.TEXT & ~filters.Document.FileExtension("xlsx"), _handle_state_update_set_unexpected)]},
    fallbacks=[CommandHandler("cancel", _handle_cancel_update_set), CallbackQueryHandler(_handle_cancel_update_set, pattern='^cancel_update_set$')],
    name="update_set_conversation", persistent=False, per_message=False
)

def register_handlers(app):
    app.add_handler(update_set_conv)
    # S·ª≠a l·∫ßn 1: Kh√¥ng ƒëƒÉng k√Ω handle_command_update_set ·ªü ƒë√¢y n·ªØa v√¨ n√≥ ƒë∆∞·ª£c g·ªçi t·ª´ set_management
    # app.add_handler(CommandHandler("flashcard_update_set", handle_command_update_set)) 
    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module Data Import Update.")

