"""
Module ch·ª©a c√°c handlers v√† conversation handler cho ch·ª©c nƒÉng
g·ª≠i th√¥ng b√°o h√†ng lo·∫°t (broadcast) c·ªßa admin.
"""
import logging
import asyncio
import time 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    filters 
)
from telegram.error import BadRequest, TelegramError, Forbidden 
from config import ( 
    CAN_BROADCAST_MESSAGES,
    GETTING_BROADCAST_MESSAGE,
    CONFIRMING_BROADCAST,
    BROADCAST_SEND_DELAY 
)
from database.query_user import get_all_users 
from ui.core_ui import build_main_menu 
from utils.helpers import send_or_edit_message, require_permission 
from utils.exceptions import DatabaseError 
logger = logging.getLogger(__name__)
@require_permission(CAN_BROADCAST_MESSAGES)
async def start_broadcast_conversation(update, context):
    """Entry Point: B·∫Øt ƒë·∫ßu conversation ƒë·ªÉ admin g·ª≠i th√¥ng b√°o h√†ng lo·∫°t."""
    if not update: return ConversationHandler.END
    if not update.effective_user: return ConversationHandler.END
    user_id = update.effective_user.id
    log_prefix = f"[BROADCAST_START|Admin:{user_id}]"
    logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu conversation g·ª≠i th√¥ng b√°o.")
    chat_id_to_reply = -1
    message_to_edit = None
    source = "Unknown"
    if update.callback_query:
        source = "Callback(start_broadcast)"
        query = update.callback_query
        try: await query.answer()
        except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
        if query.message:
            chat_id_to_reply = query.message.chat_id
            message_to_edit = query.message
        else:
            chat_id_to_reply = user_id
            logger.warning(f"{log_prefix} Callback query kh√¥ng c√≥ message g·ªëc.")
    elif update.message: 
        source = "Command(/broadcast)"
        chat_id_to_reply = update.message.chat_id
        message_to_edit = None
    else:
        logger.error(f"{log_prefix} Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ngu·ªìn update.")
        return ConversationHandler.END
    cancel_button = InlineKeyboardButton("üö´ H·ªßy", callback_data="broadcast_cancel")
    cancel_keyboard = InlineKeyboardMarkup([[cancel_button]])
    await send_or_edit_message(
        context=context,
        chat_id=chat_id_to_reply,
        text="üìù Vui l√≤ng g·ª≠i n·ªôi dung tin nh·∫Øn b·∫°n mu·ªën broadcast.\nB·∫°n c√≥ th·ªÉ d√πng ƒë·ªãnh d·∫°ng Markdown/HTML, g·ª≠i ·∫£nh k√®m caption, ho·∫∑c ch·ªâ text th∆∞·ªùng.\n\n(Nh·∫•n H·ªßy ho·∫∑c g√µ /cancel ƒë·ªÉ h·ªßy)",
        message_to_edit=message_to_edit,
        reply_markup=cancel_keyboard
    )
    return GETTING_BROADCAST_MESSAGE
async def get_broadcast_message(update, context):
    """Handler cho state GETTING_BROADCAST_MESSAGE, x·ª≠ l√Ω tin nh·∫Øn t·ª´ admin."""
    if not update: logger.warning("get_broadcast_message: update kh√¥ng h·ª£p l·ªá."); return GETTING_BROADCAST_MESSAGE
    if not update.effective_user: logger.warning("get_broadcast_message: user kh√¥ng h·ª£p l·ªá."); return GETTING_BROADCAST_MESSAGE
    if not update.message: logger.warning("get_broadcast_message: message kh√¥ng h·ª£p l·ªá."); return GETTING_BROADCAST_MESSAGE
    admin_id = update.effective_user.id
    log_prefix = f"[BROADCAST_GET_MSG|Admin:{admin_id}]"
    message = update.message 
    logger.info(f"{log_prefix} ƒê√£ nh·∫≠n tin nh·∫Øn broadcast (message_id: {message.message_id}).")
    context.user_data['broadcast_message_chat_id'] = message.chat_id
    context.user_data['broadcast_message_id'] = message.message_id
    logger.info(f"{log_prefix} ƒê√£ l∆∞u message ID: {message.message_id} t·ª´ chat ID: {message.chat_id}.")
    users_to_send_ids = []
    try:
        all_users_info = get_all_users() 
        users_to_send_ids = []
        for user in all_users_info:
            telegram_id = user.get('telegram_id')
            if telegram_id:
                users_to_send_ids.append(telegram_id)
        if not users_to_send_ids:
            await context.bot.send_message(admin_id, "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o.")
            context.user_data.pop('broadcast_message_chat_id', None)
            context.user_data.pop('broadcast_message_id', None)
            return ConversationHandler.END
    except DatabaseError as e:
        logger.error(f"{log_prefix} L·ªói DB khi l·∫•y danh s√°ch user: {e}")
        await context.bot.send_message(admin_id, "‚ùå L·ªói l·∫•y danh s√°ch th√†nh vi√™n t·ª´ c∆° s·ªü d·ªØ li·ªáu.")
        return ConversationHandler.END 
    except Exception as e: 
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën khi l·∫•y user: {e}", exc_info=True)
        await context.bot.send_message(admin_id, "‚ùå C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra khi l·∫•y danh s√°ch ng∆∞·ªùi nh·∫≠n.")
        return ConversationHandler.END
    context.user_data['broadcast_user_list'] = users_to_send_ids
    num_users = len(users_to_send_ids)
    logger.info(f"{log_prefix} S·∫Ω g·ª≠i t·ªõi {num_users} th√†nh vi√™n.")
    confirm_text = f"Tin nh·∫Øn c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi **{num_users}** th√†nh vi√™n. N·ªôi dung nh∆∞ sau (preview):"
    await context.bot.send_message(admin_id, confirm_text, parse_mode='Markdown')
    try:
        await context.bot.copy_message(
            chat_id=admin_id,
            from_chat_id=message.chat_id,
            message_id=message.message_id
        )
    except Exception as e_copy:
        logger.error(f"{log_prefix} L·ªói copy preview message: {e_copy}")
        await context.bot.send_message(admin_id, "(L·ªói hi·ªÉn th·ªã n·ªôi dung xem tr∆∞·ªõc)")
    button_yes = InlineKeyboardButton("‚úÖ G·ª≠i ngay", callback_data="broadcast_confirm:yes")
    button_no = InlineKeyboardButton("üö´ H·ªßy b·ªè", callback_data="broadcast_confirm:no")
    keyboard = [[button_yes], [button_no]] 
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(admin_id, "‚ùì B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª≠i th√¥ng b√°o n√†y kh√¥ng?", reply_markup=reply_markup)
    return CONFIRMING_BROADCAST
async def confirm_broadcast(update, context):
    """Handler cho state CONFIRMING_BROADCAST, x·ª≠ l√Ω n√∫t b·∫•m Yes/No."""
    query = update.callback_query
    if not query: logger.warning("confirm_broadcast: Callback kh√¥ng h·ª£p l·ªá."); return ConversationHandler.END
    if not query.from_user: logger.warning("confirm_broadcast: User kh√¥ng h·ª£p l·ªá."); return ConversationHandler.END
    if not query.data: logger.warning("confirm_broadcast: Data kh√¥ng h·ª£p l·ªá."); return ConversationHandler.END
    admin_id = query.from_user.id
    log_prefix = f"[BROADCAST_CONFIRM|Admin:{admin_id}]"
    decision = None
    message_to_edit = query.message 
    try:
        await query.answer() 
        parts = query.data.split(":")
        if len(parts) < 2:
             raise IndexError("Callback data thi·∫øu decision")
        decision = parts[1] 
    except (IndexError, AttributeError, BadRequest) as e:
        logger.error(f"{log_prefix} L·ªói x·ª≠ l√Ω callback x√°c nh·∫≠n: {e}")
        await send_or_edit_message(context=context, chat_id=admin_id, text="L·ªói x·ª≠ l√Ω l·ª±a ch·ªçn.", message_to_edit=message_to_edit)
        context.user_data.pop('broadcast_message_chat_id', None)
        context.user_data.pop('broadcast_message_id', None)
        context.user_data.pop('broadcast_user_list', None)
        return ConversationHandler.END
    if decision == "no":
        logger.info(f"{log_prefix} Admin ƒë√£ h·ªßy g·ª≠i broadcast.")
        await send_or_edit_message(context=context, chat_id=admin_id, text="ƒê√£ h·ªßy g·ª≠i th√¥ng b√°o.", message_to_edit=message_to_edit, reply_markup=None)
    elif decision == "yes":
        logger.info(f"{log_prefix} Admin x√°c nh·∫≠n g·ª≠i broadcast.")
        broadcast_chat_id = context.user_data.get('broadcast_message_chat_id')
        broadcast_msg_id = context.user_data.get('broadcast_message_id')
        user_list = context.user_data.get('broadcast_user_list')
        if not broadcast_chat_id or not broadcast_msg_id or not user_list:
            logger.error(f"{log_prefix} Thi·∫øu d·ªØ li·ªáu trong user_data ƒë·ªÉ g·ª≠i broadcast.")
            await send_or_edit_message(context=context, chat_id=admin_id, text="‚ùå L·ªói: Thi·∫øu th√¥ng tin ƒë·ªÉ g·ª≠i. Vui l√≤ng th·ª≠ l·∫°i.", message_to_edit=message_to_edit, reply_markup=None)
        else:
            num_users_bc = len(user_list)
            await send_or_edit_message(
                context=context,
                chat_id=admin_id,
                text=f"‚è≥ B·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o t·ªõi {num_users_bc} th√†nh vi√™n...\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c b√°o c√°o khi ho√†n t·∫•t.",
                message_to_edit=message_to_edit,
                reply_markup=None 
            )
            task_data = {
                'admin_id': admin_id,
                'from_chat_id': broadcast_chat_id,
                'message_id': broadcast_msg_id,
                'user_list': user_list
            }
            if context.job_queue:
                job_name = f"broadcast_{admin_id}_{int(time.time())}"
                context.job_queue.run_once( _send_broadcast_task, when=0, data=task_data, name=job_name )
                logger.info(f"{log_prefix} ƒê√£ l√™n l·ªãch job g·ª≠i broadcast: {job_name}")
            else:
                logger.error(f"{log_prefix} Kh√¥ng t√¨m th·∫•y JobQueue!")
                await context.bot.send_message(admin_id, "‚ùå L·ªói h·ªá th·ªëng: Kh√¥ng th·ªÉ l√™n l·ªãch g·ª≠i.")
    else:
        logger.warning(f"{log_prefix} Callback data kh√¥ng h·ª£p l·ªá: {query.data}")
        await context.bot.send_message(admin_id, "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        return CONFIRMING_BROADCAST 
    context.user_data.pop('broadcast_message_chat_id', None)
    context.user_data.pop('broadcast_message_id', None)
    context.user_data.pop('broadcast_user_list', None)
    logger.debug(f"{log_prefix} ƒê√£ x√≥a broadcast keys.")
    return ConversationHandler.END
async def _send_broadcast_task(context: ContextTypes.DEFAULT_TYPE):
    """H√†m ƒë∆∞·ª£c g·ªçi b·ªüi JobQueue ƒë·ªÉ th·ª±c hi·ªán g·ª≠i broadcast."""
    if not context or not context.job or not context.job.data:
        logger.error("[BROADCAST_TASK] Thi·∫øu context ho·∫∑c job data.")
        return
    job_data = context.job.data
    admin_id = job_data.get('admin_id')
    from_chat_id = job_data.get('from_chat_id')
    message_id = job_data.get('message_id')
    user_list = job_data.get('user_list', [])
    bot = context.bot 
    if not bot:
        logger.error("[BROADCAST_TASK] Thi·∫øu bot instance trong context.")
        return 
    if not admin_id or not from_chat_id or not message_id or not user_list:
        logger.error(f"[BROADCAST_TASK] Thi·∫øu d·ªØ li·ªáu: admin={admin_id}, from_chat={from_chat_id}, msg_id={message_id}, users={len(user_list)}")
        if admin_id:
             try:
                 await bot.send_message(admin_id, "‚ùå L·ªói nghi√™m tr·ªçng: Thi·∫øu d·ªØ li·ªáu ƒë·ªÉ g·ª≠i broadcast.")
             except Exception as e_send_err:
                 logger.error(f"L·ªói g·ª≠i th√¥ng b√°o thi·∫øu d·ªØ li·ªáu cho admin {admin_id}: {e_send_err}")
        return 
    log_prefix = f"[BROADCAST_TASK|Admin:{admin_id}]"
    logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu g·ª≠i t·ªõi {len(user_list)} users.")
    success_count = 0
    fail_count = 0
    for target_user_id in user_list:
        user_task_log = f"{log_prefix}[Target:{target_user_id}]"
        try:
            await bot.copy_message(
                chat_id=target_user_id,
                from_chat_id=from_chat_id,
                message_id=message_id
            )
            success_count = success_count + 1
            logger.debug(f"{user_task_log} G·ª≠i th√†nh c√¥ng.")
        except Forbidden:
            fail_count = fail_count + 1
            logger.warning(f"{user_task_log} G·ª≠i th·∫•t b·∫°i: Bot b·ªã ch·∫∑n.")
        except (BadRequest, TelegramError) as e_tg:
            fail_count = fail_count + 1
            logger.error(f"{user_task_log} G·ª≠i th·∫•t b·∫°i: L·ªói Telegram - {e_tg}")
        except Exception as e_unk:
            fail_count = fail_count + 1
            logger.error(f"{user_task_log} G·ª≠i th·∫•t b·∫°i: L·ªói kh√¥ng mong mu·ªën - {e_unk}", exc_info=True)
        await asyncio.sleep(BROADCAST_SEND_DELAY)
    final_report = f"üì¢ Ho√†n t·∫•t g·ª≠i th√¥ng b√°o h√†ng lo·∫°t:\n- Th√†nh c√¥ng: {success_count}\n- Th·∫•t b·∫°i: {fail_count}"
    logger.info(f"{log_prefix} G·ª≠i b√°o c√°o: {final_report}")
    try:
        await bot.send_message(admin_id, final_report)
    except Exception as e_report:
        logger.error(f"{log_prefix} L·ªói g·ª≠i b√°o c√°o cu·ªëi c√πng cho admin: {e_report}")
async def cancel_broadcast(update, context):
    """Fallback handler ƒë·ªÉ h·ªßy conversation g·ª≠i broadcast."""
    if not update: return ConversationHandler.END
    if not update.effective_user: return ConversationHandler.END
    user_id = update.effective_user.id
    log_prefix = f"[BROADCAST_CANCEL|Admin:{user_id}]"
    logger.info(f"{log_prefix} H·ªßy g·ª≠i th√¥ng b√°o.")
    context.user_data.pop('broadcast_message_chat_id', None)
    context.user_data.pop('broadcast_message_id', None)
    context.user_data.pop('broadcast_user_list', None)
    logger.debug(f"{log_prefix} ƒê√£ x√≥a broadcast keys kh·ªèi user_data.")
    chat_id_cancel = user_id 
    message_to_edit_cancel = None
    parse_mode_cancel = None 
    if update.callback_query:
        query = update.callback_query
        try: await query.answer()
        except Exception: pass
        if query.message:
            message_to_edit_cancel = query.message
            chat_id_cancel = query.message.chat_id 
    elif update.message: 
        chat_id_cancel = update.message.chat_id
    reply_markup_final = None
    cancel_message_text_final = "ƒê√£ h·ªßy g·ª≠i th√¥ng b√°o."
    try:
        bot_instance_cancel = context.bot if hasattr(context, 'bot') else (context.application.bot if context.application and hasattr(context.application, 'bot') else None)
        if bot_instance_cancel:
            text_menu, reply_markup_menu = await build_main_menu(user_id, bot_instance_cancel)
            if text_menu and reply_markup_menu:
                 reply_markup_final = reply_markup_menu
                 cancel_message_text_final = text_menu 
                 parse_mode_cancel = 'Markdown' 
            else:
                 logger.warning(f"{log_prefix} L·ªói build menu ch√≠nh khi h·ªßy.")
                 cancel_message_text_final = "ƒê√£ h·ªßy. C√≥ l·ªói khi t·∫£i menu ch√≠nh."
        else:
            logger.error(f"{log_prefix} Kh√¥ng c√≥ bot instance ƒë·ªÉ build menu ch√≠nh.")
            cancel_message_text_final = "ƒê√£ h·ªßy. L·ªói h·ªá th·ªëng."
    except Exception as e_menu:
        logger.error(f"{log_prefix} L·ªói khi hi·ªÉn th·ªã menu ch√≠nh sau khi h·ªßy: {e_menu}", exc_info=True)
        cancel_message_text_final = "ƒê√£ h·ªßy. L·ªói hi·ªÉn th·ªã menu."
    try:
        await send_or_edit_message(
            context=context,
            chat_id=chat_id_cancel,
            text=cancel_message_text_final,
            reply_markup=reply_markup_final,
            parse_mode=parse_mode_cancel,
            message_to_edit=message_to_edit_cancel
        )
        logger.debug(f"{log_prefix} ƒê√£ g·ª≠i/s·ª≠a tin nh·∫Øn h·ªßy.")
    except Exception as e_send_final:
         logger.error(f"{log_prefix} L·ªói g·ª≠i tin nh·∫Øn h·ªßy cu·ªëi c√πng: {e_send_final}")
    return ConversationHandler.END
broadcast_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_broadcast_conversation, pattern='^start_broadcast$'),
        CommandHandler("broadcast", start_broadcast_conversation) 
    ],
    states={
        GETTING_BROADCAST_MESSAGE: [MessageHandler(filters.ALL & ~filters.COMMAND, get_broadcast_message)], 
        CONFIRMING_BROADCAST: [CallbackQueryHandler(confirm_broadcast, pattern='^broadcast_confirm:(yes|no)$')], 
    },
    fallbacks=[
        CommandHandler('cancel', cancel_broadcast), 
        CallbackQueryHandler(cancel_broadcast, pattern='^broadcast_cancel$') 
    ],
    name="admin_broadcast_conversation", 
    persistent=False, 
    per_message=True 
)
def register_handlers(app: Application):
    """ƒêƒÉng k√Ω Conversation Handler cho ch·ª©c nƒÉng broadcast."""
    app.add_handler(broadcast_conv_handler)
    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module Broadcast (Admin).")
