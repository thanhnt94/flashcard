# File: flashcard-telegram-bot/handlers/set_management.py
"""
Module ch·ª©a c√°c handlers li√™n quan ƒë·∫øn qu·∫£n l√Ω b·ªô t·ª´ (Set Management).
(S·ª≠a l·∫ßn 4: S·ª≠a l·ªói MarkdownV2 parsing cho d·∫•u ngo·∫∑c ƒë∆°n trong _display_set_deletion_menu
             v√† c√°c tin nh·∫Øn x√°c nh·∫≠n kh√°c.)
(S·ª≠a l·∫ßn 5: S·ª≠a l·ªói MarkdownV2 cho ti√™u ƒë·ªÅ menu "Qu·∫£n l√Ω b·ªô th·∫ª".)
"""
import logging
import html 
import math 

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ContextTypes, CallbackQueryHandler 
from telegram.constants import ParseMode 

from config import (
    CAN_MANAGE_OWN_SETS,
    SET_MGMT_DELETE_MENU_PFX,
    SET_MGMT_ASK_CONFIRM_DELETE_PFX,
    SET_MGMT_CONFIRM_DELETE_ACTION_PFX,
    SETS_PER_PAGE 
)
from database.query_user import get_user_by_telegram_id
from database.query_set import get_sets, delete_set_by_id_and_owner 
from ui.core_ui import build_set_management_keyboard, build_pagination_keyboard 
from utils.helpers import send_or_edit_message, require_permission, escape_md_v2 
from utils.exceptions import DatabaseError, UserNotFoundError, SetNotFoundError, PermissionsError

from handlers.data_import_update import handle_command_update_set as trigger_update_set_handler
from handlers.data_export import handle_export_all_data_set_command as trigger_export_set_handler


logger = logging.getLogger(__name__)

DELETION_MENU_MSG_ID_KEY = 'set_mgmt_delete_menu_msg_id'

@require_permission(CAN_MANAGE_OWN_SETS)
async def show_set_management(update, context):
    query = update.callback_query
    if not query or not query.from_user: logger.warning("show_set_management: Callback/User kh√¥ng h·ª£p l·ªá."); return
    user_id_tg = query.from_user.id
    log_prefix = f"[SET_MGMT_MENU|UserTG:{user_id_tg}]"; logger.info(f"{log_prefix} Hi·ªÉn th·ªã menu qu·∫£n l√Ω b·ªô t·ª´.")
    chat_id = query.message.chat_id if query.message else user_id_tg; message_to_edit = query.message
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        creator_user_id = None
        try:
            user_info = get_user_by_telegram_id(user_id_tg)
            if not user_info or 'user_id' not in user_info: raise UserNotFoundError(identifier=user_id_tg)
            creator_user_id = user_info['user_id']
        except (UserNotFoundError, DatabaseError) as e_user:
            await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i th√¥ng tin ng∆∞·ªùi d√πng.", message_to_edit=message_to_edit); return
        
        reply_markup = build_set_management_keyboard(has_pending_reports=False) 
        if reply_markup:
            # S·ª≠a l·∫ßn 5: S·ª≠a ƒë·ªãnh d·∫°ng MarkdownV2 cho ti√™u ƒë·ªÅ
            text_to_send = "üóÇÔ∏è *Qu·∫£n l√Ω b·ªô th·∫ª\\:*" 
            sent_msg = await send_or_edit_message(context=context, chat_id=chat_id, text=text_to_send, reply_markup=reply_markup, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)
            if sent_msg and hasattr(sent_msg, 'message_id'): 
                 context.user_data['set_management_menu_message_id'] = sent_msg.message_id
        else: await send_or_edit_message(context, chat_id, "‚ùå L·ªói hi·ªÉn th·ªã menu qu·∫£n l√Ω.", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

@require_permission(CAN_MANAGE_OWN_SETS)
async def _display_set_deletion_menu(update, context, page=1):
    query = update.callback_query
    if not query or not query.from_user: return
    
    creator_telegram_id = query.from_user.id
    log_prefix = f"[SET_MGMT_DELETE_MENU|UserTG:{creator_telegram_id}|Page:{page}]"
    logger.info(f"{log_prefix} Hi·ªÉn th·ªã danh s√°ch b·ªô ƒë·ªÉ x√≥a.")
    chat_id = query.message.chat_id if query.message else creator_telegram_id
    message_to_edit = query.message

    try: await query.answer()
    except Exception: pass

    try:
        user_info = get_user_by_telegram_id(creator_telegram_id)
        if not user_info or 'user_id' not in user_info: raise UserNotFoundError(identifier=creator_telegram_id)
        creator_user_id = user_info['user_id']

        user_sets, total_sets = get_sets(
            columns=['set_id', 'title'], 
            creator_user_id=creator_user_id, 
            limit=SETS_PER_PAGE, 
            offset=(page - 1) * SETS_PER_PAGE
        )

        keyboard = []
        total_pages_calc = max(1, (total_sets + SETS_PER_PAGE - 1) // SETS_PER_PAGE)
        text = f"üóëÔ∏è **Ch·ªçn b·ªô t·ª´ b·∫°n mu·ªën x√≥a** \\(Trang {page}/{total_pages_calc}\\):\n" 
        
        if not user_sets:
            text = "B·∫°n kh√¥ng c√≥ b·ªô t·ª´ n√†o ƒë·ªÉ x√≥a\\." 
        else:
            for s_item in user_sets: 
                set_id = s_item.get('set_id'); title = s_item.get('title', f"B·ªô kh√¥ng t√™n {set_id}")
                if set_id is None: continue
                callback_data = f"{SET_MGMT_ASK_CONFIRM_DELETE_PFX}{set_id}"
                keyboard.append([InlineKeyboardButton(f"üìö {html.escape(title)}", callback_data=callback_data)])
        
        pagination_row = build_pagination_keyboard(page, total_pages_calc, f"{SET_MGMT_DELETE_MENU_PFX}_page") 
        if pagination_row:
            keyboard.append(pagination_row)
        
        keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i Menu Qu·∫£n l√Ω", callback_data="show_set_management")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        sent_msg = await send_or_edit_message(context, chat_id, text, reply_markup, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)
        if sent_msg:
            context.user_data[DELETION_MENU_MSG_ID_KEY] = sent_msg.message_id

    except (UserNotFoundError, DatabaseError) as e_db:
        logger.error(f"{log_prefix} L·ªói DB/User: {e_db}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i danh s√°ch b·ªô th·∫ª.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

async def handle_callback_delete_set_page(update, context):
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    try:
        parts = query.data.split(':'); action_page = parts[2]; current_page = int(parts[3])
        new_page = current_page + 1 if action_page == "next" else max(1, current_page - 1)
        await _display_set_deletion_menu(update, context, page=new_page)
    except (IndexError, ValueError) as e: logger.error(f"L·ªói parse callback ph√¢n trang x√≥a b·ªô: {query.data} - {e}"); await query.answer("L·ªói d·ªØ li·ªáu ph√¢n trang.", show_alert=True)

@require_permission(CAN_MANAGE_OWN_SETS)
async def handle_callback_ask_confirm_delete_set(update, context):
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    deleter_telegram_id = query.from_user.id; log_prefix = f"[SET_MGMT_ASK_CONFIRM_DELETE|UserTG:{deleter_telegram_id}]"
    chat_id = query.message.chat_id if query.message else deleter_telegram_id; message_to_edit = query.message; set_id = None
    try: await query.answer()
    except Exception: pass
    try:
        set_id = int(query.data.split(SET_MGMT_ASK_CONFIRM_DELETE_PFX)[1]); logger.info(f"{log_prefix} Y√™u c·∫ßu x√°c nh·∫≠n x√≥a Set ID: {set_id}")
        set_info_list, _ = get_sets(set_id=set_id, columns=['title']);
        if not set_info_list: raise SetNotFoundError(set_id=set_id)
        set_title = set_info_list[0].get('title', f"ID {set_id}")
        text = (f"‚ö†Ô∏è **X√ÅC NH·∫¨N X√ìA B·ªò TH·∫∫** ‚ö†Ô∏è\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn b·ªô th·∫ª:\n"
                f"**{escape_md_v2(set_title)}** \\(ID: `{set_id}`\\)?\n\n" 
                f"‚ùóÔ∏è H√†nh ƒë·ªông n√†y **KH√îNG TH·ªÇ HO√ÄN T√ÅC**\\. T·∫•t c·∫£ th·∫ª, ghi ch√∫, v√† ti·∫øn tr√¨nh h·ªçc li√™n quan ƒë·∫øn b·ªô n√†y s·∫Ω b·ªã x√≥a ho√†n to√†n\\.") 
        keyboard = [[InlineKeyboardButton(f"‚úÖ C√≥, x√≥a b·ªô ID {set_id}!", callback_data=f"{SET_MGMT_CONFIRM_DELETE_ACTION_PFX}{set_id}")], [InlineKeyboardButton("üö´ Kh√¥ng, h·ªßy b·ªè", callback_data="show_set_management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await send_or_edit_message(context, chat_id, text, reply_markup, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)
    except (IndexError, ValueError): logger.error(f"{log_prefix} Callback data l·ªói: {query.data}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback.", message_to_edit=message_to_edit)
    except SetNotFoundError: logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y set {set_id}."); await send_or_edit_message(context, chat_id, "‚ùå B·ªô th·∫ª kh√¥ng c√≤n t·ªìn t·∫°i.", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

@require_permission(CAN_MANAGE_OWN_SETS)
async def confirm_delete_set_callback(update, context):
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    deleter_telegram_id = query.from_user.id; log_prefix = f"[SET_MGMT_CONFIRM_DELETE|UserTG:{deleter_telegram_id}]"
    chat_id = query.message.chat_id if query.message else deleter_telegram_id; message_to_edit = query.message; set_id_to_delete = None
    try: await query.answer("ƒêang x·ª≠ l√Ω y√™u c·∫ßu x√≥a...")
    except Exception: pass
    try:
        set_id_to_delete = int(query.data.split(SET_MGMT_CONFIRM_DELETE_ACTION_PFX)[1]); logger.info(f"{log_prefix} X√°c nh·∫≠n x√≥a Set ID: {set_id_to_delete}")
        user_info = get_user_by_telegram_id(deleter_telegram_id)
        if not user_info or 'user_id' not in user_info: raise UserNotFoundError(identifier=deleter_telegram_id)
        deleter_user_id = user_info['user_id']
        set_info_before_delete_list, _ = get_sets(set_id=set_id_to_delete, columns=['title']); set_title_deleted = set_info_before_delete_list[0].get('title', f"ID {set_id_to_delete}") if set_info_before_delete_list else f"ID {set_id_to_delete}"
        affected_users_telegram_ids = delete_set_by_id_and_owner(set_id_to_delete, deleter_user_id)
        success_message = f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng b·ªô th·∫ª '**{escape_md_v2(set_title_deleted)}**' \\(ID: `{set_id_to_delete}`\\)\\." 
        logger.info(f"{log_prefix} {success_message}")
        if affected_users_telegram_ids:
            logger.info(f"{log_prefix} S·∫Ω th√¥ng b√°o cho {len(affected_users_telegram_ids)} ng∆∞·ªùi d√πng b·ªã reset current_set_id.")
            notification_text = f"‚ÑπÔ∏è B·ªô th·∫ª '**{escape_md_v2(set_title_deleted)}**' m√† b·∫°n ƒëang h·ªçc ƒë√£ b·ªã ng∆∞·ªùi t·∫°o x√≥a b·ªè\\. L·ª±a ch·ªçn b·ªô hi·ªán t·∫°i c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a\\." 
            for tg_id in affected_users_telegram_ids:
                if tg_id != deleter_telegram_id: 
                    try: await context.bot.send_message(chat_id=tg_id, text=notification_text, parse_mode=ParseMode.MARKDOWN_V2)
                    except Exception as e_notify: logger.error(f"{log_prefix} L·ªói g·ª≠i th√¥ng b√°o cho TG ID {tg_id}: {e_notify}")
        reply_markup_back = build_set_management_keyboard(has_pending_reports=False) 
        await send_or_edit_message(context, chat_id, success_message + "\n\nüóÇÔ∏è *Qu·∫£n l√Ω b·ªô th·∫ª\\:*", reply_markup_back, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2) # S·ª≠a: parse_mode
    except (IndexError, ValueError): logger.error(f"{log_prefix} Callback data l·ªói: {query.data}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback.", message_to_edit=message_to_edit)
    except SetNotFoundError: logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y set {set_id_to_delete} ƒë·ªÉ x√≥a."); await send_or_edit_message(context, chat_id, "‚ùå B·ªô th·∫ª kh√¥ng c√≤n t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë∆∞·ª£c x√≥a.", message_to_edit=message_to_edit)
    except PermissionsError as e_perm: logger.warning(f"{log_prefix} L·ªói quy·ªÅn khi x√≥a set {set_id_to_delete}: {e_perm}"); await send_or_edit_message(context, chat_id, f"‚ùå {e_perm}", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError) as e_db: logger.error(f"{log_prefix} L·ªói DB/User khi x√≥a set: {e_db}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói khi th·ª±c hi·ªán x√≥a b·ªô th·∫ª.", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói nghi√™m tr·ªçng x·∫£y ra.", message_to_edit=message_to_edit)

def register_handlers(app: Application):
    app.add_handler(CallbackQueryHandler(show_set_management, pattern=r"^show_set_management$"))
    app.add_handler(CallbackQueryHandler(_display_set_deletion_menu, pattern=f"^{SET_MGMT_DELETE_MENU_PFX}$")) 
    app.add_handler(CallbackQueryHandler(handle_callback_delete_set_page, pattern=f"^{SET_MGMT_DELETE_MENU_PFX}_page:")) 
    app.add_handler(CallbackQueryHandler(handle_callback_ask_confirm_delete_set, pattern=f"^{SET_MGMT_ASK_CONFIRM_DELETE_PFX}")) 
    app.add_handler(CallbackQueryHandler(confirm_delete_set_callback, pattern=f"^{SET_MGMT_CONFIRM_DELETE_ACTION_PFX}")) 
    app.add_handler(CallbackQueryHandler(trigger_update_set_handler, pattern=r"^trigger_update_set$"))
    app.add_handler(CallbackQueryHandler(trigger_export_set_handler, pattern=r"^trigger_export_set$"))
    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module Set Management (Bao g·ªìm lu·ªìng x√≥a, update, export).")

