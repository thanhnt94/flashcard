# Path: flashcard_v2/handlers/reporting.py
"""
Module ch·ª©a c√°c handlers v√† conversation handler cho ch·ª©c nƒÉng b√°o c√°o l·ªói th·∫ª.
ƒê√£ c·∫≠p nh·∫≠t lu·ªìng xem b√°o c√°o theo th·∫ª v·ªõi ph√¢n trang.
S·ª≠ d·ª•ng service/UI m·ªõi, g·ªçi h√†m async UI ƒë√∫ng c√°ch.
ƒê√£ lo·∫°i b·ªè type hint v√† s·ª≠a l·ªói c√∫ ph√°p, escape MarkdownV2.
"""
import logging
import time
import html
import asyncio
import re

# Import t·ª´ th∆∞ vi·ªán telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import Application, ContextTypes, ConversationHandler # B·ªè import
from telegram.ext import (
    Application, ConversationHandler,
    MessageHandler, CommandHandler, CallbackQueryHandler, filters
)
from telegram.error import TelegramError, BadRequest, Forbidden, RetryAfter
from telegram.constants import ParseMode

# Import t·ª´ c√°c module kh√°c
from config import (
    DEFAULT_LEARNING_MODE, MODE_REVIEW_ALL_DUE, CAN_MANAGE_OWN_SETS
)
GETTING_REPORT_REASON = 6 # State conversation

# Import c√°c h√†m service, ui, query
from services.reporting_service import (
    submit_card_report,
    get_reportable_sets_summary,
    # resolve_card_report, # C√≥ th·ªÉ gi·ªØ l·∫°i n·∫øu c·∫ßn
    get_report_summary_by_card_in_set,
    get_pending_reports_for_card,
    resolve_all_reports_for_card
)
from ui.reporting_ui import (
    build_sets_with_reports_keyboard,
    build_reported_card_selection_keyboard,
    build_card_report_detail_display
)
from database.query_user import get_user_by_id, get_user_by_telegram_id
from database.query_card import get_card_by_id # <<< Import

# Import helpers v√† h√†m escape
from utils.helpers import send_or_edit_message, require_permission, get_chat_display_name, escape_md_v2
from utils.exceptions import (
    DatabaseError, UserNotFoundError, PermissionsError, ValidationError,
    CardNotFoundError, SetNotFoundError, DuplicateError
)

logger = logging.getLogger(__name__)

# --- Conversation Handler cho vi·ªác g·ª≠i b√°o c√°o ---
async def handle_callback_report_card(update, context):
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        logger.warning("handle_callback_report_card: Callback/data/user kh√¥ng h·ª£p l·ªá.")
        return ConversationHandler.END
    reporter_telegram_id = query.from_user.id
    log_prefix = f"[REPORT_START|UserTG:{reporter_telegram_id}]"
    try:
        await query.answer("Vui l√≤ng nh·∫≠p l√Ω do b√°o c√°o...")
    except BadRequest as e:
        if "query is too old" not in str(e).lower():
             logger.warning(f"{log_prefix} L·ªói answer callback: {e}")
    except Exception as e_ans:
        logger.warning(f"{log_prefix} L·ªói answer callback kh√°c: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) < 2: raise ValueError("Callback data thi·∫øu flashcard_id")
        flashcard_id_to_report = int(parts[1])
        logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu b√°o c√°o l·ªói cho Card ID: {flashcard_id_to_report}")
        context.user_data['report_flashcard_id'] = flashcard_id_to_report
        cancel_button = InlineKeyboardButton("üö´ H·ªßy b√°o c√°o", callback_data="report_cancel")
        cancel_keyboard = InlineKeyboardMarkup([[cancel_button]])
        # Escape c√°c k√Ω t·ª± tƒ©nh cho MarkdownV2
        request_text = (
            f"üìù Vui l√≤ng nh·∫≠p l√Ω do b·∫°n b√°o c√°o l·ªói cho th·∫ª ID `{flashcard_id_to_report}` "
            f"\\(v√≠ d·ª•: sai ch√≠nh t·∫£, sai nghƒ©a, ·∫£nh/audio l·ªói\\.\\.\\.\\)\\. \n\n" # Escape . ( )
            f"\\(Nh·∫•n H·ªßy ho·∫∑c g√µ /cancel ƒë·ªÉ h·ªßy\\)" # Escape ( )
        )
        await context.bot.send_message(
            chat_id=reporter_telegram_id,
            text=request_text,
            reply_markup=cancel_keyboard,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        if query.message:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                logger.debug(f"{log_prefix} ƒê√£ x√≥a tin nh·∫Øn m·∫∑t sau th·∫ª.")
            except Exception as e_del:
                 logger.warning(f"{log_prefix} L·ªói x√≥a tin nh·∫Øn m·∫∑t sau th·∫ª: {e_del}")
        return GETTING_REPORT_REASON
    except (ValueError, IndexError):
        logger.error(f"{log_prefix} Callback data l·ªói: {query.data}")
        await context.bot.send_message(reporter_telegram_id, "‚ùå L·ªói: D·ªØ li·ªáu th·∫ª kh√¥ng h·ª£p l·ªá ƒë·ªÉ b√°o c√°o.")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën khi b·∫Øt ƒë·∫ßu b√°o c√°o: {e}", exc_info=True)
        await context.bot.send_message(reporter_telegram_id, "‚ùå C√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu b√°o c√°o.")
        return ConversationHandler.END

async def _handle_state_get_report_reason(update, context):
    if not update or not update.message or not update.effective_user or not update.message.text:
        logger.warning("_handle_state_get_report_reason: update/message/user/text kh√¥ng h·ª£p l·ªá.")
        if update and update.message:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p n·ªôi dung b√°o c√°o b·∫±ng vƒÉn b·∫£n ho·∫∑c g√µ /cancel.")
        return GETTING_REPORT_REASON
    reporter_telegram_id = update.effective_user.id
    report_text = update.message.text
    log_prefix = f"[REPORT_PROCESS|UserTG:{reporter_telegram_id}]"
    logger.info(f"{log_prefix} Nh·∫≠n ƒë∆∞·ª£c n·ªôi dung b√°o c√°o.")
    flashcard_id = context.user_data.get('report_flashcard_id')
    if not flashcard_id:
        logger.error(f"{log_prefix} Thi·∫øu report_flashcard_id trong user_data.")
        await update.message.reply_text("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin th·∫ª c·∫ßn b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.")
        return ConversationHandler.END
    logger.debug(f"{log_prefix} B√°o c√°o cho Card ID: {flashcard_id}. N·ªôi dung: '{report_text[:50]}...'")
    processing_msg = await update.message.reply_text("‚è≥ ƒêang g·ª≠i b√°o c√°o c·ªßa b·∫°n...")
    submit_result = None
    reporter_user_id = None
    try:
        reporter_info = get_user_by_telegram_id(reporter_telegram_id)
        if not reporter_info or 'user_id' not in reporter_info:
            raise UserNotFoundError(identifier=reporter_telegram_id)
        reporter_user_id = reporter_info['user_id']
        submit_result = await submit_card_report(flashcard_id, reporter_user_id, report_text)
        if not submit_result or not isinstance(submit_result, dict):
             logger.error(f"{log_prefix} Service submit_card_report tr·∫£ v·ªÅ k·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói.")
             raise Exception("L·ªói x·ª≠ l√Ω b√°o c√°o t·ª´ service.")
    except (CardNotFoundError, SetNotFoundError, ValidationError, DuplicateError, DatabaseError, UserNotFoundError) as e_submit:
        logger.error(f"{log_prefix} L·ªói ƒë√£ bi·∫øt khi submit report: {e_submit}")
        await send_or_edit_message(context, update.message.chat_id, f"‚ùå L·ªói khi x·ª≠ l√Ω b√°o c√°o: {e_submit}", message_to_edit=processing_msg)
        context.user_data.pop('report_flashcard_id', None)
        return ConversationHandler.END
    except Exception as e_service:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën khi g·ªçi service ho·∫∑c x·ª≠ l√Ω k·∫øt qu·∫£: {e_service}", exc_info=True)
        await send_or_edit_message(context, update.message.chat_id, "‚ùå L·ªói h·ªá th·ªëng khi g·ª≠i b√°o c√°o.", message_to_edit=processing_msg)
        context.user_data.pop('report_flashcard_id', None)
        return ConversationHandler.END
    creator_user_id = submit_result.get('creator_user_id')
    card_info = submit_result.get('card_info', {})
    report_id = submit_result.get('report_id')
    if creator_user_id and creator_user_id != reporter_user_id:
        try:
            creator_info = get_user_by_id(creator_user_id)
            if creator_info and creator_info.get('telegram_id'):
                creator_telegram_id = creator_info.get('telegram_id')
                reporter_name = await get_chat_display_name(context.bot, reporter_telegram_id)
                # S·ª≠ d·ª•ng h√†m escape_md_v2 ƒë√£ import
                escaped_reporter = escape_md_v2(reporter_name)
                escaped_report_text = escape_md_v2(report_text)
                card_front_raw = card_info.get('front', 'N/A')
                card_back_raw = card_info.get('back', 'N/A')
                escaped_card_front = escape_md_v2(card_front_raw)
                escaped_card_back = escape_md_v2(card_back_raw)
                # Escape k√Ω t·ª± tƒ©nh
                notify_text = (
                    f"üîî C√≥ b√°o c√°o l·ªói m·ªõi cho th·∫ª ID `{flashcard_id}` trong b·ªô c·ªßa b·∫°n\\.\n\n"
                    f"üìù *Ng∆∞·ªùi b√°o c√°o:* {escaped_reporter} \\(ID: `{reporter_telegram_id}`\\)\n"
                    f"üóíÔ∏è *N·ªôi dung b√°o c√°o:*\n{escaped_report_text}\n\n"
                    f"üîñ *Th√¥ng tin th·∫ª:*\n"
                    f"   \\- M·∫∑t tr∆∞·ªõc: {escaped_card_front}\n"
                    f"   \\- M·∫∑t sau: {escaped_card_back}\n\n"
                    f"üëâ B·∫°n c√≥ th·ªÉ xem v√† x·ª≠ l√Ω b√°o c√°o n√†y trong menu 'Qu·∫£n l√Ω b·ªô th·∫ª' \\-\\> 'Xem B√°o c√°o L·ªói'\\." # Escape -> .
                )
                asyncio.create_task(
                    context.bot.send_message(
                        chat_id=creator_telegram_id,
                        text=notify_text,
                        parse_mode=ParseMode.MARKDOWN_V2
                    )
                )
                logger.info(f"{log_prefix} ƒê√£ l√™n l·ªãch g·ª≠i th√¥ng b√°o l·ªói t·ªõi creator UID {creator_user_id} (TGID: {creator_telegram_id}).")
            else:
                logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y telegram_id cho creator UID {creator_user_id}. Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o.")
        except Exception as e_notify:
            logger.error(f"{log_prefix} L·ªói khi g·ª≠i th√¥ng b√°o cho creator: {e_notify}", exc_info=True)
    confirm_text = "‚úÖ ƒê√£ g·ª≠i b√°o c√°o l·ªói c·ªßa b·∫°n th√†nh c√¥ng\\!" # Escape !
    review_mode = context.user_data.get('review_mode', DEFAULT_LEARNING_MODE)
    continue_callback = "review_all" if review_mode == MODE_REVIEW_ALL_DUE else "continue"
    continue_button = InlineKeyboardButton("‚ñ∂Ô∏è Ti·∫øp t·ª•c h·ªçc", callback_data=continue_callback)
    confirm_keyboard = InlineKeyboardMarkup([[continue_button]])
    await send_or_edit_message(context, update.message.chat_id, confirm_text, reply_markup=confirm_keyboard, message_to_edit=processing_msg, parse_mode=ParseMode.MARKDOWN_V2)
    context.user_data.pop('report_flashcard_id', None)
    logger.debug(f"{log_prefix} K·∫øt th√∫c conversation b√°o c√°o.")
    return ConversationHandler.END

async def _handle_cancel_report(update, context):
    if not update: return ConversationHandler.END
    user_id_tg = -1; chat_id_cancel = -1; message_to_edit_cancel = None
    if update.callback_query and update.callback_query.from_user:
        query = update.callback_query; user_id_tg = query.from_user.id; chat_id_cancel = query.message.chat_id if query.message else user_id_tg; message_to_edit_cancel = query.message
        try: await query.answer()
        except Exception: pass
    elif update.message and update.effective_user: user_id_tg = update.effective_user.id; chat_id_cancel = update.message.chat_id
    else: logger.warning("_handle_cancel_report: update kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu user."); return ConversationHandler.END
    log_prefix = f"[REPORT_CANCEL|UserTG:{user_id_tg}]"; logger.info(f"{log_prefix} H·ªßy b√°o c√°o l·ªói.")
    context.user_data.pop("report_flashcard_id", None); logger.debug(f"{log_prefix} ƒê√£ x√≥a report_flashcard_id kh·ªèi user_data.")
    review_mode = context.user_data.get('review_mode', DEFAULT_LEARNING_MODE)
    continue_callback = "review_all" if review_mode == MODE_REVIEW_ALL_DUE else "continue"
    continue_button = InlineKeyboardButton("‚ñ∂Ô∏è Ti·∫øp t·ª•c h·ªçc", callback_data=continue_callback); continue_keyboard = InlineKeyboardMarkup([[continue_button]])
    cancel_message_text = "ƒê√£ h·ªßy thao t√°c b√°o c√°o l·ªói."
    try:
        await send_or_edit_message(context=context, chat_id=chat_id_cancel, text=cancel_message_text, message_to_edit=message_to_edit_cancel, reply_markup=continue_keyboard)
        logger.debug(f"{log_prefix} ƒê√£ g·ª≠i/s·ª≠a x√°c nh·∫≠n h·ªßy.")
    except Exception as e_send_final: logger.error(f"{log_prefix} L·ªói g·ª≠i tin nh·∫Øn h·ªßy cu·ªëi c√πng: {e_send_final}")
    return ConversationHandler.END

report_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(handle_callback_report_card, pattern=r"^report_card:")
    ],
    states={
        GETTING_REPORT_REASON: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, _handle_state_get_report_reason)
        ],
    },
    fallbacks=[
        CommandHandler("cancel", _handle_cancel_report),
        CallbackQueryHandler(_handle_cancel_report, pattern='^report_cancel$')
    ],
    name="report_card_conversation",
    persistent=False,
    per_message=False
)
# --- K·∫øt th√∫c Conversation Handler ---


# --- Handlers cho vi·ªác xem v√† x·ª≠ l√Ω b√°o c√°o (cho Creator) ---

@require_permission(CAN_MANAGE_OWN_SETS)
async def handle_callback_view_reports_menu(update, context):
    """Handler cho callback 'view_reports_menu'."""
    query = update.callback_query
    if not query or not query.from_user: return
    creator_telegram_id = query.from_user.id
    log_prefix = f"[REPORT_VIEW_MENU|CreatorTG:{creator_telegram_id}]"
    logger.info(f"{log_prefix} Y√™u c·∫ßu xem menu b√°o c√°o l·ªói.")
    chat_id = query.message.chat_id if query.message else creator_telegram_id
    message_to_edit = query.message
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        creator_info = get_user_by_telegram_id(creator_telegram_id)
        if not creator_info or 'user_id' not in creator_info:
            raise UserNotFoundError(identifier=creator_telegram_id)
        creator_user_id = creator_info['user_id']
        reportable_sets = await get_reportable_sets_summary(creator_user_id)
        text, reply_markup = build_sets_with_reports_keyboard(reportable_sets)
        parse_mode = ParseMode.MARKDOWN if reply_markup else None
        await send_or_edit_message(context, chat_id, text, reply_markup, message_to_edit=message_to_edit, parse_mode=parse_mode)
    except (UserNotFoundError, DatabaseError) as e_db:
        logger.error(f"{log_prefix} L·ªói DB/User khi l·∫•y b√°o c√°o: {e_db}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i danh s√°ch b√°o c√°o.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

# --- ƒê√É S·ª¨A: Hi·ªÉn th·ªã danh s√°ch ID th·∫ª c√≥ l·ªói (ph√¢n trang) ---
@require_permission(CAN_MANAGE_OWN_SETS)
async def handle_callback_select_set_for_reports(update, context):
    """
    Handler cho callback 'view_set_reports:<set_id>'.
    Hi·ªÉn th·ªã danh s√°ch (ph√¢n trang) c√°c ID th·∫ª c√≥ l·ªói trong b·ªô ƒë∆∞·ª£c ch·ªçn.
    """
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    creator_telegram_id = query.from_user.id
    log_prefix = f"[REPORT_SELECT_SET|CreatorTG:{creator_telegram_id}]"
    chat_id = query.message.chat_id if query.message else creator_telegram_id
    message_to_edit = query.message
    set_id = None
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) < 2: raise ValueError("Callback data thi·∫øu set_id")
        set_id = int(parts[1])
        logger.info(f"{log_prefix} Ch·ªçn xem b√°o c√°o cho Set ID: {set_id}")
        creator_info = get_user_by_telegram_id(creator_telegram_id)
        if not creator_info or 'user_id' not in creator_info:
             raise UserNotFoundError(identifier=creator_telegram_id)
        creator_user_id = creator_info['user_id']
        card_summary = await get_report_summary_by_card_in_set(set_id, creator_user_id)
        # Hi·ªÉn th·ªã trang 1 ƒë·∫ßu ti√™n
        text, reply_markup = build_reported_card_selection_keyboard(set_id, card_summary, current_page=1)
        await send_or_edit_message(context, chat_id, text, reply_markup, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)
    except (ValueError, IndexError): logger.error(f"{log_prefix} Callback data l·ªói: {query.data}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback.", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError) as e_db: logger.error(f"{log_prefix} L·ªói DB/User: {e_db}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i danh s√°ch th·∫ª l·ªói.", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

# --- HANDLER M·ªöI: X·ª≠ l√Ω ph√¢n trang danh s√°ch ID th·∫ª l·ªói ---
@require_permission(CAN_MANAGE_OWN_SETS)
async def handle_callback_report_card_page(update, context):
    """
    Handler cho callback 'report_card_page:<set_id>:<prev|next>:<current_page>'.
    X·ª≠ l√Ω vi·ªác chuy·ªÉn trang trong danh s√°ch ID th·∫ª c√≥ l·ªói.
    """
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    creator_telegram_id = query.from_user.id
    log_prefix = f"[REPORT_CARD_PAGE|CreatorTG:{creator_telegram_id}]"
    chat_id = query.message.chat_id if query.message else creator_telegram_id
    message_to_edit = query.message
    set_id = None
    action = None
    current_page = 1
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) != 4: raise ValueError("Callback data ph√¢n trang sai ƒë·ªãnh d·∫°ng")
        set_id = int(parts[1])
        action = parts[2]
        current_page = int(parts[3])
        logger.info(f"{log_prefix} Ph√¢n trang cho Set ID: {set_id}, Action: {action}, Trang hi·ªán t·∫°i: {current_page}")

        new_page = current_page
        if action == "next": new_page += 1
        elif action == "prev": new_page = max(1, current_page - 1)
        else: raise ValueError("H√†nh ƒë·ªông ph√¢n trang kh√¥ng h·ª£p l·ªá")

        creator_info = get_user_by_telegram_id(creator_telegram_id)
        if not creator_info or 'user_id' not in creator_info:
             raise UserNotFoundError(identifier=creator_telegram_id)
        creator_user_id = creator_info['user_id']

        card_summary = await get_report_summary_by_card_in_set(set_id, creator_user_id)
        text, reply_markup = build_reported_card_selection_keyboard(set_id, card_summary, current_page=new_page)
        await send_or_edit_message(context, chat_id, text, reply_markup, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)

    except (ValueError, IndexError, TypeError): logger.error(f"{log_prefix} Callback data l·ªói: {query.data}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback ph√¢n trang.", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError) as e_db: logger.error(f"{log_prefix} L·ªói DB/User: {e_db}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i danh s√°ch th·∫ª l·ªói.", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra khi chuy·ªÉn trang.", message_to_edit=message_to_edit)

# --- HANDLER M·ªöI: Xem chi ti·∫øt th·∫ª v√† b√°o c√°o ---
@require_permission(CAN_MANAGE_OWN_SETS)
async def handle_callback_view_card_reports(update, context):
    """Handler cho callback 'view_card_reports:<flashcard_id>'."""
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    creator_telegram_id = query.from_user.id
    log_prefix = f"[REPORT_VIEW_CARD|CreatorTG:{creator_telegram_id}]"
    chat_id = query.message.chat_id if query.message else creator_telegram_id
    message_to_edit = query.message
    flashcard_id = None
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")

    try:
        parts = query.data.split(":")
        if len(parts) < 2: raise ValueError("Callback data thi·∫øu flashcard_id")
        flashcard_id = int(parts[1])
        logger.info(f"{log_prefix} Ch·ªçn xem b√°o c√°o cho Card ID: {flashcard_id}")

        creator_info = get_user_by_telegram_id(creator_telegram_id)
        if not creator_info or 'user_id' not in creator_info:
             raise UserNotFoundError(identifier=creator_telegram_id)
        creator_user_id = creator_info['user_id']

        # 1. L·∫•y th√¥ng tin th·∫ª
        card_info = get_card_by_id(flashcard_id)
        if not card_info: raise CardNotFoundError(card_id=flashcard_id)

        # 2. L·∫•y chi ti·∫øt c√°c b√°o c√°o
        pending_reports = await get_pending_reports_for_card(flashcard_id, creator_user_id)

        # 3. G·ªçi h√†m UI async
        text, reply_markup = await build_card_report_detail_display(card_info, pending_reports, context)

        # 4. G·ª≠i/s·ª≠a tin nh·∫Øn
        await send_or_edit_message(context, chat_id, text, reply_markup, message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)

    except (ValueError, IndexError): logger.error(f"{log_prefix} Callback data l·ªói: {query.data}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback.", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError, CardNotFoundError) as e_db: logger.error(f"{log_prefix} L·ªói DB/User/CardNotFound: {e_db}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i th√¥ng tin th·∫ª ho·∫∑c b√°o c√°o.", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

# --- ƒê√É S·ª¨A: X·ª≠ l√Ω resolve cho c·∫£ th·∫ª ---
@require_permission(CAN_MANAGE_OWN_SETS)
async def handle_callback_resolve_report(update, context):
    """
    Handler cho callback 'resolve_card_reports:<flashcard_id>'.
    ƒê√°nh d·∫•u t·∫•t c·∫£ b√°o c√°o cho th·∫ª n√†y l√† ƒë√£ gi·∫£i quy·∫øt.
    """
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    resolver_telegram_id = query.from_user.id
    log_prefix = f"[REPORT_RESOLVE_CARD|ResolverTG:{resolver_telegram_id}]"
    chat_id = query.message.chat_id if query.message else resolver_telegram_id
    message_to_edit = query.message
    flashcard_id = None
    set_id = None

    try: await query.answer("ƒêang ƒë√°nh d·∫•u ƒë√£ x·ª≠ l√Ω...")
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")

    try:
        parts = query.data.split(":")
        if len(parts) != 2 or parts[0] != "resolve_card_reports": # Pattern m·ªõi
             raise ValueError("Callback data resolve_card_reports sai ƒë·ªãnh d·∫°ng")
        flashcard_id = int(parts[1])
        logger.info(f"{log_prefix} Y√™u c·∫ßu ƒë√°nh d·∫•u t·∫•t c·∫£ b√°o c√°o cho card ID {flashcard_id} l√† ƒë√£ gi·∫£i quy·∫øt.")

        try:
            card_info_temp = get_card_by_id(flashcard_id)
            if card_info_temp: set_id = card_info_temp.get('set_id')
        except Exception as e_get_set: logger.warning(f"{log_prefix} Kh√¥ng l·∫•y ƒë∆∞·ª£c set_id t·ª´ card_id {flashcard_id}: {e_get_set}")

        resolver_info = get_user_by_telegram_id(resolver_telegram_id)
        if not resolver_info or 'user_id' not in resolver_info:
            raise UserNotFoundError(identifier=resolver_telegram_id)
        resolver_user_id = resolver_info['user_id']

        # G·ªçi service m·ªõi
        resolve_result = await resolve_all_reports_for_card(flashcard_id, resolver_user_id)

        if resolve_result and isinstance(resolve_result, dict):
            updated_count = resolve_result.get('updated_count', 0)
            reporters_to_notify = resolve_result.get('reporters_to_notify', [])

            # G·ª≠i tin nh·∫Øn m·ªõi x√°c nh·∫≠n
            await context.bot.send_message(
                chat_id=chat_id,
                # S·ª≠a escape sequence
                text=f"‚úÖ ƒê√£ ƒë√°nh d·∫•u {updated_count} b√°o c√°o cho th·∫ª ID `{flashcard_id}` l√† ƒë√£ gi·∫£i quy·∫øt\\.",
                parse_mode=ParseMode.MARKDOWN_V2
            )

            # Th√¥ng b√°o cho ng∆∞·ªùi b√°o c√°o
            if reporters_to_notify:
                # S·ª≠a escape sequence
                notify_text_base = f"üéâ Tin vui\\! B√°o c√°o l·ªói c·ªßa b·∫°n cho th·∫ª ID `{flashcard_id}` ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi t·∫°o b·ªô th·∫ª xem x√©t v√† x·ª≠ l√Ω\\."
                send_tasks = []
                for reporter_tg_id in reporters_to_notify:
                    send_tasks.append(
                        context.bot.send_message(chat_id=reporter_tg_id, text=notify_text_base, parse_mode=ParseMode.MARKDOWN_V2)
                    )
                results = await asyncio.gather(*send_tasks, return_exceptions=True)
                success_notify = sum(1 for res in results if not isinstance(res, Exception))
                fail_notify = len(results) - success_notify
                logger.info(f"{log_prefix} K·∫øt qu·∫£ g·ª≠i th√¥ng b√°o gi·∫£i quy·∫øt: {success_notify} th√†nh c√¥ng, {fail_notify} th·∫•t b·∫°i.")

            # Hi·ªÉn th·ªã n√∫t quay l·∫°i danh s√°ch th·∫ª l·ªói c·ªßa b·ªô
            kb_back = []
            if set_id:
                 # Quay l·∫°i trang 1 c·ªßa danh s√°ch th·∫ª l·ªói
                 kb_back = [[InlineKeyboardButton("üìä Xem c√°c th·∫ª l·ªói kh√°c", callback_data=f"view_set_reports:{set_id}")]]
            else:
                 kb_back = [[InlineKeyboardButton("üìä Xem c√°c b·ªô c√≥ l·ªói kh√°c", callback_data="view_reports_menu")]]

            # G·ª≠i th√™m tin nh·∫Øn v·ªõi n√∫t quay l·∫°i (S·ª≠a escape .)
            await context.bot.send_message(chat_id, "Ho√†n th√†nh x·ª≠ l√Ω\\.", reply_markup=InlineKeyboardMarkup(kb_back), parse_mode=ParseMode.MARKDOWN_V2)

            # X√≥a tin nh·∫Øn chi ti·∫øt th·∫ª v√† l·ªói c≈©
            if message_to_edit:
                try: await context.bot.delete_message(chat_id=message_to_edit.chat_id, message_id=message_to_edit.message_id)
                except Exception: pass

        else:
            # Service tr·∫£ v·ªÅ l·ªói ho·∫∑c kh√¥ng th√†nh c√¥ng (S·ª≠a escape ())
            await send_or_edit_message(context, chat_id, f"‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i cho c√°c b√°o c√°o c·ªßa th·∫ª ID `{flashcard_id}` \\(c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng c√≥ b√°o c√°o n√†o\\)\\.", message_to_edit=message_to_edit, parse_mode=ParseMode.MARKDOWN_V2)

    except (ValueError, IndexError): logger.error(f"{log_prefix} Callback data l·ªói: {query.data}"); await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback.", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError, ValidationError) as e: logger.error(f"{log_prefix} L·ªói DB/User/Validation: {e}"); await send_or_edit_message(context, chat_id, f"‚ùå L·ªói khi x·ª≠ l√Ω b√°o c√°o: {e}", message_to_edit=message_to_edit)
    except Exception as e: logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True); await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)


# --- C·∫≠p nh·∫≠t ƒêƒÉng k√Ω Handlers ---
def register_handlers(app):
    """ƒêƒÉng k√Ω c√°c handler li√™n quan ƒë·∫øn b√°o c√°o l·ªói th·∫ª."""
    logger.info("--- MODULE: ƒêƒÉng k√Ω handlers cho Reporting ---")
    app.add_handler(report_conv_handler)

    # 1. Xem danh s√°ch c√°c b·ªô c√≥ l·ªói
    app.add_handler(CallbackQueryHandler(handle_callback_view_reports_menu, pattern=r"^view_reports_menu$"))
    # 2. Ch·ªçn b·ªô -> Hi·ªÉn th·ªã danh s√°ch ID th·∫ª l·ªói (trang 1)
    app.add_handler(CallbackQueryHandler(handle_callback_select_set_for_reports, pattern=r"^view_set_reports:"))
    # 2a. X·ª≠ l√Ω ph√¢n trang cho danh s√°ch ID th·∫ª l·ªói
    app.add_handler(CallbackQueryHandler(handle_callback_report_card_page, pattern=r"^report_card_page:")) # Handler m·ªõi
    # 3. Ch·ªçn ID th·∫ª -> Hi·ªÉn th·ªã chi ti·∫øt th·∫ª v√† c√°c b√°o c√°o li√™n quan
    app.add_handler(CallbackQueryHandler(handle_callback_view_card_reports, pattern=r"^view_card_reports:")) # Handler m·ªõi
    # 4. Nh·∫•n "ƒê√£ s·ª≠a xong" -> X·ª≠ l√Ω t·∫•t c·∫£ b√°o c√°o cho th·∫ª ƒë√≥
    app.add_handler(CallbackQueryHandler(handle_callback_resolve_report, pattern=r"^resolve_card_reports:")) # Pattern m·ªõi

    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module Reporting (ƒë√£ c·∫≠p nh·∫≠t lu·ªìng xem theo th·∫ª + ph√¢n trang).")