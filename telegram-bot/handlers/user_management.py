# Path: flashcard_v2/handlers/user_management.py
"""
Module ch·ª©a c√°c handlers cho ch·ª©c nƒÉng qu·∫£n l√Ω ng∆∞·ªùi d√πng trong ph·∫ßn admin.
Bao g·ªìm xem danh s√°ch, xem chi ti·∫øt, thay ƒë·ªïi vai tr√≤, thay ƒë·ªïi gi·ªõi h·∫°n.
ƒê√£ s·ª≠a logic ƒë·∫∑t gi·ªõi h·∫°n v·ªÅ 0 khi ban user.
"""
import logging
import asyncio

# Import t·ª´ th∆∞ vi·ªán telegram
from telegram import Update
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import Application
from telegram.ext import ContextTypes
from telegram.ext import ConversationHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext import MessageHandler
from telegram.ext import CommandHandler
from telegram.ext import filters

# Import t·ª´ c√°c module kh√°c (tuy·ªát ƒë·ªëi)
from config import SET_DAILY_LIMIT # State ConversationHandler
from config import CAN_MANAGE_USERS
from config import CAN_SET_ROLES
from config import CAN_SET_LIMITS
from config import DAILY_LIMIT_USER
from config import DAILY_LIMIT_LITE
from config import DAILY_LIMIT_VIP
# ROLE_PERMISSIONS kh√¥ng c·∫ßn import tr·ª±c ti·∫øp ·ªü ƒë√¢y v√¨ ƒë√£ d√πng trong decorator
from database.query_user import get_user_by_telegram_id
from database.query_user import get_all_users
from database.query_user import update_user_role
from database.query_user import update_user_daily_limit
from ui.admin_ui import build_user_management_keyboard
from ui.admin_ui import build_user_info_display
from ui.admin_ui import build_set_role_keyboard
from utils.helpers import get_chat_display_name
from utils.helpers import send_or_edit_message
from utils.helpers import require_permission # Decorator ki·ªÉm tra quy·ªÅn
from utils.exceptions import DatabaseError
from utils.exceptions import UserNotFoundError
from utils.exceptions import ValidationError
from utils.exceptions import DuplicateError

# Kh·ªüi t·∫°o logger
logger = logging.getLogger(__name__)

@require_permission(CAN_MANAGE_USERS)
async def handle_callback_manage_users(update, context):
    """
    Handler cho callback 'manage_users'.
    Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng ƒë·ªÉ admin ch·ªçn.
    """
    query = update.callback_query
    if not query or not query.from_user:
        logger.warning("handle_callback_manage_users: Callback/User kh√¥ng h·ª£p l·ªá.")
        return # Tho√°t n·∫øu callback ho·∫∑c user kh√¥ng h·ª£p l·ªá

    # Tr·∫£ l·ªùi callback
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning("L·ªói answer callback manage users: {}".format(e_ans))

    admin_user_id = query.from_user.id
    log_prefix = "[USER_MGMT_LIST|Admin:{}]".format(admin_user_id)
    logger.info("{} Y√™u c·∫ßu qu·∫£n l√Ω TV.".format(log_prefix))
    chat_id = admin_user_id # Ph·∫£n h·ªìi l·∫°i cho admin
    message_to_edit = query.message # Tin nh·∫Øn g·ªëc ƒë·ªÉ s·ª≠a

    try:
        # L·∫•y danh s√°ch t·∫•t c·∫£ user t·ª´ DB
        users = get_all_users()

        # N·∫øu kh√¥ng c√≥ user n√†o
        if not users:
            logger.warning("{} Kh√¥ng c√≥ user.".format(log_prefix))
            kb_back = [[InlineKeyboardButton("üîô Quay l·∫°i Menu Admin", callback_data="flashcard_admin")]]
            reply_markup = InlineKeyboardMarkup(kb_back)
            await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text="Kh√¥ng c√≥ th√†nh vi√™n n√†o trong h·ªá th·ªëng.",
                reply_markup=reply_markup,
                message_to_edit=message_to_edit
            )
            return # K·∫øt th√∫c h√†m

        logger.debug("{} T√¨m th·∫•y {} user.".format(log_prefix, len(users)))

        # L·∫•y bot instance ƒë·ªÉ l·∫•y t√™n hi·ªÉn th·ªã
        bot_instance = None
        if hasattr(context, 'bot'):
            bot_instance = context.bot
        elif context.application and hasattr(context.application, 'bot'):
            bot_instance = context.application.bot

        if not bot_instance:
            logger.error("{} Kh√¥ng th·ªÉ l·∫•y bot instance.".format(log_prefix))
            await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói kh·ªüi t·∫°o bot.", message_to_edit=message_to_edit)
            return

        # T·∫°o b√†n ph√≠m danh s√°ch user (h√†m n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ c√≥ icon)
        reply_markup = await build_user_management_keyboard(users, bot_instance)

        # G·ª≠i ho·∫∑c s·ª≠a tin nh·∫Øn v·ªõi danh s√°ch user
        if reply_markup:
            sent_msg = await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text="Ch·ªçn th√†nh vi√™n ƒë·ªÉ xem/qu·∫£n l√Ω:",
                reply_markup=reply_markup,
                message_to_edit=message_to_edit
            )
            if not sent_msg:
                 logger.error("{} L·ªói g·ª≠i danh s√°ch TV.".format(log_prefix))
        else:
            # L·ªói n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c b√†n ph√≠m
            logger.error("{} L·ªói t·∫°o keyboard danh s√°ch user.".format(log_prefix))
            await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói hi·ªÉn th·ªã danh s√°ch th√†nh vi√™n.", message_to_edit=message_to_edit)

    except DatabaseError as e:
        logger.error("{} L·ªói DB khi l·∫•y danh s√°ch user: {}".format(log_prefix, e))
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói t·∫£i danh s√°ch th√†nh vi√™n.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error("{} L·ªói kh√¥ng mong mu·ªën khi qu·∫£n l√Ω user: {}".format(log_prefix, e), exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

@require_permission(CAN_MANAGE_USERS)
async def handle_callback_show_user_info(update, context):
    """
    Handler cho callback 'user_info:<target_telegram_id>'.
    Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn.
    """
    query = update.callback_query
    # Ki·ªÉm tra callback h·ª£p l·ªá
    if not query or not query.from_user or not query.data:
        logger.warning("handle_callback_show_user_info: Callback/User/Data kh√¥ng h·ª£p l·ªá.")
        return

    # Tr·∫£ l·ªùi callback
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning("L·ªói answer callback show user info: {}".format(e_ans))

    admin_user_id = query.from_user.id
    log_prefix = "[USER_MGMT_INFO|Admin:{}]".format(admin_user_id)
    target_telegram_id = None
    chat_id = admin_user_id # Ph·∫£n h·ªìi cho admin
    message_to_edit = query.message

    try:
        # Parse target_telegram_id t·ª´ callback data
        parts = query.data.split(":")
        if len(parts) < 2:
            raise ValueError("Callback data kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng")
        target_telegram_id_str = parts[1]
        target_telegram_id = int(target_telegram_id_str)
        logger.info("{} Xem info user TG ID: {}.".format(log_prefix, target_telegram_id))

        # L·∫•y th√¥ng tin user t·ª´ DB
        target_user_info = get_user_by_telegram_id(target_telegram_id)

        # L·∫•y t√™n hi·ªÉn th·ªã
        bot_instance_info = context.bot if hasattr(context, 'bot') else (context.application.bot if context.application and hasattr(context.application, 'bot') else None)
        username = str(target_telegram_id) # M·∫∑c ƒë·ªãnh l√† ID n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n
        if bot_instance_info:
            try:
                # G·ªçi h√†m helper ƒë·ªÉ l·∫•y t√™n
                username = await get_chat_display_name(bot_instance_info, target_telegram_id)
            except Exception as e_get_name:
                 logger.warning("{} L·ªói l·∫•y t√™n hi·ªÉn th·ªã cho {}: {}".format(log_prefix, target_telegram_id, e_get_name))
        else:
            logger.warning("{} Kh√¥ng c√≥ bot instance ƒë·ªÉ l·∫•y username.".format(log_prefix))

        logger.debug("{} L·∫•y info OK.".format(log_prefix))

        # T·∫°o n·ªôi dung v√† b√†n ph√≠m hi·ªÉn th·ªã th√¥ng tin
        text, reply_markup = build_user_info_display(target_user_info, username)

        # G·ª≠i ho·∫∑c s·ª≠a tin nh·∫Øn
        if text and reply_markup:
            sent_msg = await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown', # D√πng Markdown v√¨ c√≥ ƒë·ªãnh d·∫°ng ** v√† `
                message_to_edit=message_to_edit
            )
            if not sent_msg:
                 logger.error("{} L·ªói hi·ªÉn th·ªã th√¥ng tin user.".format(log_prefix))
        else:
            # L·ªói n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c UI
            logger.error("{} L·ªói t·∫°o UI th√¥ng tin user.".format(log_prefix))
            await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói hi·ªÉn th·ªã th√¥ng tin.", message_to_edit=message_to_edit)

    except (ValueError, IndexError):
        logger.error("{} Callback data l·ªói: {}".format(log_prefix, query.data))
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói: D·ªØ li·ªáu ID kh√¥ng h·ª£p l·ªá.", message_to_edit=message_to_edit)
    except UserNotFoundError:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p user kh√¥ng t·ªìn t·∫°i trong DB
        logger.warning("{} Kh√¥ng t√¨m th·∫•y user TG ID {}.".format(log_prefix, target_telegram_id))
        kb_back = [[InlineKeyboardButton("üîô Quay l·∫°i Danh s√°ch", callback_data="manage_users")]]
        reply_markup = InlineKeyboardMarkup(kb_back)
        await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n ID {}.".format(target_telegram_id),
            reply_markup=reply_markup,
            message_to_edit=message_to_edit
        )
    except DatabaseError as e:
        logger.error("{} L·ªói DB l·∫•y info user {}: {}".format(log_prefix, target_telegram_id, e))
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói t·∫£i th√¥ng tin TV ID {}.".format(target_telegram_id), message_to_edit=message_to_edit)
    except Exception as e:
        logger.error("{} L·ªói kh√°c khi xem info user: {}".format(log_prefix, e), exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

@require_permission(CAN_SET_ROLES)
async def update_user_role_callback(update, context):
    """
    Handler cho callback 'set_role:<target_telegram_id>'.
    Hi·ªÉn th·ªã c√°c n√∫t ch·ªçn vai tr√≤ m·ªõi cho ng∆∞·ªùi d√πng.
    """
    query = update.callback_query
    # Ki·ªÉm tra callback h·ª£p l·ªá
    if not query or not query.from_user or not query.data:
        logger.warning("update_user_role_callback: Callback/User/Data kh√¥ng h·ª£p l·ªá.")
        return

    # Tr·∫£ l·ªùi callback
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning("L·ªói answer callback set role: {}".format(e_ans))

    admin_user_id = query.from_user.id
    log_prefix = "[USER_MGMT_SET_ROLE|Admin:{}]".format(admin_user_id)
    chat_id = admin_user_id # Ph·∫£n h·ªìi cho admin
    message_to_edit = query.message

    try:
        # Parse target_telegram_id
        parts = query.data.split(":")
        if len(parts) < 2:
            raise ValueError("Callback data kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng")
        target_telegram_id_str = parts[1]
        target_telegram_id = int(target_telegram_id_str)
        logger.info("{} Y√™u c·∫ßu ƒë·ªïi role user TG ID: {}.".format(log_prefix, target_telegram_id))

        # T·∫°o b√†n ph√≠m ch·ªçn vai tr√≤ (h√†m n√†y ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ t·ª± l·∫•y roles)
        reply_markup = build_set_role_keyboard(target_telegram_id)

        # G·ª≠i ho·∫∑c s·ª≠a tin nh·∫Øn
        if reply_markup:
            sent_msg = await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text="Ch·ªçn vai tr√≤ m·ªõi cho ng∆∞·ªùi d√πng:",
                reply_markup=reply_markup,
                message_to_edit=message_to_edit
            )
            if not sent_msg:
                 logger.error("{} L·ªói g·ª≠i menu ch·ªçn role.".format(log_prefix))
        else:
            # L·ªói n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c b√†n ph√≠m
            logger.error("{} L·ªói t·∫°o keyboard ch·ªçn role.".format(log_prefix))
            await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói hi·ªÉn th·ªã l·ª±a ch·ªçn vai tr√≤.", message_to_edit=message_to_edit)

    except (ValueError, IndexError):
        logger.error("{} Callback data l·ªói: {}".format(log_prefix, query.data))
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói: D·ªØ li·ªáu ID kh√¥ng h·ª£p l·ªá.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error("{} L·ªói kh√°c khi hi·ªÉn th·ªã menu ch·ªçn role: {}".format(log_prefix, e), exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)

@require_permission(CAN_SET_ROLES)
async def update_user_role_confirm_callback(update, context):
    """
    Handler cho callback 'set_role_confirm:<target_telegram_id>:<new_role>'.
    X√°c nh·∫≠n v√† th·ª±c hi·ªán thay ƒë·ªïi vai tr√≤, c·∫≠p nh·∫≠t gi·ªõi h·∫°n th·∫ª m·ªõi t∆∞∆°ng ·ª©ng.
    ƒê√£ s·ª≠a ƒë·ªÉ ƒë·∫∑t gi·ªõi h·∫°n = 0 khi vai tr√≤ l√† 'banned'.
    """
    query = update.callback_query
    # Ki·ªÉm tra callback h·ª£p l·ªá
    if not query or not query.from_user or not query.data:
        logger.warning("update_user_role_confirm_callback: Callback/User/Data kh√¥ng h·ª£p l·ªá.")
        return

    # Tr·∫£ l·ªùi callback
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning("L·ªói answer callback confirm role: {}".format(e_ans))

    admin_user_id = query.from_user.id
    log_prefix = "[USER_MGMT_CONFIRM_ROLE|Admin:{}]".format(admin_user_id)
    chat_id = admin_user_id # Ph·∫£n h·ªìi cho admin
    message_to_edit = query.message
    target_telegram_id = None
    new_role = None
    old_role = None # L∆∞u vai tr√≤ c≈© ƒë·ªÉ g·ª≠i th√¥ng b√°o n·∫øu thay ƒë·ªïi
    message = "L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t vai tr√≤." # Tin nh·∫Øn ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
    reply_markup = None # B√†n ph√≠m quay l·∫°i (n·∫øu c√≥)
    role_update_success = False # C·ªù ƒë√°nh d·∫•u c·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng

    try:
        # Parse d·ªØ li·ªáu t·ª´ callback
        parts = query.data.split(":")
        if len(parts) != 3:
            raise ValueError("Callback data kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng (c·∫ßn 3 ph·∫ßn)")
        target_telegram_id_str = parts[1]
        target_telegram_id = int(target_telegram_id_str)
        new_role = parts[2] # T√™n vai tr√≤ m·ªõi ('user', 'lite', 'vip', 'admin', 'banned')
        logger.info("{} X√°c nh·∫≠n ƒë·ªïi role user {} -> '{}'.".format(log_prefix, target_telegram_id, new_role))

        # L·∫•y vai tr√≤ c≈© (kh√¥ng b·∫Øt bu·ªôc, ch·ªâ ƒë·ªÉ g·ª≠i th√¥ng b√°o)
        try:
            user_info_before_update = get_user_by_telegram_id(target_telegram_id)
            old_role = user_info_before_update.get('user_role')
            logger.debug("{} Vai tr√≤ c≈© c·ªßa user {}: '{}'.".format(log_prefix, target_telegram_id, old_role))
        except (UserNotFoundError, DatabaseError) as e_get_old:
             # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c vai tr√≤ c≈©, v·∫´n ti·∫øp t·ª•c
             logger.warning("{} Kh√¥ng th·ªÉ l·∫•y vai tr√≤ c≈© c·ªßa user {}: {}.".format(log_prefix, target_telegram_id, e_get_old))
             old_role = None

        # C·∫≠p nh·∫≠t vai tr√≤ m·ªõi v√†o DB
        role_update_success = update_user_role(target_telegram_id, new_role)

        # N·∫øu c·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng
        if role_update_success:
            logger.info("{} Update role OK.".format(log_prefix))

            # === S·ª¨A L·ªñI: X√°c ƒë·ªãnh gi·ªõi h·∫°n m·ªõi d·ª±a tr√™n vai tr√≤ m·ªõi ===
            new_limit = DAILY_LIMIT_USER # M·∫∑c ƒë·ªãnh cho 'user'
            if new_role == 'banned':
                new_limit = 0 # ƒê·∫∑t gi·ªõi h·∫°n v·ªÅ 0 n·∫øu b·ªã ban
            elif new_role == 'lite':
                new_limit = DAILY_LIMIT_LITE
            elif new_role == 'vip' or new_role == 'admin':
                new_limit = DAILY_LIMIT_VIP
            # ==========================================================

            logger.info("{} C·∫≠p nh·∫≠t limit theo role m·ªõi -> {}.".format(log_prefix, new_limit))
            try:
                 # C·∫≠p nh·∫≠t gi·ªõi h·∫°n m·ªõi v√†o DB
                 limit_update_success = update_user_daily_limit(target_telegram_id, new_limit)
                 # T·∫°o tin nh·∫Øn ph·∫£n h·ªìi d·ª±a tr√™n k·∫øt qu·∫£ c·∫≠p nh·∫≠t limit
                 if limit_update_success:
                      # S·ª≠a tin nh·∫Øn ƒë·ªÉ ph·∫£n √°nh ƒë√∫ng limit khi banned
                      if new_role == 'banned':
                          message = "‚úÖ ƒê√£ ƒë·ªïi vai tr√≤ user `{}` th√†nh **{}** v√† c·∫≠p nh·∫≠t gi·ªõi h·∫°n th·∫ª m·ªõi th√†nh **0**.".format(target_telegram_id, new_role)
                      else:
                          message = "‚úÖ ƒê√£ ƒë·ªïi vai tr√≤ user `{}` th√†nh **{}** v√† c·∫≠p nh·∫≠t gi·ªõi h·∫°n th·∫ª m·ªõi th√†nh **{}**.".format(target_telegram_id, new_role, new_limit)
                 else:
                      # Th√¥ng b√°o n·∫øu ch·ªâ c·∫≠p nh·∫≠t ƒë∆∞·ª£c role m√† kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c limit
                      message = "‚úÖ ƒê√£ ƒë·ªïi vai tr√≤ `{}` th√†nh **{}**. Kh√¥ng c·∫≠p nh·∫≠t gi·ªõi h·∫°n (c√≥ th·ªÉ do l·ªói ho·∫∑c kh√¥ng c·∫ßn thi·∫øt).".format(target_telegram_id, new_role)
                      logger.warning("{} C·∫≠p nh·∫≠t limit kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng thay ƒë·ªïi.".format(log_prefix))
            except (ValidationError, DatabaseError, UserNotFoundError) as e_limit:
                 # Th√¥ng b√°o n·∫øu c·∫≠p nh·∫≠t role th√†nh c√¥ng nh∆∞ng l·ªói khi c·∫≠p nh·∫≠t limit
                 message = "‚úÖ ƒê√£ ƒë·ªïi vai tr√≤ `{}` th√†nh **{}**, nh∆∞ng **l·ªói** c·∫≠p nh·∫≠t gi·ªõi h·∫°n: {}".format(target_telegram_id, new_role, e_limit)
                 logger.error("{} L·ªói c·∫≠p nh·∫≠t limit: {}".format(log_prefix, e_limit))
        else:
            # Th√¥ng b√°o n·∫øu c·∫≠p nh·∫≠t vai tr√≤ th·∫•t b·∫°i
            message = "‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t vai tr√≤ cho user `{}` (c√≥ th·ªÉ user kh√¥ng t·ªìn t·∫°i ho·∫∑c vai tr√≤ kh√¥ng ƒë·ªïi).".format(target_telegram_id)
            logger.warning("{} update_user_role tr·∫£ v·ªÅ False.".format(log_prefix))
            role_update_success = False # ƒê·∫£m b·∫£o c·ªù l√† False

    # X·ª≠ l√Ω l·ªói parse callback data
    except (ValueError, IndexError) as e_parse:
        logger.error("{} Callback data l·ªói: {}. L·ªói: {}".format(log_prefix, query.data, e_parse))
        message = "‚ùå L·ªói: D·ªØ li·ªáu callback kh√¥ng h·ª£p l·ªá."
        role_update_success = False
    # X·ª≠ l√Ω l·ªói validation (v√≠ d·ª•: role kh√¥ng h·ª£p l·ªá)
    except ValidationError as e_role:
        logger.error("{} L·ªói Validation khi c·∫≠p nh·∫≠t role: {}".format(log_prefix, e_role))
        message = "‚ùå {}".format(e_role)
        role_update_success = False
    # X·ª≠ l√Ω l·ªói DB ho·∫∑c kh√¥ng t√¨m th·∫•y user
    except (DatabaseError, DuplicateError, UserNotFoundError) as e_db:
        logger.error("{} L·ªói DB/User/Duplicate khi c·∫≠p nh·∫≠t role: {}".format(log_prefix, e_db))
        message = "‚ùå L·ªói database khi c·∫≠p nh·∫≠t vai tr√≤: {}".format(e_db)
        role_update_success = False
    # X·ª≠ l√Ω l·ªói kh√¥ng mong mu·ªën kh√°c
    except Exception as e_unknown:
        logger.error("{} L·ªói kh√¥ng mong mu·ªën kh√°c: {}".format(log_prefix, e_unknown), exc_info=True)
        message = "‚ùå C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra trong qu√° tr√¨nh c·∫≠p nh·∫≠t."
        role_update_success = False

    # T·∫°o n√∫t quay l·∫°i th√¥ng tin user n·∫øu c√≥ target_telegram_id
    if target_telegram_id:
        kb_back = [[InlineKeyboardButton("üîô Quay l·∫°i Info User", callback_data="user_info:{}".format(target_telegram_id))]]
        reply_markup = InlineKeyboardMarkup(kb_back)

    # G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi cho admin
    await send_or_edit_message(
        context=context,
        chat_id=chat_id,
        text=message,
        reply_markup=reply_markup,
        parse_mode='Markdown',
        message_to_edit=message_to_edit
    )

    # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng n·∫øu vai tr√≤ th·ª±c s·ª± thay ƒë·ªïi
    if role_update_success and old_role is not None and old_role != new_role and target_telegram_id:
        logger.info("{} Vai tr√≤ ƒë√£ thay ƒë·ªïi t·ª´ '{}' -> '{}'. G·ª≠i th√¥ng b√°o t·ªõi user {}.".format(log_prefix, old_role, new_role, target_telegram_id))
        # T·∫°o n·ªôi dung th√¥ng b√°o d·ª±a tr√™n vai tr√≤ m·ªõi
        notification_message = "üîî Th√¥ng b√°o: Vai tr√≤ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c qu·∫£n tr·ªã vi√™n c·∫≠p nh·∫≠t th√†nh **{}**.".format(new_role.upper())
        # C√≥ th·ªÉ th√™m c√°c tin nh·∫Øn ƒë·∫∑c bi·ªát cho vi·ªác n√¢ng c·∫•p ho·∫∑c b·ªã ban
        role_levels = {'banned': 0, 'user': 1, 'lite': 2, 'vip': 3, 'admin': 4}
        if new_role == 'banned':
            notification_message = "üö´ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a b·ªüi qu·∫£n tr·ªã vi√™n."
        elif role_levels.get(new_role, 0) > role_levels.get(old_role, 0): # N·∫øu ƒë∆∞·ª£c n√¢ng c·∫•p
            notification_message = "üéâ Ch√∫c m·ª´ng! Vai tr√≤ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p th√†nh **{}**.".format(new_role.upper())

        try:
            # G·ª≠i th√¥ng b√°o b·∫•t ƒë·ªìng b·ªô t·ªõi ng∆∞·ªùi d√πng
            # Kh√¥ng c·∫ßn await tr·ª±c ti·∫øp ·ªü ƒë√¢y, ƒë·ªÉ kh√¥ng ch·∫∑n admin
            asyncio.create_task(
                 context.bot.send_message(chat_id=target_telegram_id, text=notification_message, parse_mode='Markdown')
            )
            logger.info("{} ƒê√£ l√™n l·ªãch g·ª≠i th√¥ng b√°o thay ƒë·ªïi role.".format(log_prefix))
        except Exception as e_notify:
            logger.error("{} L·ªói g·ª≠i th√¥ng b√°o role cho {}: {}".format(log_prefix, target_telegram_id, e_notify), exc_info=False)

@require_permission(CAN_SET_LIMITS)
async def handle_callback_start_edit_limit(update, context):
    """
    Entry Point: B·∫Øt ƒë·∫ßu conversation s·ª≠a gi·ªõi h·∫°n th·∫ª m·ªõi.
    K√≠ch ho·∫°t b·ªüi callback 'edit_limit:<target_telegram_id>'.
    """
    query = update.callback_query
    # Ki·ªÉm tra callback h·ª£p l·ªá
    if not query or not query.from_user or not query.data:
        logger.warning("handle_callback_start_edit_limit: Callback/User/Data kh√¥ng h·ª£p l·ªá.")
        return ConversationHandler.END # K·∫øt th√∫c n·∫øu kh√¥ng h·ª£p l·ªá

    # Tr·∫£ l·ªùi callback
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning("L·ªói answer callback start edit limit: {}".format(e_ans))

    admin_user_id = query.from_user.id
    log_prefix = "[USER_MGMT_START_LIMIT_CONV|Admin:{}]".format(admin_user_id)
    chat_id = admin_user_id # Ph·∫£n h·ªìi cho admin
    message_to_edit = query.message

    try:
        # Parse target_telegram_id
        parts = query.data.split(":")
        if len(parts) < 2:
            raise ValueError("Callback data kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng")
        target_telegram_id_str = parts[1]
        target_telegram_id = int(target_telegram_id_str)
        logger.info("{} B·∫Øt ƒë·∫ßu conv s·ª≠a limit user TG: {}.".format(log_prefix, target_telegram_id))

        # L∆∞u target_telegram_id v√†o user_data ƒë·ªÉ state sau s·ª≠ d·ª•ng
        context.user_data["target_user_id_for_limit"] = target_telegram_id

        # G·ª≠i y√™u c·∫ßu nh·∫≠p gi·ªõi h·∫°n m·ªõi
        sent_msg = await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="Nh·∫≠p gi·ªõi h·∫°n th·∫ª m·ªõi/ng√†y cho user `{}` (s·ªë nguy√™n >= 0).\n\nG√µ /cancel ƒë·ªÉ h·ªßy.".format(target_telegram_id),
            parse_mode='Markdown',
            message_to_edit=message_to_edit,
            reply_markup=None # X√≥a b√†n ph√≠m c≈©
        )

        # N·∫øu g·ª≠i y√™u c·∫ßu th√†nh c√¥ng, chuy·ªÉn state
        if not sent_msg:
            logger.error("{} L·ªói g·ª≠i y√™u c·∫ßu nh·∫≠p limit.".format(log_prefix))
            context.user_data.pop("target_user_id_for_limit", None) # D·ªçn d·∫πp n·∫øu l·ªói
            return ConversationHandler.END

        return SET_DAILY_LIMIT # Chuy·ªÉn sang state ch·ªù nh·∫≠p limit

    except (ValueError, IndexError):
        logger.error("{} Callback data l·ªói: {}".format(log_prefix, query.data))
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói: D·ªØ li·ªáu ID kh√¥ng h·ª£p l·ªá.", message_to_edit=message_to_edit)
        return ConversationHandler.END
    except Exception as e:
        logger.error("{} L·ªói kh√¥ng mong mu·ªën: {}".format(log_prefix, e), exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
        return ConversationHandler.END

async def _handle_state_set_limit_input(update, context):
    """
    Handler cho state SET_DAILY_LIMIT, x·ª≠ l√Ω input gi·ªõi h·∫°n t·ª´ admin.
    """
    # Ki·ªÉm tra ƒë·∫ßu v√†o
    if not update or not update.effective_user or not update.message:
        logger.warning("_handle_state_set_limit_input: update/user/message kh√¥ng h·ª£p l·ªá.")
        return SET_DAILY_LIMIT # Gi·ªØ state n·∫øu update kh√¥ng h·ª£p l·ªá
    if not update.message.text:
        logger.warning("_handle_state_set_limit_input: message kh√¥ng ch·ª©a text.")
        await update.message.reply_text("Vui l√≤ng nh·∫≠p gi·ªõi h·∫°n l√† m·ªôt con s·ªë ho·∫∑c g√µ /cancel.")
        return SET_DAILY_LIMIT # Gi·ªØ state ch·ªù input ƒë√∫ng

    admin_user_id = update.effective_user.id
    chat_id = update.message.chat_id
    log_prefix = "[USER_MGMT_LIMIT_INPUT|Admin:{}]".format(admin_user_id)
    message_text = update.message.text # Gi·ªõi h·∫°n admin nh·∫≠p

    # L·∫•y target_telegram_id ƒë√£ l∆∞u
    target_telegram_id = context.user_data.get("target_user_id_for_limit")
    if not target_telegram_id:
        logger.error("{} Thi·∫øu target_user_id_for_limit trong user_data.".format(log_prefix))
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng c·∫ßn s·ª≠a limit. Vui l√≤ng th·ª≠ l·∫°i t·ª´ ƒë·∫ßu.")
        return ConversationHandler.END # K·∫øt th√∫c n·∫øu m·∫•t context

    logger.info("{} Admin nh·∫≠p limit '{}' cho user TG {}.".format(log_prefix, message_text, target_telegram_id))
    response_message = ""
    should_end_conversation = True # M·∫∑c ƒë·ªãnh l√† k·∫øt th√∫c sau khi x·ª≠ l√Ω
    reply_markup_limit = None # B√†n ph√≠m tr·∫£ v·ªÅ

    try:
        # Chuy·ªÉn input th√†nh s·ªë nguy√™n
        new_limit = int(message_text)
        # G·ªçi h√†m c·∫≠p nh·∫≠t limit trong DB (h√†m n√†y c√≥ ki·ªÉm tra >= 0)
        limit_update_success = update_user_daily_limit(target_telegram_id, new_limit)
        if limit_update_success:
            response_message = "‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·ªõi h·∫°n th·∫ª m·ªõi/ng√†y cho user `{}` th√†nh **{}**.".format(target_telegram_id, new_limit)
            logger.info("{} C·∫≠p nh·∫≠t limit OK.".format(log_prefix))
        else:
            # C√≥ th·ªÉ do user kh√¥ng t·ªìn t·∫°i ho·∫∑c limit kh√¥ng ƒë·ªïi
            response_message = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user `{}` ho·∫∑c gi·ªõi h·∫°n kh√¥ng thay ƒë·ªïi.".format(target_telegram_id)
            logger.warning("{} update_user_daily_limit tr·∫£ v·ªÅ False.".format(log_prefix))
        # T·∫°o n√∫t quay l·∫°i Info User
        kb_back_info = [[InlineKeyboardButton("üîô Quay l·∫°i Info User", callback_data="user_info:{}".format(target_telegram_id))]]
        reply_markup_limit = InlineKeyboardMarkup(kb_back_info)

    # X·ª≠ l√Ω l·ªói n·∫øu input kh√¥ng ph·∫£i s·ªë
    except ValueError:
        logger.warning("{} Input kh√¥ng ph·∫£i s·ªë nguy√™n: {}.".format(log_prefix, message_text))
        response_message = "‚ùå '{}' kh√¥ng ph·∫£i l√† s·ªë. Vui l√≤ng nh·∫≠p s·ªë nguy√™n >= 0 ho·∫∑c g√µ /cancel.".format(message_text)
        should_end_conversation = False # Kh√¥ng k·∫øt th√∫c, ch·ªù nh·∫≠p l·∫°i
        # G·ª≠i th√¥ng b√°o l·ªói v√† gi·ªØ state
        await send_or_edit_message(context=context, chat_id=chat_id, text=response_message)
        return SET_DAILY_LIMIT
    # X·ª≠ l√Ω l·ªói validation t·ª´ h√†m DB (v√≠ d·ª•: limit < 0)
    except ValidationError as e:
        logger.warning("{} L·ªói Validation khi c·∫≠p nh·∫≠t limit: {}".format(log_prefix, e))
        response_message = "‚ùå {}\nVui l√≤ng nh·∫≠p l·∫°i ho·∫∑c g√µ /cancel.".format(e)
        should_end_conversation = False # Kh√¥ng k·∫øt th√∫c, ch·ªù nh·∫≠p l·∫°i
        # G·ª≠i th√¥ng b√°o l·ªói v√† gi·ªØ state
        await send_or_edit_message(context=context, chat_id=chat_id, text=response_message)
        return SET_DAILY_LIMIT
    # X·ª≠ l√Ω l·ªói DB ho·∫∑c kh√¥ng t√¨m th·∫•y user
    except (DatabaseError, UserNotFoundError) as e:
        logger.error("{} L·ªói DB/User khi c·∫≠p nh·∫≠t limit: {}".format(log_prefix, e))
        response_message = "‚ùå L·ªói khi c·∫≠p nh·∫≠t limit cho user `{}`.".format(target_telegram_id)
        should_end_conversation = True # K·∫øt th√∫c v√¨ l·ªói DB
    # X·ª≠ l√Ω l·ªói kh√¥ng mong mu·ªën kh√°c
    except Exception as e:
        logger.exception("{} L·ªói kh√°c khi c·∫≠p nh·∫≠t limit: {}".format(log_prefix, e))
        response_message = "‚ùå C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra."
        should_end_conversation = True # K·∫øt th√∫c v√¨ l·ªói

    # G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi cu·ªëi c√πng
    await send_or_edit_message(context=context, chat_id=chat_id, text=response_message, parse_mode='Markdown', reply_markup=reply_markup_limit)

    # N·∫øu x·ª≠ l√Ω xong (th√†nh c√¥ng ho·∫∑c l·ªói kh√¥ng th·ªÉ th·ª≠ l·∫°i) th√¨ k·∫øt th√∫c conversation
    if should_end_conversation:
        context.user_data.pop("target_user_id_for_limit", None) # D·ªçn d·∫πp context
        logger.debug("{} K·∫øt th√∫c conversation s·ª≠a limit.".format(log_prefix))
        return ConversationHandler.END
    else:
        # N·∫øu c·∫ßn nh·∫≠p l·∫°i, gi·ªØ state
        return SET_DAILY_LIMIT

async def _handle_cancel_edit_limit(update, context):
    """Fallback handler ƒë·ªÉ h·ªßy conversation s·ª≠a gi·ªõi h·∫°n."""
    # Ki·ªÉm tra ƒë·∫ßu v√†o
    if not update or not update.effective_user:
        return ConversationHandler.END

    user_id = update.effective_user.id
    log_prefix = "[USER_MGMT_CANCEL_LIMIT|User:{}]".format(user_id)
    logger.info("{} H·ªßy thao t√°c s·ª≠a limit.".format(log_prefix))

    # L·∫•y target_telegram_id ƒë·ªÉ t·∫°o n√∫t quay l·∫°i ƒë√∫ng user
    target_telegram_id = context.user_data.pop("target_user_id_for_limit", None)

    # Chu·∫©n b·ªã tin nh·∫Øn v√† b√†n ph√≠m h·ªßy
    cancel_message_text = "ƒê√£ h·ªßy thao t√°c s·ª≠a gi·ªõi h·∫°n."
    message_to_edit_cancel = None
    chat_id_cancel = user_id # M·∫∑c ƒë·ªãnh g·ª≠i v·ªÅ cho admin

    # X√°c ƒë·ªãnh tin nh·∫Øn c·∫ßn s·ª≠a v√† chat_id
    if update.callback_query:
        query = update.callback_query
        try:
            await query.answer()
        except Exception:
            pass
        if query.message:
            message_to_edit_cancel = query.message
            chat_id_cancel = query.message.chat_id
    elif update.message:
        chat_id_cancel = update.message.chat_id

    # T·∫°o b√†n ph√≠m quay l·∫°i
    reply_markup_cancel = None
    if target_telegram_id:
        # N·∫øu bi·∫øt user n√†o ƒëang s·ª≠a, quay l·∫°i info user ƒë√≥
        kb_back_info_cancel = [[InlineKeyboardButton("üîô Quay l·∫°i Info User", callback_data="user_info:{}".format(target_telegram_id))]]
        reply_markup_cancel = InlineKeyboardMarkup(kb_back_info_cancel)
    else:
        # N·∫øu kh√¥ng r√µ, quay v·ªÅ menu admin ch√≠nh
        kb_back_admin = [[InlineKeyboardButton("üîô Quay l·∫°i Menu Admin", callback_data="flashcard_admin")]]
        reply_markup_cancel = InlineKeyboardMarkup(kb_back_admin)

    # G·ª≠i tin nh·∫Øn h·ªßy
    try:
        await send_or_edit_message(
            context=context,
            chat_id=chat_id_cancel,
            text=cancel_message_text,
            message_to_edit=message_to_edit_cancel,
            reply_markup=reply_markup_cancel
        )
        logger.debug("{} ƒê√£ g·ª≠i/s·ª≠a x√°c nh·∫≠n h·ªßy.".format(log_prefix))
    except Exception as e_send_final:
         logger.error("{} L·ªói g·ª≠i tin nh·∫Øn h·ªßy cu·ªëi c√πng: {}".format(log_prefix, e_send_final))

    # K·∫øt th√∫c conversation
    return ConversationHandler.END

# T·∫°o ConversationHandler cho lu·ªìng s·ª≠a limit
admin_set_limit_conv = ConversationHandler(
    entry_points=[
        # B·∫Øt ƒë·∫ßu khi nh·∫•n n√∫t "S·ª≠a Gi·ªõi h·∫°n th·∫ª m·ªõi"
        CallbackQueryHandler(handle_callback_start_edit_limit, pattern=r"^edit_limit:")
    ],
    states={
        # Ch·ªù admin nh·∫≠p s·ªë gi·ªõi h·∫°n m·ªõi
        SET_DAILY_LIMIT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, _handle_state_set_limit_input)
        ],
    },
    fallbacks=[
        # X·ª≠ l√Ω khi admin g√µ /cancel ho·∫∑c nh·∫•n n√∫t H·ªßy (n·∫øu c√≥)
        CommandHandler("cancel", _handle_cancel_edit_limit)
        # C√≥ th·ªÉ th√™m CallbackQueryHandler cho n√∫t H·ªßy n·∫øu c·∫ßn
    ],
    name="admin_edit_limit_conversation", # T√™n ƒë·ªÉ debug
    persistent=False, # Kh√¥ng l∆∞u state qua c√°c l·∫ßn kh·ªüi ƒë·ªông l·∫°i
    per_message=True # X·ª≠ l√Ω ƒë·ªôc l·∫≠p cho m·ªói tin nh·∫Øn
)

@require_permission(CAN_SET_LIMITS)
async def handle_command_set_limit(update, context):
    """
    Handler cho l·ªánh /set_daily_limit <user_id> <limit>.
    Cho ph√©p admin ƒë·∫∑t gi·ªõi h·∫°n nhanh qua l·ªánh.
    """
    # Ki·ªÉm tra ƒë·∫ßu v√†o
    if not update or not update.effective_user or not update.message:
        return

    admin_user_id = update.effective_user.id
    chat_id = update.message.chat_id
    log_prefix = "[USER_MGMT_SET_LIMIT_CMD|Admin:{}]".format(admin_user_id)
    logger.info("{} L·ªánh /set_daily_limit.".format(log_prefix))
    response_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh."
    target_telegram_id_cmd = None

    try:
        # Ki·ªÉm tra c√∫ ph√°p l·ªánh
        if not context.args or len(context.args) != 2:
            await send_or_edit_message(context=context, chat_id=chat_id, text="‚ö†Ô∏è Sai c√∫ ph√°p.\nV√≠ d·ª•: `/set_daily_limit 123456789 50`", parse_mode='Markdown')
            return

        # Parse tham s·ªë
        target_telegram_id_cmd_str = context.args[0]
        new_limit_str = context.args[1]
        target_telegram_id_cmd = int(target_telegram_id_cmd_str)
        new_limit = int(new_limit_str)
        logger.info("{} Tham s·ªë: target={}, limit={}".format(log_prefix, target_telegram_id_cmd, new_limit))

        # G·ªçi h√†m c·∫≠p nh·∫≠t DB
        limit_update_success = update_user_daily_limit(target_telegram_id_cmd, new_limit)
        if limit_update_success:
            response_message = "‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi·ªõi h·∫°n th·∫ª m·ªõi/ng√†y cho user `{}` th√†nh **{}**.".format(target_telegram_id_cmd, new_limit)
            logger.info("{} C·∫≠p nh·∫≠t limit OK.".format(log_prefix))
        else:
            response_message = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user `{}` ho·∫∑c gi·ªõi h·∫°n kh√¥ng thay ƒë·ªïi.".format(target_telegram_id_cmd)
            logger.warning("{} update_user_daily_limit tr·∫£ v·ªÅ False.".format(log_prefix))

    # X·ª≠ l√Ω l·ªói
    except ValueError:
        logger.warning("{} Tham s·ªë kh√¥ng ph·∫£i s·ªë nguy√™n: {}.".format(log_prefix, context.args))
        response_message = "‚ùå L·ªói: User ID v√† gi·ªõi h·∫°n ph·∫£i l√† s·ªë nguy√™n."
    except ValidationError as e:
        logger.warning("{} L·ªói Validation: {}".format(log_prefix, e))
        response_message = "‚ùå {}".format(e)
    except (DatabaseError, UserNotFoundError) as e:
        logger.error("{} L·ªói DB/User: {}".format(log_prefix, e))
        response_message = "‚ùå L·ªói khi c·∫≠p nh·∫≠t limit cho user `{}`.".format(target_telegram_id_cmd)
    except Exception as e:
        logger.error("{} L·ªói kh√°c khi ch·∫°y l·ªánh set_limit: {}".format(log_prefix, e), exc_info=True)
        response_message = "‚ùå C√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra."

    # G·ª≠i ph·∫£n h·ªìi
    await send_or_edit_message(context=context, chat_id=chat_id, text=response_message, parse_mode='Markdown')

def register_handlers(app: Application):
    """ƒêƒÉng k√Ω c√°c handler li√™n quan ƒë·∫øn qu·∫£n l√Ω ng∆∞·ªùi d√πng (admin)."""
    # ƒêƒÉng k√Ω ConversationHandler cho vi·ªác s·ª≠a limit
    app.add_handler(admin_set_limit_conv)
    # ƒêƒÉng k√Ω CommandHandler cho l·ªánh /set_daily_limit
    app.add_handler(CommandHandler("set_daily_limit", handle_command_set_limit))
    # ƒêƒÉng k√Ω c√°c CallbackQueryHandler kh√°c
    app.add_handler(CallbackQueryHandler(handle_callback_manage_users, pattern=r"^manage_users$"))
    app.add_handler(CallbackQueryHandler(handle_callback_show_user_info, pattern=r"^user_info:"))
    app.add_handler(CallbackQueryHandler(update_user_role_callback, pattern=r"^set_role:"))
    app.add_handler(CallbackQueryHandler(update_user_role_confirm_callback, pattern=r"^set_role_confirm:"))
    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module User Management (Admin).")