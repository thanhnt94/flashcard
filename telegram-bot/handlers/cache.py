"""
Module ch·ª©a c√°c handlers cho ch·ª©c nƒÉng qu·∫£n l√Ω cache audio trong ph·∫ßn admin.
Bao g·ªìm hi·ªÉn th·ªã menu, d·ªçn d·∫πp cache, b·∫Øt ƒë·∫ßu/d·ª´ng job t·∫°o cache n·ªÅn.
"""
import logging
import asyncio
import functools 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ContextTypes, CommandHandler, CallbackQueryHandler 
from config import CAN_MANAGE_CACHE 
from ui.admin_ui import build_admin_cache_menu 
from utils.helpers import send_or_edit_message, require_permission 
from services.audio_service import ( 
    cleanup_unused_audio_cache,
    run_background_audio_cache_job
)
logger = logging.getLogger(__name__)
async def _cache_job_done_callback_with_data(task: asyncio.Task, bot_data: dict, application: Application):
    """H√†m ƒë∆∞·ª£c g·ªçi khi t√°c v·ª• cache n·ªÅn ho√†n th√†nh, nh·∫≠n bot_data v√† application."""
    log_prefix = "[CACHE_JOB_DONE_CB]"
    logger.info(f"{log_prefix} T√°c v·ª• cache '{task.get_name()}' ƒë√£ ho√†n th√†nh.")
    if not bot_data or not isinstance(bot_data, dict):
         logger.error(f"{log_prefix} Kh√¥ng nh·∫≠n ƒë∆∞·ª£c bot_data h·ª£p l·ªá.")
         return
    if not application or not isinstance(application, Application):
         logger.error(f"{log_prefix} Kh√¥ng nh·∫≠n ƒë∆∞·ª£c application instance h·ª£p l·ªá.")
         return
    bot = application.bot
    if not bot:
        logger.error(f"{log_prefix} Kh√¥ng l·∫•y ƒë∆∞·ª£c bot instance t·ª´ application.")
        return
    status_msg = "k·∫øt th√∫c v·ªõi l·ªói kh√¥ng x√°c ƒë·ªãnh"
    summary_dict = {'errors': 1} 
    try:
        result = task.result() 
        if isinstance(result, tuple) and len(result) == 2:
            status_msg_res = result[0]
            summary_dict_res = result[1]
            status_msg = status_msg_res 
            if isinstance(summary_dict_res, dict):
                 summary_dict = summary_dict_res
            else:
                 summary_dict = {'details': str(summary_dict_res)}
            logger.info(f"{log_prefix} K·∫øt qu·∫£: status='{status_msg}', summary='{summary_dict}'")
        else:
            logger.error(f"{log_prefix} K·∫øt qu·∫£ tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá: {result}")
            summary_dict = {'details': f"K·∫øt qu·∫£ kh√¥ng h·ª£p l·ªá: {result}"}
            status_msg = "ho√†n th√†nh v·ªõi k·∫øt qu·∫£ l·∫°"
    except asyncio.CancelledError:
        status_msg = "b·ªã h·ªßy"
        summary_dict = {'details': "T√°c v·ª• b·ªã h·ªßy b·ªè."}
        logger.info(f"{log_prefix} T√°c v·ª• b·ªã h·ªßy.")
    except Exception as e:
        status_msg = "k·∫øt th√∫c v·ªõi l·ªói"
        summary_dict = {'details': f"L·ªói kh√¥ng mong mu·ªën khi l·∫•y k·∫øt qu·∫£: {e}"}
        logger.exception(f"{log_prefix} L·ªói l·∫•y k·∫øt qu·∫£ task: {e}")
    bot_data['cache_job_running'] = False
    bot_data['cache_job_task'] = None
    starter_id = bot_data.pop("cache_job_starter_id", None) 
    logger.debug(f"{log_prefix} ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i job trong bot_data.")
    if starter_id and bot:
        summary_items = []
        for k, v in summary_dict.items():
            summary_items.append(f"{k}: {v}")
        summary_text = ", ".join(summary_items)
        final_message = f"T√°c v·ª• t·∫°o cache n·ªÅn ƒë√£ {status_msg}.\nK·∫øt qu·∫£: {summary_text}"
        try:
            asyncio.create_task(bot.send_message(chat_id=starter_id, text=final_message))
            logger.info(f"{log_prefix} ƒê√£ l√™n l·ªãch g·ª≠i TB k·∫øt qu·∫£ cho admin {starter_id}.")
        except Exception as send_err:
            logger.error(f"{log_prefix} L·ªói g·ª≠i TB k·∫øt qu·∫£ cho admin {starter_id}: {send_err}")
    elif not starter_id:
        logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y starter_id ƒë·ªÉ g·ª≠i th√¥ng b√°o k·∫øt qu·∫£.")
@require_permission(CAN_MANAGE_CACHE)
async def handle_callback_show_cache_menu(update, context):
    """Handler cho callback 'admin_cache:show_menu'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_show_cache_menu: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_show_cache_menu: User kh√¥ng h·ª£p l·ªá."); return
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning(f"L·ªói answer callback cache menu: {e_ans}")
    admin_user_id = query.from_user.id
    log_prefix = f"[CACHE_MGMT_SHOW_MENU|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} Y√™u c·∫ßu menu qu·∫£n l√Ω cache.")
    chat_id = admin_user_id 
    message_to_edit = query.message
    try:
        reply_markup = build_admin_cache_menu()
        if reply_markup:
            sent_msg = await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text="üßπ Qu·∫£n l√Ω Cache Audio:",
                reply_markup=reply_markup,
                message_to_edit=message_to_edit
            )
            if not sent_msg:
                logger.error(f"{log_prefix} L·ªói g·ª≠i/s·ª≠a menu cache.")
        else:
            logger.error(f"{log_prefix} L·ªói t·∫°o keyboard cache.")
            await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói hi·ªÉn th·ªã menu cache.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
@require_permission(CAN_MANAGE_CACHE)
async def handle_callback_ask_clear_cache(update, context):
    """Handler cho callback 'admin_cache:ask_clear'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_ask_clear_cache: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_ask_clear_cache: User kh√¥ng h·ª£p l·ªá."); return
    try:
        await query.answer()
    except Exception as e_ans:
         logger.warning(f"L·ªói answer callback ask clear: {e_ans}")
    admin_user_id = query.from_user.id
    chat_id = query.message.chat_id if query.message else admin_user_id
    log_prefix = f"[CACHE_MGMT_ASK_CLEAR|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} Y√™u c·∫ßu x√°c nh·∫≠n x√≥a cache.")
    try:
        button_confirm = InlineKeyboardButton("üóëÔ∏è C√≥, x√≥a cache", callback_data="clear_cache:confirm")
        button_cancel = InlineKeyboardButton("üö´ H·ªßy", callback_data="clear_cache:cancel") 
        keyboard = [[button_confirm, button_cancel]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="‚ùì B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a cache audio kh√¥ng s·ª≠ d·ª•ng?\n‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
            reply_markup=reply_markup,
            message_to_edit=query.message
        )
        logger.debug(f"{log_prefix} ƒê√£ g·ª≠i y√™u c·∫ßu x√°c nh·∫≠n.")
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói g·ª≠i y√™u c·∫ßu x√°c nh·∫≠n: {e}", exc_info=True)
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå C√≥ l·ªói khi y√™u c·∫ßu x√°c nh·∫≠n.", message_to_edit=query.message)
@require_permission(CAN_MANAGE_CACHE)
async def handle_command_clear_cache(update, context):
    """Handler cho l·ªánh /flashcard_clear_cache."""
    if not update: return
    if not update.effective_user: return
    if not update.message: return
    admin_user_id = update.effective_user.id
    chat_id = update.message.chat_id
    log_prefix = f"[CACHE_MGMT_CLEAR_CMD|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} L·ªánh /flashcard_clear_cache.")
    button_confirm = InlineKeyboardButton("üóëÔ∏è C√≥, x√≥a cache", callback_data="clear_cache:confirm")
    button_cancel = InlineKeyboardButton("üö´ H·ªßy", callback_data="clear_cache:cancel")
    keyboard = [[button_confirm, button_cancel]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùì B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a cache audio kh√¥ng s·ª≠ d·ª•ng?\n‚ö†Ô∏è Kh√¥ng th·ªÉ ho√†n t√°c.", reply_markup=reply_markup)
@require_permission(CAN_MANAGE_CACHE)
async def handle_callback_clear_cache_confirm(update, context):
    """Handler cho callback 'clear_cache:confirm' ho·∫∑c 'clear_cache:cancel'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_clear_cache_confirm: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_clear_cache_confirm: User kh√¥ng h·ª£p l·ªá."); return
    if not query.data: logger.warning("handle_callback_clear_cache_confirm: Data kh√¥ng h·ª£p l·ªá."); return
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning(f"L·ªói answer callback clear confirm: {e_ans}")
    admin_user_id = query.from_user.id
    chat_id = query.message.chat_id if query.message else admin_user_id
    log_prefix = f"[CACHE_MGMT_CLEAR_CB|Admin:{admin_user_id}]" 
    action = None
    result_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh."
    reply_markup_done = None 
    try:
        parts = query.data.split(":")
        if len(parts) < 2:
            raise IndexError("Callback data thi·∫øu action")
        action = parts[1] 
        logger.info(f"{log_prefix} Action: {action}")
    except (IndexError, AttributeError):
        logger.error(f"{log_prefix} Callback data l·ªói: {query.data}")
        await send_or_edit_message(context, chat_id, "L·ªói d·ªØ li·ªáu callback.", message_to_edit=query.message)
        return
    if action == "cancel":
        logger.info(f"{log_prefix} H·ªßy d·ªçn cache.")
        kb_back_cache = [[InlineKeyboardButton("üîô Quay l·∫°i Qu·∫£n l√Ω Cache", callback_data="admin_cache:show_menu")]]
        reply_markup = InlineKeyboardMarkup(kb_back_cache)
        await send_or_edit_message(context=context, chat_id=chat_id, text="ƒê√£ h·ªßy x√≥a cache.", reply_markup=reply_markup, message_to_edit=query.message)
        return 
    elif action == "confirm":
        logger.info(f"{log_prefix} X√°c nh·∫≠n d·ªçn cache.")
        status_message_obj = await send_or_edit_message(context=context, chat_id=chat_id, text="‚è≥ ƒêang ki·ªÉm tra v√† x√≥a cache audio kh√¥ng s·ª≠ d·ª•ng...", reply_markup=None, message_to_edit=query.message)
        if not status_message_obj:
            logger.error(f"{log_prefix} L·ªói g·ª≠i status message.")
        loop = asyncio.get_running_loop()
        deleted_count = 0
        error_count = 0
        try:
            logger.info(f"{log_prefix} Ch·∫°y t√°c v·ª• d·ªçn cache trong executor...")
            deleted_count, error_count = await loop.run_in_executor(None, cleanup_unused_audio_cache, "mp3")
            logger.info(f"{log_prefix} D·ªçn cache xong. Deleted: {deleted_count}, Errors: {error_count}")
            if deleted_count == 0 and error_count == 0:
                result_message = "‚úÖ Kh√¥ng t√¨m th·∫•y file cache audio n√†o kh√¥ng s·ª≠ d·ª•ng."
            else:
                result_message = f"‚úÖ ƒê√£ x√≥a th√†nh c√¥ng {deleted_count} file cache audio."
            if error_count > 0:
                result_message = result_message + f"\n‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω {error_count} file/hash (ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt)."
        except Exception as e:
            logger.exception(f"{log_prefix} L·ªói ch·∫°y t√°c v·ª• d·ªçn cache: {e}")
            result_message = f"‚ùå L·ªói nghi√™m tr·ªçng khi x√≥a cache: {e}"
        kb_back_admin = [[InlineKeyboardButton("üîô Quay l·∫°i Menu Admin", callback_data="flashcard_admin")]]
        reply_markup_done = InlineKeyboardMarkup(kb_back_admin)
        await send_or_edit_message(context=context, chat_id=chat_id, text=result_message, reply_markup=reply_markup_done, message_to_edit=status_message_obj)
    else:
        logger.warning(f"{log_prefix} Action kh√¥ng h·ª£p l·ªá: {action}")
        await send_or_edit_message(context, chat_id, "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá.", message_to_edit=query.message)
@require_permission(CAN_MANAGE_CACHE)
async def handle_callback_start_cache(update, context):
    """Handler cho callback 'admin_cache:start_job'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_start_cache: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_start_cache: User kh√¥ng h·ª£p l·ªá."); return
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning(f"L·ªói answer callback start cache: {e_ans}")
    admin_user_id = query.from_user.id
    chat_id = query.message.chat_id if query.message else admin_user_id
    log_prefix = f"[CACHE_MGMT_START_CB|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} Y√™u c·∫ßu b·∫Øt ƒë·∫ßu job cache qua callback.")
    bot_data = context.bot_data
    if bot_data.get('cache_job_running', False):
        logger.warning(f"{log_prefix} Job cache ƒë√£ ƒëang ch·∫°y.")
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ö†Ô∏è T√°c v·ª• t·∫°o cache hi·ªán ƒëang ch·∫°y.", message_to_edit=query.message)
        return
    logger.info(f"{log_prefix} Admin {admin_user_id} b·∫Øt ƒë·∫ßu job cache.")
    kb_back_cache = [[InlineKeyboardButton("üîô Quay l·∫°i Qu·∫£n l√Ω Cache", callback_data="admin_cache:show_menu")]]
    reply_markup_back = InlineKeyboardMarkup(kb_back_cache)
    status_msg = await send_or_edit_message(
        context=context,
        chat_id=chat_id,
        text="‚è≥ B·∫Øt ƒë·∫ßu t√°c v·ª• t·∫°o cache audio n·ªÅn...\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ho√†n th√†nh.\nD√πng n√∫t 'D·ª´ng T·∫°o Cache' ƒë·ªÉ y√™u c·∫ßu d·ª´ng.",
        message_to_edit=query.message,
        reply_markup=reply_markup_back 
    )
    bot_data['cache_job_running'] = True
    bot_data['cache_job_starter_id'] = admin_user_id
    bot_data['cache_job_task'] = None 
    try:
        application = context.application
        if not application:
             logger.error(f"{log_prefix} Kh√¥ng t√¨m th·∫•y context.application.")
             raise RuntimeError("Thi·∫øu Application instance trong context ƒë·ªÉ ch·∫°y job")
        task = asyncio.create_task( run_background_audio_cache_job(), name=f"AudioCachePopulater_{admin_user_id}" )
        callback_with_data = functools.partial(_cache_job_done_callback_with_data, bot_data=context.bot_data, application=application)
        task.add_done_callback(callback_with_data)
        bot_data['cache_job_task'] = task
        logger.info(f"{log_prefix} ƒê√£ t·∫°o task '{task.get_name()}' v√† th√™m done callback.")
    except Exception as e_create_task:
        logger.error(f"{log_prefix} L·ªói khi t·∫°o task cache: {e_create_task}", exc_info=True)
        bot_data['cache_job_running'] = False
        bot_data.pop("cache_job_starter_id", None)
        bot_data.pop('cache_job_task', None)
        await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="‚ùå L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o t√°c v·ª• t·∫°o cache.",
            message_to_edit=status_msg 
        )
@require_permission(CAN_MANAGE_CACHE)
async def handle_callback_stop_cache(update, context):
    """Handler cho callback 'admin_cache:stop_job'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_stop_cache: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_stop_cache: User kh√¥ng h·ª£p l·ªá."); return
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning(f"L·ªói answer callback stop cache: {e_ans}")
    admin_user_id = query.from_user.id
    chat_id = query.message.chat_id if query.message else admin_user_id
    log_prefix = f"[CACHE_MGMT_STOP_CB|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} Y√™u c·∫ßu d·ª´ng job cache qua callback.")
    bot_data = context.bot_data
    task = bot_data.get('cache_job_task') 
    is_running = bot_data.get('cache_job_running', False)
    kb_back_cache = [[InlineKeyboardButton("üîô Quay l·∫°i Qu·∫£n l√Ω Cache", callback_data="admin_cache:show_menu")]]
    reply_markup_back = InlineKeyboardMarkup(kb_back_cache)
    if is_running and task and isinstance(task, asyncio.Task):
        if not task.done():
            logger.info(f"{log_prefix} Admin y√™u c·∫ßu h·ªßy task: {task.get_name()}")
            cancelled = task.cancel()
            if cancelled:
                logger.info(f"{log_prefix} ƒê√£ g·ª≠i y√™u c·∫ßu h·ªßy task th√†nh c√¥ng.")
                await send_or_edit_message(
                    context=context,
                    chat_id=chat_id,
                    text="‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu d·ª´ng t√°c v·ª• t·∫°o cache.\nT√°c v·ª• s·∫Ω d·ª´ng v√† b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o k·∫øt qu·∫£.",
                    message_to_edit=query.message,
                    reply_markup=reply_markup_back
                )
            else:
                logger.warning(f"{log_prefix} Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu h·ªßy cho task.")
                await send_or_edit_message(
                    context=context,
                    chat_id=chat_id,
                    text="‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu d·ª´ng cho t√°c v·ª• ƒëang ch·∫°y.",
                    message_to_edit=query.message,
                    reply_markup=reply_markup_back
                )
        else:
            logger.warning(f"{log_prefix} Task ƒë√£ k·∫øt th√∫c nh∆∞ng c·ªù 'running' v·∫´n True. ƒêang s·ª≠a l·∫°i tr·∫°ng th√°i.")
            bot_data['cache_job_running'] = False
            bot_data['cache_job_task'] = None
            bot_data.pop("cache_job_starter_id", None) 
            await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text="‚ö†Ô∏è T√°c v·ª• t·∫°o cache ƒë√£ k·∫øt th√∫c (tr·∫°ng th√°i v·ª´a ƒë∆∞·ª£c c·∫≠p nh·∫≠t).",
                message_to_edit=query.message,
                reply_markup=reply_markup_back
            )
    elif not is_running:
        logger.info(f"{log_prefix} T√°c v·ª• kh√¥ng ch·∫°y (c·ªù running l√† False).")
        await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="‚úÖ T√°c v·ª• t·∫°o cache hi·ªán kh√¥ng ch·∫°y.",
            message_to_edit=query.message,
            reply_markup=reply_markup_back
        )
        bot_data['cache_job_task'] = None
        bot_data.pop("cache_job_starter_id", None)
    else: 
        logger.warning(f"{log_prefix} Tr·∫°ng th√°i l·ªói: Job ƒëang ch·∫°y nh∆∞ng kh√¥ng c√≥ task h·ª£p l·ªá.")
        bot_data['cache_job_running'] = False
        bot_data.pop('cache_job_task', None)
        bot_data.pop("cache_job_starter_id", None)
        await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="‚ö†Ô∏è Tr·∫°ng th√°i t√°c v·ª• t·∫°o cache b·ªã l·ªói, ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i.",
            message_to_edit=query.message,
            reply_markup=reply_markup_back
        )
@require_permission(CAN_MANAGE_CACHE)
async def handle_command_start_cache_job(update, context):
    """Handler cho l·ªánh /flashcard_cache_start."""
    if not update: return
    if not update.effective_user: return
    if not update.message: return
    admin_user_id = update.effective_user.id
    chat_id = update.message.chat_id
    log_prefix = f"[CACHE_MGMT_START_CMD|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} L·ªánh /flashcard_cache_start.")
    bot_data = context.bot_data
    if bot_data.get('cache_job_running', False):
        await send_or_edit_message(context=context, chat_id=chat_id, text="‚ö†Ô∏è T√°c v·ª• t·∫°o cache hi·ªán ƒëang ch·∫°y.")
        return
    logger.info(f"{log_prefix} Admin {admin_user_id} b·∫Øt ƒë·∫ßu job cache b·∫±ng l·ªánh.")
    status_msg = await send_or_edit_message(context=context, chat_id=chat_id, text="‚è≥ B·∫Øt ƒë·∫ßu t√°c v·ª• t·∫°o cache audio n·ªÅn...\nB·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ho√†n th√†nh.\nD√πng /flashcard_cache_stop ƒë·ªÉ y√™u c·∫ßu d·ª´ng.")
    bot_data['cache_job_running'] = True
    bot_data['cache_job_starter_id'] = admin_user_id
    bot_data['cache_job_task'] = None
    try:
        application = context.application
        if not application: raise RuntimeError("Thi·∫øu Application instance")
        task = asyncio.create_task( run_background_audio_cache_job(), name=f"AudioCachePopulater_{admin_user_id}" )
        callback_with_data = functools.partial(_cache_job_done_callback_with_data, bot_data=context.bot_data, application=application)
        task.add_done_callback(callback_with_data)
        bot_data['cache_job_task'] = task
        logger.info(f"{log_prefix} ƒê√£ t·∫°o task '{task.get_name()}' v√† th√™m done callback.")
    except Exception as e_create_task:
        logger.error(f"{log_prefix} L·ªói khi t·∫°o task cache: {e_create_task}", exc_info=True)
        bot_data['cache_job_running'] = False
        bot_data.pop("cache_job_starter_id", None)
        bot_data.pop('cache_job_task', None)
        await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text="‚ùå L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o t√°c v·ª• t·∫°o cache.",
            message_to_edit=status_msg
        )
@require_permission(CAN_MANAGE_CACHE)
async def handle_command_stop_cache_job(update, context):
    """Handler cho l·ªánh /flashcard_cache_stop."""
    if not update: return
    if not update.effective_user: return
    if not update.message: return
    admin_user_id = update.effective_user.id
    chat_id = update.message.chat_id
    log_prefix = f"[CACHE_MGMT_STOP_CMD|Admin:{admin_user_id}]" 
    logger.info(f"{log_prefix} L·ªánh /flashcard_cache_stop.")
    bot_data = context.bot_data
    task = bot_data.get('cache_job_task')
    is_running = bot_data.get('cache_job_running', False)
    if is_running and task and isinstance(task, asyncio.Task):
        if not task.done():
            logger.info(f"{log_prefix} Admin y√™u c·∫ßu h·ªßy task: {task.get_name()} b·∫±ng l·ªánh.")
            cancelled = task.cancel()
            if cancelled:
                logger.info(f"{log_prefix} ƒê√£ g·ª≠i y√™u c·∫ßu h·ªßy task th√†nh c√¥ng.")
                await send_or_edit_message(context=context, chat_id=chat_id, text="‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu d·ª´ng t√°c v·ª• t·∫°o cache.")
            else:
                logger.warning(f"{log_prefix} Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu h·ªßy cho task.")
                await send_or_edit_message(context=context, chat_id=chat_id, text="‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu d·ª´ng cho t√°c v·ª• ƒëang ch·∫°y.")
        else:
            logger.warning(f"{log_prefix} Task ƒë√£ k·∫øt th√∫c nh∆∞ng c·ªù 'running' v·∫´n True (l·ªánh).")
            bot_data['cache_job_running'] = False; bot_data['cache_job_task'] = None; bot_data.pop("cache_job_starter_id", None)
            await send_or_edit_message( context=context, chat_id=chat_id, text="‚ö†Ô∏è T√°c v·ª• t·∫°o cache ƒë√£ k·∫øt th√∫c (tr·∫°ng th√°i ƒë∆∞·ª£c c·∫≠p nh·∫≠t)." )
    elif not is_running:
        logger.info(f"{log_prefix} T√°c v·ª• kh√¥ng ch·∫°y (l·ªánh).")
        await send_or_edit_message( context=context, chat_id=chat_id, text="‚úÖ T√°c v·ª• t·∫°o cache hi·ªán kh√¥ng ch·∫°y." )
        bot_data['cache_job_task'] = None; bot_data.pop("cache_job_starter_id", None)
    else:
        logger.warning(f"{log_prefix} Tr·∫°ng th√°i l·ªói: Job ƒëang ch·∫°y nh∆∞ng kh√¥ng c√≥ task (l·ªánh).")
        bot_data['cache_job_running'] = False; bot_data.pop('cache_job_task', None); bot_data.pop("cache_job_starter_id", None)
        await send_or_edit_message( context=context, chat_id=chat_id, text="‚ö†Ô∏è Tr·∫°ng th√°i t√°c v·ª• t·∫°o cache b·ªã l·ªói, ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i." )
def register_handlers(app: Application):
    """ƒêƒÉng k√Ω c√°c handler li√™n quan ƒë·∫øn qu·∫£n l√Ω cache audio (admin)."""
    app.add_handler(CommandHandler("flashcard_clear_cache", handle_command_clear_cache))
    app.add_handler(CommandHandler("flashcard_cache_start", handle_command_start_cache_job))
    app.add_handler(CommandHandler("flashcard_cache_stop", handle_command_stop_cache_job))
    app.add_handler(CallbackQueryHandler(handle_callback_show_cache_menu, pattern=r"^admin_cache:show_menu$"))
    app.add_handler(CallbackQueryHandler(handle_callback_ask_clear_cache, pattern=r"^admin_cache:ask_clear$"))
    app.add_handler(CallbackQueryHandler(handle_callback_clear_cache_confirm, pattern=r"^clear_cache:")) 
    app.add_handler(CallbackQueryHandler(handle_callback_start_cache, pattern=r"^admin_cache:start_job$"))
    app.add_handler(CallbackQueryHandler(handle_callback_stop_cache, pattern=r"^admin_cache:stop_job$"))
    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module Cache Management (Admin).")
