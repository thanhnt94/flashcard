"""
Module ch·ª©a c√°c handlers cho ch·ª©c nƒÉng √¥n t·∫≠p b·∫±ng audio.
C√°c h√†m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë·ªÉ l·∫•y user_id t·ª´ telegram_id v√† s·ª≠ d·ª•ng user_id
khi g·ªçi c√°c h√†m service/database. ƒê√£ th√™m send_chat_action.
"""
import logging
import asyncio
import sqlite3
import os
import time
import html
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ContextTypes, CommandHandler, CallbackQueryHandler 
from telegram.error import BadRequest, TelegramError, Forbidden
from telegram.constants import ChatAction
from config import ( 
    AUDIO_REVIEW_CALLBACK_PREFIX,
    CAN_EXPORT_AUDIO, 
    AUDIO_N_OPTIONS, 
    BASE_DIR 
)
from database.connection import database_connect 
from database.query_set import get_sets 
from database.query_user import get_user_by_telegram_id 
from services.audio_service import generate_review_audio_compilation, get_card_ids_for_audio 
from utils.helpers import send_or_edit_message, require_permission 
from utils.exceptions import DatabaseError, SetNotFoundError, UserNotFoundError 
from ui.core_ui import build_audio_n_selection_keyboard 
logger = logging.getLogger(__name__)
@require_permission(CAN_EXPORT_AUDIO)
async def handle_command_audio_review(update, context):
    """Handler cho l·ªánh /flashcard_audioreview."""
    if not update: logger.warning("handle_command_audio_review: update kh√¥ng h·ª£p l·ªá."); return
    if not update.effective_user: logger.warning("handle_command_audio_review: user kh√¥ng h·ª£p l·ªá."); return
    if not update.message: logger.warning("handle_command_audio_review: message kh√¥ng h·ª£p l·ªá."); return
    user_id_tg = update.effective_user.id
    chat_id = update.message.chat_id
    log_prefix = f"[AUDIOREVIEW_CMD|UserTG:{user_id_tg}]" 
    logger.info(f"{log_prefix} L·ªánh /flashcard_audioreview.")
    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    except Exception as e_action:
        logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action: {e_action}")
    keyboard = [
        [InlineKeyboardButton("üéß Ch·ªçn B·ªô ƒë·ªÉ T·∫°o Audio", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:choose_set")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    sent_msg = await send_or_edit_message(
        context=context,
        chat_id=chat_id,
        text="Ch·ªçn b·ªô t·ª´ b·∫°n mu·ªën t·∫°o audio √¥n t·∫≠p:",
        reply_markup=reply_markup
    )
    if not sent_msg:
        logger.error(f"{log_prefix} L·ªói g·ª≠i n√∫t ch·ªçn b·ªô.")
async def handle_callback_audio_choose_set(update, context):
    """Hi·ªÉn th·ªã danh s√°ch c√°c b·ªô t·ª´ user ƒë√£ h·ªçc ƒë·ªÉ ch·ªçn t·∫°o audio."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_audio_choose_set: callback query kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_audio_choose_set: user kh√¥ng h·ª£p l·ªá."); return
    telegram_id = query.from_user.id
    log_prefix = f"[AUDIOREVIEW_CHOOSE_SET|UserTG:{telegram_id}]" 
    logger.info(f"{log_prefix} ƒêang ch·ªçn b·ªô ƒë·ªÉ t·∫°o audio.")
    chat_id = query.message.chat_id if query.message else telegram_id
    message_to_edit = query.message
    if chat_id != -1:
        try:
            await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception as e_action:
            logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action: {e_action}")
    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    conn = None
    sets_with_progress = []
    actual_user_id = None
    try:
        logger.debug(f"{log_prefix} L·∫•y user_id...")
        user_info = get_user_by_telegram_id(telegram_id)
        actual_user_id = user_info['user_id']
        logger.debug(f"{log_prefix} L·∫•y ƒë∆∞·ª£c user_id: {actual_user_id}")
        try:
            conn = database_connect()
            if conn is None: raise DatabaseError("Kh√¥ng th·ªÉ k·∫øt n·ªëi DB.")
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            query_learned_sets = """
                SELECT DISTINCT vs.set_id, vs.title
                FROM UserFlashcardProgress ufp
                JOIN Flashcards f ON ufp.flashcard_id = f.flashcard_id
                JOIN VocabularySets vs ON f.set_id = vs.set_id
                WHERE ufp.user_id = ? ORDER BY vs.title COLLATE NOCASE
            """
            cursor.execute(query_learned_sets, (actual_user_id,))
            sets_with_progress = [dict(row) for row in cursor.fetchall()]
            logger.debug(f"{log_prefix} T√¨m th·∫•y {len(sets_with_progress)} b·ªô user ƒë√£ h·ªçc.")
        finally:
            if conn: conn.close()
        if not sets_with_progress:
            logger.warning(f"{log_prefix} User {actual_user_id} ch∆∞a h·ªçc b·ªô n√†o.")
            kb_back = [[InlineKeyboardButton("üîô Menu ch√≠nh", callback_data="handle_callback_back_to_main")]]
            await send_or_edit_message(context, chat_id, "B·∫°n ch∆∞a h·ªçc b·ªô t·ª´ n√†o ƒë·ªÉ t·∫°o audio.", reply_markup=InlineKeyboardMarkup(kb_back), message_to_edit=message_to_edit)
            return
        keyboard = []
        for set_data in sets_with_progress:
            set_id = set_data.get('set_id'); set_title = set_data.get('title')
            if set_id is None or set_title is None: continue
            callback_data = f"{AUDIO_REVIEW_CALLBACK_PREFIX}:show_options:{set_id}"
            keyboard.append([InlineKeyboardButton(f"üìö {html.escape(set_title)}", callback_data=callback_data)])
        keyboard.append([InlineKeyboardButton("üîô Menu ch√≠nh", callback_data="handle_callback_back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        sent_msg = await send_or_edit_message(context=context, chat_id=chat_id, text="Ch·ªçn b·ªô b·∫°n mu·ªën t·∫°o audio:", reply_markup=reply_markup, message_to_edit=message_to_edit)
        if not sent_msg: logger.error(f"{log_prefix} L·ªói hi·ªÉn th·ªã danh s√°ch b·ªô.")
    except (UserNotFoundError, DatabaseError, sqlite3.Error) as e_db:
        logger.error(f"{log_prefix} L·ªói DB/User khi l·∫•y list b·ªô t·ª´: {e_db}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i danh s√°ch b·ªô t·ª´.", message_to_edit=message_to_edit)
    except Exception as e:
         logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
         await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
async def handle_callback_audio_show_options(update, context):
    """Handler cho callback 'audioreview:show_options:<set_id>'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_audio_show_options: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_audio_show_options: User kh√¥ng h·ª£p l·ªá."); return
    if not query.data: logger.warning("handle_callback_audio_show_options: Data kh√¥ng h·ª£p l·ªá."); return
    telegram_id = query.from_user.id
    log_prefix = f"[AUDIOREVIEW_SHOW_OPTIONS|UserTG:{telegram_id}]" 
    chat_id = query.message.chat_id if query.message else telegram_id
    message_to_edit = query.message
    set_id = None
    if chat_id != -1:
        try: await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception as e_action: logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action: {e_action}")
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) < 3: raise ValueError("Callback data thi·∫øu set_id")
        set_id = int(parts[2])
        logger.info(f"{log_prefix} Hi·ªÉn th·ªã t√πy ch·ªçn audio cho Set ID: {set_id}")
        set_info_tuple = get_sets(columns=["title"], set_id=set_id) 
        set_info = set_info_tuple[0][0] if set_info_tuple and set_info_tuple[0] else None
        if not set_info: raise SetNotFoundError(set_id=set_id)
        set_title = set_info.get('title', f"B·ªô {set_id}")
        keyboard = [
            [InlineKeyboardButton("‚úÖ T·∫•t c·∫£ t·ª´ ƒë√£ h·ªçc", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:trigger:set_all:{set_id}")],
            [InlineKeyboardButton("üïí C√°c t·ª´ m·ªõi h·ªçc g·∫ßn nh·∫•t", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:show_n_options:set_recent:{set_id}")],
            [InlineKeyboardButton("‚è≥ C√°c t·ª´ h·ªçc l√¢u nh·∫•t", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:show_n_options:set_oldest:{set_id}")],
            [InlineKeyboardButton("üîô Quay l·∫°i Ch·ªçn b·ªô", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:choose_set")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        escaped_set_title = html.escape(set_title)
        sent_msg = await send_or_edit_message(
            context=context,
            chat_id=chat_id,
            text=f"Ch·ªçn lo·∫°i th·∫ª mu·ªën t·∫°o audio cho b·ªô '**{escaped_set_title}**':",
            reply_markup=reply_markup,
            parse_mode='Markdown',
            message_to_edit=message_to_edit
        )
        if not sent_msg: logger.error(f"{log_prefix} L·ªói hi·ªÉn th·ªã t√πy ch·ªçn audio.")
    except (ValueError, IndexError):
        logger.error(f"{log_prefix} Callback data l·ªói: {query.data}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói: D·ªØ li·ªáu callback kh√¥ng h·ª£p l·ªá.", message_to_edit=message_to_edit)
    except SetNotFoundError:
        logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y Set ID {set_id}.")
        await send_or_edit_message(context, chat_id, "‚ùå Kh√¥ng t√¨m th·∫•y b·ªô t·ª´ n√†y.", message_to_edit=message_to_edit)
    except DatabaseError as e:
        logger.error(f"{log_prefix} L·ªói DB khi l·∫•y th√¥ng tin set {set_id}: {e}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i th√¥ng tin b·ªô t·ª´.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
async def handle_callback_audio_show_n_options(update, context):
    """Handler cho callback 'audioreview:show_n_options:<mode>:<set_id>'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_audio_show_n_options: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_audio_show_n_options: User kh√¥ng h·ª£p l·ªá."); return
    if not query.data: logger.warning("handle_callback_audio_show_n_options: Data kh√¥ng h·ª£p l·ªá."); return
    telegram_id = query.from_user.id
    log_prefix = f"[AUDIOREVIEW_SHOW_N|UserTG:{telegram_id}]" 
    chat_id = query.message.chat_id if query.message else telegram_id
    message_to_edit = query.message
    if chat_id != -1:
        try: await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        except Exception as e_action: logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action: {e_action}")
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) != 4 or parts[1] != "show_n_options":
            raise ValueError("Format callback show_n_options kh√¥ng ƒë√∫ng")
        mode = parts[2] 
        set_id = int(parts[3])
        logger.info(f"{log_prefix} Y√™u c·∫ßu ch·ªçn N cho mode={mode}, set_id={set_id}")
        reply_markup = build_audio_n_selection_keyboard(mode, set_id)
        if reply_markup:
            sent_msg = await send_or_edit_message(
                context=context,
                chat_id=chat_id,
                text="Ch·ªçn s·ªë l∆∞·ª£ng th·∫ª (N) b·∫°n mu·ªën ƒë∆∞a v√†o file audio:",
                reply_markup=reply_markup,
                message_to_edit=message_to_edit
            )
            if not sent_msg: logger.error(f"{log_prefix} L·ªói hi·ªÉn th·ªã keyboard ch·ªçn N.")
        else:
            logger.error(f"{log_prefix} L·ªói t·∫°o keyboard ch·ªçn N (c√≥ th·ªÉ do config AUDIO_N_OPTIONS l·ªói).")
            await send_or_edit_message(context, chat_id, "L·ªói t·∫°o danh s√°ch l·ª±a ch·ªçn s·ªë l∆∞·ª£ng.", message_to_edit=message_to_edit)
    except (ValueError, IndexError, TypeError) as e_parse:
        logger.error(f"{log_prefix} L·ªói parse callback data '{query.data}': {e_parse}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
async def handle_callback_audio_select_n(update, context):
    """Handler cho callback 'audioreview:trigger:<mode>:<set_id>:<n>'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_audio_select_n: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_audio_select_n: User kh√¥ng h·ª£p l·ªá."); return
    if not query.data: logger.warning("handle_callback_audio_select_n: Data kh√¥ng h·ª£p l·ªá."); return
    telegram_id = query.from_user.id
    log_prefix = f"[AUDIOREVIEW_SELECT_N|UserTG:{telegram_id}]" 
    chat_id = query.message.chat_id if query.message else telegram_id
    message_to_edit = query.message 
    actual_user_id = None
    set_id = None
    mode = None
    n_cards = None
    if chat_id != -1:
        try: await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
        except Exception as e_action: logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action upload: {e_action}")
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) != 5 or parts[1] != "trigger":
            raise ValueError("Format callback trigger audio N kh√¥ng ƒë√∫ng")
        mode = parts[2] 
        set_id = int(parts[3])
        n_cards = int(parts[4])
        logger.info(f"{log_prefix} User ch·ªçn N={n_cards}, mode={mode}, set_id={set_id}")
        logger.debug(f"{log_prefix} L·∫•y user_id...")
        user_info = get_user_by_telegram_id(telegram_id)
        actual_user_id = user_info['user_id']
        logger.debug(f"{log_prefix} L·∫•y ƒë∆∞·ª£c user_id: {actual_user_id}")
        card_ids = None
        loop = asyncio.get_running_loop()
        logger.debug(f"{log_prefix} G·ªçi service get_card_ids_for_audio...")
        card_ids = await loop.run_in_executor(None, get_card_ids_for_audio, actual_user_id, set_id, mode, n_cards)
        if card_ids is None: 
             await send_or_edit_message(context=context, chat_id=chat_id, text="‚ùå L·ªói: D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói truy v·∫•n.", message_to_edit=message_to_edit)
             return
        elif not card_ids: 
            await send_or_edit_message(context=context, chat_id=chat_id, text=f"Kh√¥ng t√¨m th·∫•y th·∫ª n√†o kh·ªõp y√™u c·∫ßu (N={n_cards}) trong b·ªô n√†y.", message_to_edit=message_to_edit)
            return
        await _initiate_audio_compilation_task(update, context, card_ids, set_id)
    except (ValueError, IndexError, TypeError) as e_parse:
        logger.error(f"{log_prefix} L·ªói parse callback data '{query.data}': {e_parse}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói d·ªØ li·ªáu callback l·ª±a ch·ªçn N.", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError) as e_db:
        logger.error(f"{log_prefix} L·ªói DB/User khi x·ª≠ l√Ω: {e_db}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i d·ªØ li·ªáu th·∫ª t·ª´ database.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn N.", message_to_edit=message_to_edit)
async def handle_callback_audio_trigger_set_all(update, context):
    """Handler cho callback 'audioreview:trigger:set_all:<set_id>'."""
    query = update.callback_query
    if not query: logger.warning("handle_callback_audio_trigger_set_all: Callback kh√¥ng h·ª£p l·ªá."); return
    if not query.from_user: logger.warning("handle_callback_audio_trigger_set_all: User kh√¥ng h·ª£p l·ªá."); return
    if not query.data: logger.warning("handle_callback_audio_trigger_set_all: Data kh√¥ng h·ª£p l·ªá."); return
    telegram_id = query.from_user.id
    log_prefix = f"[AUDIOREVIEW_SET_ALL|UserTG:{telegram_id}]" 
    chat_id = query.message.chat_id if query.message else telegram_id
    message_to_edit = query.message
    set_id = None
    actual_user_id = None
    if chat_id != -1:
        try: await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.UPLOAD_DOCUMENT)
        except Exception as e_action: logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action upload: {e_action}")
    try: await query.answer()
    except Exception as e_ans: logger.warning(f"{log_prefix} L·ªói answer callback: {e_ans}")
    try:
        parts = query.data.split(":")
        if len(parts) < 4: raise ValueError("Callback data thi·∫øu set_id")
        set_id = int(parts[3])
        logger.info(f"{log_prefix} Y√™u c·∫ßu audio 'set_all' cho Set ID: {set_id}")
        logger.debug(f"{log_prefix} L·∫•y user_id...")
        user_info = get_user_by_telegram_id(telegram_id)
        actual_user_id = user_info['user_id']
        logger.debug(f"{log_prefix} L·∫•y ƒë∆∞·ª£c user_id: {actual_user_id}")
        card_ids = None
        loop = asyncio.get_running_loop()
        logger.debug(f"{log_prefix} G·ªçi service get_card_ids_for_audio...")
        card_ids = await loop.run_in_executor(None, get_card_ids_for_audio, actual_user_id, set_id, 'set_all', None)
        if card_ids is None: 
             await send_or_edit_message(context, chat_id, "‚ùå L·ªói: D·ªØ li·ªáu y√™u c·∫ßu kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói truy v·∫•n.", message_to_edit=message_to_edit)
             return
        elif not card_ids: 
            logger.warning(f"{log_prefix} Kh√¥ng c√≥ th·∫ª ƒë√£ h·ªçc trong b·ªô {set_id}.")
            kb_back = [[InlineKeyboardButton("üîô Quay l·∫°i", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:show_options:{set_id}")]]
            await send_or_edit_message(context, chat_id, "B·∫°n ch∆∞a h·ªçc t·ª´ n√†o trong b·ªô n√†y ƒë·ªÉ t·∫°o audio.", reply_markup=InlineKeyboardMarkup(kb_back), message_to_edit=message_to_edit)
            return
        await _initiate_audio_compilation_task(update, context, card_ids, set_id)
    except (ValueError, IndexError):
        logger.error(f"{log_prefix} Callback data l·ªói: {query.data}")
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói: D·ªØ li·ªáu callback kh√¥ng h·ª£p l·ªá.", message_to_edit=message_to_edit)
    except (UserNotFoundError, DatabaseError) as e_db:
        logger.error(f"{log_prefix} L·ªói DB/User khi x·ª≠ l√Ω: {e_db}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå L·ªói t·∫£i danh s√°ch th·∫ª t·ª´ database.", message_to_edit=message_to_edit)
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën: {e}", exc_info=True)
        await send_or_edit_message(context, chat_id, "‚ùå C√≥ l·ªói x·∫£y ra.", message_to_edit=message_to_edit)
async def _initiate_audio_compilation_task(update, context, card_ids, set_id):
    """
    H√†m n·ªôi b·ªô ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o file audio t·ªïng h·ª£p v√† g·ª≠i cho ng∆∞·ªùi d√πng.
    """
    user_id_tg = None
    if update.callback_query and update.callback_query.from_user: user_id_tg = update.callback_query.from_user.id
    elif update.effective_user: user_id_tg = update.effective_user.id
    if not user_id_tg: logger.error("[_initiate_audio_compilation_task] Kh√¥ng th·ªÉ x√°c ƒë·ªãnh telegram_id."); return
    chat_id_for_status = update.callback_query.message.chat_id if update.callback_query and update.callback_query.message else user_id_tg
    message_to_edit_status = update.callback_query.message if update.callback_query else None
    log_prefix = f"[_INITIATE_AUDIO_COMP|UserTG:{user_id_tg}|Set:{set_id}]"; logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu t·∫°o audio cho {len(card_ids)} th·∫ª.")
    status_message = None; set_title = f"B·ªô {set_id}"; output_filepath = None; loop = asyncio.get_running_loop()
    try: await context.bot.send_chat_action(chat_id=chat_id_for_status, action=ChatAction.UPLOAD_DOCUMENT)
    except Exception as e_action: logger.warning(f"{log_prefix} L·ªói g·ª≠i chat action upload: {e_action}")
    try:
        try:
            set_info_tuple = get_sets(set_id=set_id); set_info = set_info_tuple[0][0] if set_info_tuple and set_info_tuple[0] else None
            if set_info: set_title = set_info.get('title', set_title)
        except (SetNotFoundError, DatabaseError) as e_title: logger.warning(f"{log_prefix} L·ªói l·∫•y t√™n b·ªô: {e_title}. D√πng t√™n m·∫∑c ƒë·ªãnh.")
        escaped_title_status = html.escape(set_title); status_message_text = f"‚è≥ ƒêang t·∫°o audio cho {len(card_ids)} th·∫ª t·ª´ '**{escaped_title_status}**'... Xin ch·ªù m·ªôt l√°t nh√©!"
        status_message = await send_or_edit_message(context=context, chat_id=chat_id_for_status, text=status_message_text, parse_mode='Markdown', reply_markup=None, message_to_edit=message_to_edit_status)
        if not status_message: logger.error(f"{log_prefix} L·ªói g·ª≠i/s·ª≠a status.")
        conn = None; audio_contents = []
        try:
            conn = database_connect();
            if conn is None: raise DatabaseError("L·ªói k·∫øt n·ªëi DB.")
            cursor = conn.cursor(); placeholders = ','.join('?' * len(card_ids))
            sql_get_audio = f"SELECT back_audio_content FROM Flashcards WHERE flashcard_id IN ({placeholders})"
            cursor.execute(sql_get_audio, card_ids)
            audio_contents = [row[0] for row in cursor.fetchall() if row and row[0] and row[0].strip()]
            logger.info(f"{log_prefix} T√¨m th·∫•y {len(audio_contents)} n·ªôi dung audio c·∫ßn gh√©p.")
        except (sqlite3.Error, DatabaseError) as e_db_content:
            logger.error(f"{log_prefix} L·ªói DB l·∫•y audio content: {e_db_content}", exc_info=True); await send_or_edit_message(context=context, chat_id=chat_id_for_status, text="‚ùå L·ªói l·∫•y d·ªØ li·ªáu audio t·ª´ database.", message_to_edit=status_message); return
        finally:
            if conn: conn.close()
        if not audio_contents:
            logger.warning(f"{log_prefix} Kh√¥ng c√≥ audio content ƒë·ªÉ t·∫°o file."); await send_or_edit_message(context=context, chat_id=chat_id_for_status, text="‚ÑπÔ∏è Kh√¥ng c√≥ n·ªôi dung audio n√†o trong c√°c th·∫ª ƒë∆∞·ª£c ch·ªçn.", message_to_edit=status_message); return
        logger.info(f"{log_prefix} G·ªçi generate_review_audio_compilation...")
        output_filepath = await generate_review_audio_compilation(audio_contents, pause_ms=2000)
        final_status_text = "‚ùå L·ªói t·∫°o audio."; file_sent_successfully = False
        if output_filepath:
            file_exists = await loop.run_in_executor(None, os.path.exists, output_filepath)
            if file_exists:
                logger.info(f"{log_prefix} T·∫°o audio OK: {output_filepath}. G·ª≠i file...")
                try:
                    safe_title_file = "".join(c for c in set_title if c.isalnum() or c in ('_', '-')).strip() or f"set_{set_id}"
                    with open(output_filepath, 'rb') as audio_file_obj:
                        await context.bot.send_audio(chat_id=user_id_tg, audio=audio_file_obj, title=f"Audio_{safe_title_file}.mp3", caption=f"Audio √¥n t·∫≠p {len(audio_contents)} th·∫ª t·ª´ b·ªô '{html.escape(set_title)}'.")
                    logger.info(f"{log_prefix} G·ª≠i file OK."); final_status_text = ""; file_sent_successfully = True
                except (Forbidden, BadRequest, TelegramError) as send_err_tg:
                    logger.error(f"{log_prefix} L·ªói Telegram g·ª≠i file audio: {send_err_tg}"); final_status_text = f"‚ùå T·∫°o OK nh∆∞ng l·ªói g·ª≠i file: {send_err_tg}"
                except Exception as send_err:
                    logger.error(f"{log_prefix} L·ªói kh√°c g·ª≠i file audio: {send_err}", exc_info=True); final_status_text = f"‚ùå T·∫°o OK nh∆∞ng l·ªói g·ª≠i file: {send_err}"
            else: logger.error(f"{log_prefix} L·ªói l·∫°: Service b√°o OK nh∆∞ng file kh√¥ng t·ªìn t·∫°i."); final_status_text = "‚ùå L·ªói: File audio k·∫øt qu·∫£ kh√¥ng ƒë∆∞·ª£c t·∫°o ra."
        else: logger.error(f"{log_prefix} T·∫°o audio th·∫•t b·∫°i (service tr·∫£ v·ªÅ None)."); final_status_text = "‚ùå L·ªói khi t·∫°o file audio t·ªïng h·ª£p."
        if final_status_text and status_message: await send_or_edit_message(context=context, chat_id=chat_id_for_status, text=final_status_text, message_to_edit=status_message)
        elif final_status_text: await send_or_edit_message(context=context, chat_id=chat_id_for_status, text=final_status_text)
        elif status_message and file_sent_successfully:
             try: await context.bot.delete_message(chat_id=status_message.chat_id, message_id=status_message.message_id); logger.info(f"{log_prefix} ƒê√£ x√≥a tin nh·∫Øn tr·∫°ng th√°i.")
             except Exception as e_del: logger.warning(f"{log_prefix} L·ªói x√≥a tin nh·∫Øn tr·∫°ng th√°i: {e_del}")
    except Exception as e_compile:
        logger.exception(f"{log_prefix} L·ªói trong qu√° tr√¨nh t·∫°o/g·ª≠i audio: {e_compile}"); await send_or_edit_message(context=context, chat_id=chat_id_for_status, text="‚ùå L·ªói h·ªá th·ªëng khi t·∫°o audio.", message_to_edit=status_message)
    finally:
        if output_filepath:
            def remove_if_exists_sync_final(path):
                if os.path.exists(path):
                    try: os.remove(path); return True
                    except Exception as inner_remove_err: logger.error(f"[SYNC_REMOVE_FINAL_AUDIO] L·ªói x√≥a file {path}: {inner_remove_err}"); return False
                return False
            try:
                removed = await loop.run_in_executor(None, remove_if_exists_sync_final, output_filepath)
                if removed: logger.info(f"{log_prefix} ƒê√£ x√≥a file t·∫°m audio t·ªïng h·ª£p: {output_filepath}")
            except Exception as e_remove: logger.error(f"{log_prefix} L·ªói x√≥a file t·∫°m audio t·ªïng h·ª£p {output_filepath}: {e_remove}")
def register_handlers(app: Application):
    """ƒêƒÉng k√Ω c√°c handler cho ch·ª©c nƒÉng t·∫°o audio √¥n t·∫≠p."""
    app.add_handler(CommandHandler("flashcard_audioreview", handle_command_audio_review))
    prefix = AUDIO_REVIEW_CALLBACK_PREFIX
    app.add_handler(CallbackQueryHandler(handle_callback_audio_choose_set, pattern=f"^{prefix}:choose_set$"))
    app.add_handler(CallbackQueryHandler(handle_callback_audio_show_options, pattern=f"^{prefix}:show_options:"))
    app.add_handler(CallbackQueryHandler(handle_callback_audio_trigger_set_all, pattern=f"^{prefix}:trigger:set_all:"))
    app.add_handler(CallbackQueryHandler(handle_callback_audio_show_n_options, pattern=f"^{prefix}:show_n_options:"))
    app.add_handler(CallbackQueryHandler(handle_callback_audio_select_n, pattern=f"^{prefix}:trigger:(set_recent|set_oldest):"))
    logger.info("ƒê√£ ƒëƒÉng k√Ω c√°c handler cho module Audio Review.")
