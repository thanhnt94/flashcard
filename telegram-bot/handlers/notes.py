# File: flashcard-telegram-bot/handlers/notes.py
"""
Module ch·ª©a c√°c handlers cho ch·ª©c nƒÉng qu·∫£n l√Ω ghi ch√∫ (notes) c·ªßa flashcard.
(S·ª≠a l·∫ßn 1: Th√™m t√≠nh nƒÉng ƒë√≠nh k√®m 1 ·∫£nh v√†o note).
(S·ª≠a l·∫ßn 2: S·ª≠a l·ªói TypeError khi g·ªçi send_or_edit_message).
(S·ª≠a l·∫ßn 3: S·ª≠a l·ªói Pylance "is not defined" v√† register_handlers).
(S·ª≠a l·∫ßn 4: Thi·∫øt k·∫ø l·∫°i lu·ªìng ConversationHandler ƒë·ªÉ cho ph√©p g·ª≠i text ho·∫∑c ·∫£nh+caption tr·ª±c ti·∫øp).
(S·ª≠a l·∫ßn 5: C·∫≠p nh·∫≠t th√¥ng b√°o l∆∞u note ƒë·ªÉ hi·ªÉn th·ªã n·ªôi dung v√† th√™m n√∫t s·ª≠a).
(S·ª≠a l·∫ßn 6: B·ªè tin nh·∫Øn x√°c nh·∫≠n ri√™ng, g·ªçi _display_card_backside ƒë·ªÉ hi·ªÉn th·ªã note tr√™n m·∫∑t sau th·∫ª).
"""

import logging
import html
import os
import uuid

from telegram import Update
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import Application
from telegram.ext import ConversationHandler
from telegram.ext import MessageHandler
from telegram.ext import CommandHandler
from telegram.ext import CallbackQueryHandler
from telegram.ext import filters
from telegram.error import TelegramError, BadRequest
from telegram.constants import ParseMode

from config import NOTE_IMAGES_DIR, DEFAULT_LEARNING_MODE, MODE_REVIEW_ALL_DUE
GET_NOTE_INPUT = 0

from database.query_note import get_note_by_card_and_user, add_note_for_user, update_note_by_id, get_flashcard_id_from_note, delete_note_image_path
from database.query_user import get_user_by_telegram_id
from database.query_progress import get_progress_id_by_card
from handlers import learning_session # Quan tr·ªçng: ƒê·∫£m b·∫£o learning_session ƒë∆∞·ª£c import

from utils.helpers import send_or_edit_message, escape_md_v2
from utils.exceptions import DatabaseError, UserNotFoundError, DuplicateError, ProgressNotFoundError

logger = logging.getLogger(__name__)

# --- C√°c h√†m x·ª≠ l√Ω Note ---
# (handle_callback_show_note, start_add_note_for_user_conversation,
#  start_update_note_by_id_conversation, _handle_get_note_input
#  gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n notes_handler_update_v5)

async def handle_callback_show_note(update, context):
    # Gi·ªØ nguy√™n logic t·ª´ notes_handler_update_v5
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        logger.warning("handle_callback_show_note nh·∫≠n callback query kh√¥ng h·ª£p l·ªá.")
        return

    telegram_id = query.from_user.id
    log_prefix = "[NOTES_SHOW|UserTG:{}]".format(telegram_id)
    chat_id_to_use = telegram_id

    back_audio_id_to_delete = context.user_data.pop("last_back_audio_id", None)
    if back_audio_id_to_delete:
        logger.info("{}: ƒêang th·ª≠ x√≥a last_back_audio_id: {}".format(log_prefix, back_audio_id_to_delete))
        try:
            chat_id_of_audio = query.message.chat_id if query.message else telegram_id
            await context.bot.delete_message(chat_id=chat_id_of_audio, message_id=back_audio_id_to_delete)
            logger.info("{}: ƒê√£ x√≥a audio m·∫∑t sau th√†nh c√¥ng.".format(log_prefix))
        except Exception as e_del_audio:
            logger.warning("{}: L·ªói khi x√≥a audio m·∫∑t sau {}: {}".format(log_prefix, back_audio_id_to_delete, e_del_audio))

    try:
        await query.answer()
    except Exception as e_ans:
        logger.warning("{}: L·ªói answer callback: {}".format(log_prefix, e_ans))

    flashcard_id = None
    actual_user_id = None
    try:
        flashcard_id_str = query.data.split(":")[1]
        flashcard_id = int(flashcard_id_str)
        logger.info("{}: Y√™u c·∫ßu xem note cho Card ID: {}".format(log_prefix, flashcard_id))

        user_info = get_user_by_telegram_id(telegram_id)
        if not user_info or 'user_id' not in user_info:
            raise UserNotFoundError(identifier=telegram_id)
        actual_user_id = user_info['user_id']
        logger.debug("{}: L·∫•y ƒë∆∞·ª£c user_id: {}".format(log_prefix, actual_user_id))

        note_data = get_note_by_card_and_user(flashcard_id, actual_user_id)

        if note_data and isinstance(note_data, dict):
            note_content = note_data.get('note', '')
            image_path_relative = note_data.get('image_path')

            if not note_content and not image_path_relative:
                logger.debug("{}: Ghi ch√∫ r·ªóng (c·∫£ text v√† ·∫£nh).".format(log_prefix))
                await context.bot.send_message(chat_id=chat_id_to_use, text="B·∫°n ch∆∞a c√≥ ghi ch√∫ (ho·∫∑c ghi ch√∫ tr·ªëng) cho th·∫ª n√†y.")
                return

            logger.debug("{}: T√¨m th·∫•y ghi ch√∫. Text: '{}...', Image: '{}'. ƒêang g·ª≠i v√†o chat ri√™ng...".format(
                log_prefix, note_content[:20] if note_content else "None", image_path_relative
            ))

            if image_path_relative:
                full_image_path = os.path.join(NOTE_IMAGES_DIR, image_path_relative)
                if os.path.exists(full_image_path):
                    try:
                        with open(full_image_path, 'rb') as photo_file:
                            await context.bot.send_photo(chat_id=chat_id_to_use, photo=photo_file)
                        logger.info("{}: ƒê√£ g·ª≠i ·∫£nh c·ªßa note v√†o chat ri√™ng.".format(log_prefix))
                    except TelegramError as e_send_photo:
                        logger.error("{}: L·ªói Telegram khi g·ª≠i ·∫£nh note: {}".format(log_prefix, e_send_photo))
                        await context.bot.send_message(chat_id=chat_id_to_use, text="L·ªói khi t·∫£i ·∫£nh c·ªßa ghi ch√∫.")
                    except Exception as e_photo:
                        logger.error("{}: L·ªói kh√°c khi g·ª≠i ·∫£nh note: {}".format(log_prefix, e_photo))
                else:
                    logger.warning("{}: File ·∫£nh '{}' kh√¥ng t·ªìn t·∫°i.".format(log_prefix, full_image_path))

            if note_content:
                note_text_display = "üìù **Ghi ch√∫ c·ªßa b·∫°n cho th·∫ª [{}]**:\n\n{}".format(flashcard_id, html.escape(note_content))
                try:
                    await context.bot.send_message(
                        chat_id=chat_id_to_use,
                        text=note_text_display,
                        parse_mode='Markdown'
                    )
                    logger.info("{}: ƒê√£ g·ª≠i text c·ªßa note v√†o chat ri√™ng.".format(log_prefix))
                except TelegramError as e_send_text:
                    logger.error("{}: L·ªói Telegram khi g·ª≠i text note: {}".format(log_prefix, e_send_text))
                    if not image_path_relative:
                         await context.bot.send_message(chat_id=chat_id_to_use, text="L·ªói khi hi·ªÉn th·ªã n·ªôi dung ghi ch√∫.")
            elif not image_path_relative:
                 pass
        else:
            logger.debug("{}: Kh√¥ng t√¨m th·∫•y ghi ch√∫ n√†o.".format(log_prefix))
            await context.bot.send_message(chat_id=chat_id_to_use, text="B·∫°n ch∆∞a c√≥ ghi ch√∫ cho th·∫ª n√†y.")

    except (ValueError, IndexError):
        logger.error("{}: Callback data kh√¥ng h·ª£p l·ªá: {}".format(log_prefix, query.data))
        await context.bot.send_message(chat_id_to_use, text="‚ùå L·ªói: D·ªØ li·ªáu th·∫ª kh√¥ng h·ª£p l·ªá.")
    except UserNotFoundError:
        logger.error("{}: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng telegram_id {}".format(log_prefix, telegram_id))
        await context.bot.send_message(chat_id_to_use, text="‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.")
    except DatabaseError as e_db:
        logger.error("{}: L·ªói DB khi x·ª≠ l√Ω show_note: {}".format(log_prefix, e_db))
        await context.bot.send_message(chat_id_to_use, text="‚ùå L·ªói t·∫£i d·ªØ li·ªáu ghi ch√∫.")
    except Exception as e:
        logger.error("{}: L·ªói kh√¥ng mong mu·ªën khi hi·ªÉn th·ªã note: {}".format(log_prefix, e), exc_info=True)
        await context.bot.send_message(chat_id_to_use, text="‚ùå C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã ghi ch√∫.")


async def start_add_note_for_user_conversation(update, context):
    query = update.callback_query
    await query.answer()
    telegram_id = query.from_user.id
    log_prefix = f"[NOTES_START_ADD|UserTG:{telegram_id}]"
    logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu conversation th√™m note, data: {query.data}")

    flashcard_id = int(query.data.split(":")[1])
    context.user_data["telegram_id"] = telegram_id
    context.user_data["note_action"] = "add"
    context.user_data["note_flashcard_id"] = flashcard_id
    context.user_data["original_card_back_message_id"] = query.message.message_id
    context.user_data["original_card_back_chat_id"] = query.message.chat_id

    prompt_text = "‚úèÔ∏è Vui l√≤ng g·ª≠i n·ªôi dung ghi ch√∫.\nB·∫°n c√≥ th·ªÉ g·ª≠i text thu·∫ßn, ho·∫∑c g·ª≠i m·ªôt ·∫£nh k√®m theo ch√∫ th√≠ch (caption s·∫Ω l√† n·ªôi dung ghi ch√∫)."
    sent_prompt_msg = await send_or_edit_message(
        context,
        query.message.chat_id,
        prompt_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´ H·ªßy", callback_data="cancel_note_input")]]),
        message_to_edit=query.message
    )
    if sent_prompt_msg:
        context.user_data['note_prompt_message_id'] = sent_prompt_msg.message_id
        context.user_data['note_prompt_chat_id'] = sent_prompt_msg.chat_id
        return GET_NOTE_INPUT
    else:
        logger.error(f"{log_prefix} L·ªói g·ª≠i/s·ª≠a tin nh·∫Øn y√™u c·∫ßu nh·∫≠p note.")
        context.user_data.clear()
        return ConversationHandler.END

async def start_update_note_by_id_conversation(update, context):
    query = update.callback_query
    await query.answer()
    telegram_id = query.from_user.id
    log_prefix = f"[NOTES_START_EDIT|UserTG:{telegram_id}]"
    logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu conversation s·ª≠a note, data: {query.data}")

    note_id_to_edit = int(query.data.split(":")[1])
    context.user_data["telegram_id"] = telegram_id
    context.user_data["note_action"] = "edit"
    context.user_data["note_id_to_edit"] = note_id_to_edit
    context.user_data["original_card_back_message_id"] = query.message.message_id
    context.user_data["original_card_back_chat_id"] = query.message.chat_id

    try:
        user_db_id = get_user_by_telegram_id(telegram_id)['user_id']
        flashcard_id_from_note = get_flashcard_id_from_note(note_id_to_edit)
        if not flashcard_id_from_note:
            await query.message.reply_text("L·ªói: Kh√¥ng t√¨m th·∫•y th·∫ª li√™n quan.")
            context.user_data.clear()
            return ConversationHandler.END

        current_note_data = get_note_by_card_and_user(flashcard_id_from_note, user_db_id)
        if not current_note_data:
            await query.message.reply_text("L·ªói: Kh√¥ng t√¨m th·∫•y ghi ch√∫ ƒë·ªÉ s·ª≠a.")
            context.user_data.clear()
            return ConversationHandler.END

        context.user_data["note_flashcard_id"] = current_note_data.get("flashcard_id")
        context.user_data["current_note_text"] = current_note_data.get("note", "")
        context.user_data["current_note_image_path"] = current_note_data.get("image_path")

        current_text_display = html.escape(context.user_data["current_note_text"])
        prompt_lines = [f"‚úèÔ∏è Ghi ch√∫ hi·ªán t·∫°i:"]
        if context.user_data["current_note_image_path"]:
            # S·ª≠a l·∫ßn 6: Th√¥ng b√°o s·∫Ω hi·ªÉn th·ªã l·∫°i m·∫∑t sau th·∫ª, k√®m ·∫£nh n·∫øu c√≥
            prompt_lines.append(f"(Hi·ªán t·∫°i c√≥ ·∫£nh ƒë√≠nh k√®m. G·ª≠i ·∫£nh m·ªõi s·∫Ω thay th·∫ø, g·ª≠i text kh√¥ng s·∫Ω gi·ªØ l·∫°i ·∫£nh n·∫øu ch·ªâ s·ª≠a text.)")
        prompt_lines.append(f"```\n{current_text_display}\n```")
        prompt_lines.append("Nh·∫≠p n·ªôi dung m·ªõi (text ho·∫∑c ·∫£nh k√®m caption).")

        prompt_text = "\n".join(prompt_lines)
        sent_prompt_msg = await send_or_edit_message(
            context, query.message.chat_id, prompt_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üö´ H·ªßy", callback_data="cancel_note_input")]]),
            parse_mode='Markdown', message_to_edit=query.message
        )
        if sent_prompt_msg:
            context.user_data['note_prompt_message_id'] = sent_prompt_msg.message_id
            context.user_data['note_prompt_chat_id'] = sent_prompt_msg.chat_id
            return GET_NOTE_INPUT
        else:
            context.user_data.clear()
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói khi chu·∫©n b·ªã s·ª≠a note: {e}", exc_info=True)
        await query.message.reply_text("L·ªói khi t·∫£i th√¥ng tin ghi ch√∫.")
        context.user_data.clear()
        return ConversationHandler.END

async def _handle_get_note_input(update, context):
    # Gi·ªØ nguy√™n logic t·ª´ notes_handler_update_v4
    telegram_id = update.effective_user.id
    log_prefix = f"[NOTES_GET_INPUT|UserTG:{telegram_id}]"
    note_text_to_save = None
    image_path_to_save = None
    delete_current_photo_if_editing = False

    prompt_message_id = context.user_data.get('note_prompt_message_id')
    prompt_chat_id = context.user_data.get('note_prompt_chat_id')

    if update.message.text:
        note_text_to_save = update.message.text
        logger.info(f"{log_prefix} Nh·∫≠n ƒë∆∞·ª£c text: '{note_text_to_save[:30]}...'")
        if context.user_data.get("note_action") == "edit":
            # N·∫øu ch·ªâ g·ª≠i text khi s·ª≠a, gi·ªØ l·∫°i ·∫£nh c≈© (n·∫øu c√≥)
            image_path_to_save = context.user_data.get("current_note_image_path")
    elif update.message.photo:
        logger.info(f"{log_prefix} Nh·∫≠n ƒë∆∞·ª£c ·∫£nh.")
        note_text_to_save = update.message.caption
        if note_text_to_save:
            logger.info(f"{log_prefix} Caption ·∫£nh: '{note_text_to_save[:30]}...'")

        photo_file = await update.message.photo[-1].get_file()
        file_extension = os.path.splitext(photo_file.file_path)[1] if photo_file.file_path else '.jpg'
        unique_filename = f"{uuid.uuid4().hex}{file_extension}"
        save_path = os.path.join(NOTE_IMAGES_DIR, unique_filename)
        try:
            os.makedirs(NOTE_IMAGES_DIR, exist_ok=True)
            await photo_file.download_to_drive(save_path)
            logger.info(f"{log_prefix} ƒê√£ l∆∞u ·∫£nh v√†o: {save_path}")
            image_path_to_save = unique_filename
            if context.user_data.get("note_action") == "edit" and context.user_data.get("current_note_image_path"):
                if context.user_data.get("current_note_image_path") != image_path_to_save: # Ch·ªâ x√≥a n·∫øu ·∫£nh m·ªõi kh√°c ·∫£nh c≈©
                    delete_current_photo_if_editing = True
        except Exception as e:
            logger.error(f"{log_prefix} L·ªói khi t·∫£i ho·∫∑c l∆∞u ·∫£nh: {e}", exc_info=True)
            await update.message.reply_text("L·ªói khi x·ª≠ l√Ω ·∫£nh. Ghi ch√∫ s·∫Ω ƒë∆∞·ª£c l∆∞u kh√¥ng k√®m ·∫£nh (n·∫øu c√≥ text).")
            if context.user_data.get("note_action") == "edit":
                image_path_to_save = context.user_data.get("current_note_image_path")
            else:
                image_path_to_save = None
    else:
        await update.message.reply_text("Vui l√≤ng g·ª≠i text ho·∫∑c ·∫£nh k√®m caption. Ho·∫∑c /cancel ƒë·ªÉ h·ªßy.")
        return GET_NOTE_INPUT

    try:
        await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
    except Exception:
        pass

    context.user_data['note_text_to_save'] = note_text_to_save
    context.user_data['note_image_path_to_save'] = image_path_to_save
    if delete_current_photo_if_editing:
         context.user_data['delete_existing_image_file_on_save'] = context.user_data.get("current_note_image_path")

    return await _save_note_final(update, context, message_to_delete_id=prompt_message_id, chat_id_of_message_to_delete=prompt_chat_id)


async def _save_note_final(update, context, message_to_delete_id=None, chat_id_of_message_to_delete=None):
    """S·ª≠a l·∫ßn 6: Kh√¥ng g·ª≠i tin nh·∫Øn x√°c nh·∫≠n ri√™ng, g·ªçi _display_card_backside."""
    telegram_id = context.user_data.get("telegram_id", update.effective_user.id)
    log_prefix = f"[NOTES_SAVE_FINAL|UserTG:{telegram_id}]"
    logger.info(f"{log_prefix} B·∫Øt ƒë·∫ßu l∆∞u ghi ch√∫ cu·ªëi c√πng.")

    note_action = context.user_data.get("note_action")
    flashcard_id = context.user_data.get("note_flashcard_id")
    note_id_to_edit = context.user_data.get("note_id_to_edit")
    note_text_saved = context.user_data.get("note_text_to_save")
    image_path_saved = context.user_data.get("note_image_path_to_save")
    old_image_file_to_delete_on_server = context.user_data.get("delete_existing_image_file_on_save")

    actual_user_id = None
    note_save_success = False
    user_info = None

    try:
        user_info = get_user_by_telegram_id(telegram_id)
        if not user_info or 'user_id' not in user_info:
            raise UserNotFoundError(identifier=telegram_id)
        actual_user_id = user_info['user_id']

        final_note_text_to_db = note_text_saved if note_text_saved is not None else ""
        final_image_path_to_db = image_path_saved

        if note_action == "add":
            newly_added_note_id = add_note_for_user(flashcard_id, actual_user_id, final_note_text_to_db, final_image_path_to_db)
            if newly_added_note_id:
                note_save_success = True
                logger.info(f"{log_prefix} Th√™m note ID {newly_added_note_id} cho card {flashcard_id} (·∫¢nh: {final_image_path_to_db})")
            else:
                note_save_success = False
                logger.error(f"{log_prefix} H√†m add_note_for_user kh√¥ng tr·∫£ v·ªÅ ID h·ª£p l·ªá.")

        elif note_action == "edit":
            if old_image_file_to_delete_on_server and old_image_file_to_delete_on_server != final_image_path_to_db:
                old_image_full_path = os.path.join(NOTE_IMAGES_DIR, old_image_file_to_delete_on_server)
                if os.path.exists(old_image_full_path):
                    try:
                        os.remove(old_image_full_path)
                        logger.info(f"{log_prefix} ƒê√£ x√≥a file ·∫£nh c≈© tr√™n server: {old_image_full_path}")
                    except Exception as e_del_old_file:
                        logger.error(f"{log_prefix} L·ªói x√≥a file ·∫£nh c≈© {old_image_full_path}: {e_del_old_file}")

            rows_affected = update_note_by_id(note_id_to_edit, final_note_text_to_db, final_image_path_to_db)
            if rows_affected > 0:
                note_save_success = True
                logger.info(f"{log_prefix} S·ª≠a note ID {note_id_to_edit} (·∫¢nh: {final_image_path_to_db})")
            else:
                note_save_success = True # Coi nh∆∞ th√†nh c√¥ng n·∫øu kh√¥ng c√≥ g√¨ thay ƒë·ªïi
                logger.warning(f"{log_prefix} S·ª≠a note ID {note_id_to_edit} kh√¥ng ·∫£nh h∆∞·ªüng d√≤ng n√†o ho·∫∑c kh√¥ng c√≥ g√¨ thay ƒë·ªïi.")
        else:
            raise ValueError(f"H√†nh ƒë·ªông kh√¥ng x√°c ƒë·ªãnh: {note_action}")

    except (UserNotFoundError, DatabaseError, DuplicateError, ValueError) as e_save:
        logger.error(f"{log_prefix} L·ªói khi l∆∞u note: {e_save}", exc_info=True)
        original_chat_id_val = context.user_data.get("original_card_back_chat_id") # ƒê·ªïi t√™n bi·∫øn
        if original_chat_id_val:
            try:
                await context.bot.send_message(chat_id=original_chat_id_val, text=f"‚ùå L·ªói khi l∆∞u ghi ch√∫: {e_save}")
            except Exception as e_send_err:
                logger.error(f"{log_prefix} L·ªói g·ª≠i tin nh·∫Øn l·ªói l∆∞u note v√†o chat g·ªëc: {e_send_err}")
        note_save_success = False
    except Exception as e_final:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën khi l∆∞u note: {e_final}", exc_info=True)
        original_chat_id_val = context.user_data.get("original_card_back_chat_id") # ƒê·ªïi t√™n bi·∫øn
        if original_chat_id_val:
            try:
                await context.bot.send_message(chat_id=original_chat_id_val, text="‚ùå L·ªói h·ªá th·ªëng khi l∆∞u ghi ch√∫.")
            except Exception as e_send_err:
                logger.error(f"{log_prefix} L·ªói g·ª≠i tin nh·∫Øn l·ªói h·ªá th·ªëng v√†o chat g·ªëc: {e_send_err}")
        note_save_success = False

    if message_to_delete_id and chat_id_of_message_to_delete:
        try:
            await context.bot.delete_message(chat_id=chat_id_of_message_to_delete, message_id=message_to_delete_id)
            logger.debug(f"{log_prefix} ƒê√£ x√≥a tin nh·∫Øn prompt ID: {message_to_delete_id} trong chat {chat_id_of_message_to_delete}")
        except Exception as e_del_prompt_final:
            logger.warning(f"{log_prefix} L·ªói x√≥a tin nh·∫Øn prompt cu·ªëi c√πng: {e_del_prompt_final}")

    if flashcard_id and actual_user_id and user_info:
        progress_id = None
        try:
            progress_id = get_progress_id_by_card(actual_user_id, flashcard_id)
        except Exception as e_get_prog:
            logger.error(f"{log_prefix} L·ªói khi l·∫•y progress_id cho flashcard {flashcard_id}: {e_get_prog}")

        if progress_id:
            logger.info(f"{log_prefix} L∆∞u note xong (th√†nh c√¥ng: {note_save_success}). G·ªçi _display_card_backside cho progress_id {progress_id}.")
            update_for_display = update if isinstance(update, Update) else None
            if hasattr(update, 'callback_query') and update.callback_query:
                update_for_display = update.callback_query

            if hasattr(learning_session, '_display_card_backside'):
                 await learning_session._display_card_backside(update_for_display, context, progress_id, user_info)
            else:
                logger.error(f"{log_prefix} Kh√¥ng t√¨m th·∫•y h√†m learning_session._display_card_backside.")
                original_chat_id_val = context.user_data.get("original_card_back_chat_id") # ƒê·ªïi t√™n bi·∫øn
                if original_chat_id_val:
                    await context.bot.send_message(chat_id=original_chat_id_val, text="ƒê√£ x·ª≠ l√Ω ghi ch√∫. Vui l√≤ng l·∫≠t l·∫°i th·∫ª ho·∫∑c ti·∫øp t·ª•c.")
        elif note_save_success:
            logger.warning(f"{log_prefix} L∆∞u note th√†nh c√¥ng nh∆∞ng kh√¥ng c√≥ progress_id. G·ª≠i th√¥ng b√°o ƒë∆°n gi·∫£n.")
            original_chat_id_val = context.user_data.get("original_card_back_chat_id") # ƒê·ªïi t√™n bi·∫øn
            if original_chat_id_val:
                 await context.bot.send_message(chat_id=original_chat_id_val, text="‚úÖ Ghi ch√∫ ƒë√£ ƒë∆∞·ª£c l∆∞u.")
    else:
        logger.warning(f"{log_prefix} Thi·∫øu flashcard_id, actual_user_id ho·∫∑c user_info. Kh√¥ng th·ªÉ g·ªçi _display_card_backside.")
        original_chat_id_val = context.user_data.get("original_card_back_chat_id") # ƒê·ªïi t√™n bi·∫øn
        if original_chat_id_val:
            final_reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚ñ∂Ô∏è Ti·∫øp t·ª•c h·ªçc", callback_data="continue")]])
            await context.bot.send_message(
                chat_id=original_chat_id_val,
                text="ƒê√£ x·ª≠ l√Ω ghi ch√∫. Ch·ªçn h√†nh ƒë·ªông ti·∫øp theo:",
                reply_markup=final_reply_markup
            )

    context.user_data.clear()
    logger.info(f"{log_prefix} K·∫øt th√∫c conversation l∆∞u note.")
    return ConversationHandler.END

async def _handle_cancel_note_input(update, context):
    # Gi·ªØ nguy√™n logic t·ª´ notes_handler_update_v6
    telegram_id = update.effective_user.id
    log_prefix = f"[NOTES_CANCEL|UserTG:{telegram_id}]"
    logger.info(f"{log_prefix} Ng∆∞·ªùi d√πng h·ªßy thao t√°c ghi ch√∫.")

    prompt_message_id = context.user_data.get('note_prompt_message_id')
    prompt_chat_id = context.user_data.get('note_prompt_chat_id')
    original_card_back_chat_id = context.user_data.get("original_card_back_chat_id")
    flashcard_id_for_return = context.user_data.get("note_flashcard_id")

    if update.callback_query:
        query = update.callback_query
        try: await query.answer()
        except Exception: pass
        if query.message and prompt_message_id == query.message.message_id and prompt_chat_id == query.message.chat_id:
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except Exception: pass
    elif update.message:
        try:
            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=update.message.message_id)
        except Exception: pass
        if prompt_message_id and prompt_chat_id:
             try:
                await context.bot.delete_message(chat_id=prompt_chat_id, message_id=prompt_message_id)
             except Exception: pass

    user_info = None
    try: user_info = get_user_by_telegram_id(telegram_id)
    except Exception: logger.error(f"{log_prefix} L·ªói l·∫•y user_info khi h·ªßy.")

    if flashcard_id_for_return and user_info and user_info.get('user_id'):
        logger.info(f"{log_prefix} H·ªßy note. Hi·ªÉn th·ªã l·∫°i m·∫∑t sau th·∫ª {flashcard_id_for_return}.")
        actual_user_id = user_info.get('user_id')
        progress_id = get_progress_id_by_card(actual_user_id, flashcard_id_for_return)
        if progress_id:
            update_for_display = update if isinstance(update, Update) else (update.callback_query if hasattr(update, 'callback_query') else update.message)
            if hasattr(learning_session, '_display_card_backside'):
                await learning_session._display_card_backside(update_for_display, context, progress_id, user_info)
            else:
                logger.error(f"{log_prefix} learning_session._display_card_backside kh√¥ng t√¨m th·∫•y.")
                if original_card_back_chat_id:
                     await context.bot.send_message(chat_id=original_card_back_chat_id, text="ƒê√£ h·ªßy thao t√°c ghi ch√∫. Vui l√≤ng l·∫≠t l·∫°i th·∫ª ho·∫∑c ti·∫øp t·ª•c.")
        else:
            if original_card_back_chat_id:
                await context.bot.send_message(chat_id=original_card_back_chat_id, text="ƒê√£ h·ªßy thao t√°c ghi ch√∫. Kh√¥ng t√¨m th·∫•y th·∫ª ƒë·ªÉ hi·ªÉn th·ªã l·∫°i.")
    else:
        logger.warning(f"{log_prefix} H·ªßy note nh∆∞ng kh√¥ng ƒë·ªß th√¥ng tin ƒë·ªÉ hi·ªÉn th·ªã l·∫°i m·∫∑t sau.")
        target_chat_id_for_continue = original_card_back_chat_id or (update.effective_chat.id if update.effective_chat else telegram_id)
        if target_chat_id_for_continue:
            review_mode = context.user_data.get('review_mode', DEFAULT_LEARNING_MODE)
            continue_callback = "review_all" if review_mode == MODE_REVIEW_ALL_DUE else "continue"
            final_reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚ñ∂Ô∏è Ti·∫øp t·ª•c h·ªçc", callback_data=continue_callback)]])
            await context.bot.send_message(
                chat_id=target_chat_id_for_continue,
                text="ƒê√£ h·ªßy ghi ch√∫. Ch·ªçn h√†nh ƒë·ªông:",
                reply_markup=final_reply_markup
            )

    context.user_data.clear()
    logger.info(f"{log_prefix} K·∫øt th√∫c conversation sau khi h·ªßy.")
    return ConversationHandler.END

note_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(start_add_note_for_user_conversation, pattern=r"^add_note_for_user:"),
        CallbackQueryHandler(start_update_note_by_id_conversation, pattern=r"^update_note_by_id:")
    ],
    states={
        GET_NOTE_INPUT: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, _handle_get_note_input),
            MessageHandler(filters.PHOTO, _handle_get_note_input),
            MessageHandler(filters.ALL & ~(filters.TEXT | filters.PHOTO | filters.COMMAND), _handle_get_note_input)
        ]
    },
    fallbacks=[
        CommandHandler("cancel", _handle_cancel_note_input),
        CallbackQueryHandler(_handle_cancel_note_input, pattern='^cancel_note_input$')
    ],
    name="note_conversation_v4", # Gi·ªØ t√™n v4 v√¨ c·∫•u tr√∫c state v·∫´n v·∫≠y
    persistent=False,
    per_message=False
)

def register_handlers(app: Application):
    logger.info("--- MODULE: ƒêƒÉng k√Ω handlers cho Notes (Lu·ªìng ·∫£nh+text, t√≠ch h·ª£p hi·ªÉn th·ªã) ---")
    app.add_handler(note_conv_handler)
    app.add_handler(CallbackQueryHandler(handle_callback_show_note, pattern=r"^show_note:"))
    logger.info("ƒê√£ ƒëƒÉng k√Ω handler cho Conversation (Note ·∫£nh+text) v√† hi·ªÉn th·ªã Note.")

