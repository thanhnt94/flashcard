# File: flashcard-telegram-bot/main.py
"""
ƒêi·ªÉm kh·ªüi ch·∫°y ch√≠nh (Entry Point) cho Telegram Flashcard Bot.
Kh·ªüi t·∫°o ·ª©ng d·ª•ng, ƒëƒÉng k√Ω c√°c handlers v√† ch·∫°y bot b·∫•t ƒë·ªìng b·ªô.
S·ª≠ d·ª•ng h·ªá th·ªëng ƒëƒÉng k√Ω handler module h√≥a.
ƒê√£ c·∫≠p nh·∫≠t danh s√°ch l·ªánh bot.
(S·ª≠a l·∫ßn 2: Th√™m l√™n l·ªãch cho run_morning_brief_job)
(S·ª≠a l·∫ßn 3: X√≥a b·ªè run_due_reminders_job)
"""
import logging
import asyncio
from datetime import datetime, timedelta, timezone 
from datetime import time as dt_time 
import sys
import os

# S·ª≠ d·ª•ng import tuy·ªát ƒë·ªëi
from telegram import Update
from telegram import Bot
from telegram import BotCommand
from telegram.ext import Application
from telegram.ext import ApplicationBuilder

import config
from config import BOT_TOKEN

# Import c√°c module handlers
from handlers import nav_core
from handlers import learning_session
from handlers import mode_selection
from handlers import set_management
from handlers import data_import_upload
from handlers import data_import_update
from handlers import data_export
from handlers import notes
from handlers import audio_review
from handlers import settings
from handlers import notifications
from handlers import stats
from handlers import nav_admin
from handlers import user_management
from handlers import cache
from handlers import broadcast
from handlers import reporting
# Import c√°c h√†m job
from jobs import (
    run_periodic_reminders_job,
    # run_due_reminders_job, # <<< S·ª¨A L·∫¶N 3: X√ìA IMPORT
    run_inactivity_reminder_job,
    run_morning_brief_job 
)

logger = logging.getLogger(__name__)

def register_all_handlers(app): 
    """
    ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c handlers t·ª´ c√°c module handler con.
    S·ª≠a l·∫ßn 3: X√≥a b·ªè l√™n l·ªãch cho run_due_reminders_job.
    """
    logger.info("ƒêƒÉng k√Ω handlers t·ª´ c√°c module (∆∞u ti√™n ConversationHandlers)...")

    # --- Handlers C·ªët l√µi v√† ConversationHandlers ---
    if hasattr(nav_core, 'register_handlers'): nav_core.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong nav_core")
    if hasattr(notes, 'register_handlers'): notes.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong notes")
    if hasattr(data_import_upload, 'register_handlers'): data_import_upload.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong data_import_upload")
    if hasattr(data_import_update, 'register_handlers'): data_import_update.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong data_import_update")
    if hasattr(user_management, 'register_handlers'): user_management.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong user_management")
    if hasattr(broadcast, 'register_handlers'): broadcast.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong broadcast")
    if hasattr(cache, 'register_handlers'): cache.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong cache")
    if hasattr(reporting, 'register_handlers'): reporting.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong reporting")

    # --- C√°c Handlers Ch·ª©c nƒÉng kh√°c ---
    if hasattr(learning_session, 'register_handlers'): learning_session.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong learning_session")
    if hasattr(mode_selection, 'register_handlers'): mode_selection.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong mode_selection")
    if hasattr(set_management, 'register_handlers'): set_management.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong set_management")
    if hasattr(data_export, 'register_handlers'): data_export.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong data_export")
    if hasattr(audio_review, 'register_handlers'): audio_review.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong audio_review")
    if hasattr(settings, 'register_handlers'): settings.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong settings")
    if hasattr(notifications, 'register_handlers'): notifications.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong notifications")
    if hasattr(stats, 'register_handlers'): stats.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong stats")
    if hasattr(nav_admin, 'register_handlers'): nav_admin.register_handlers(app)
    else: logger.error("!!! Thi·∫øu register_handlers trong nav_admin")

    # --- Error Handler ---
    if hasattr(nav_core, 'error_handler'):
        app.add_error_handler(nav_core.error_handler)
        logger.info("ƒê√£ ƒëƒÉng k√Ω error_handler.")
    else:
        logger.error("!!! Kh√¥ng t√¨m th·∫•y h√†m error_handler trong module nav_core!")

    # --- L√™n l·ªãch Jobs ---
    job_queue = app.job_queue
    if job_queue:
        # Job th√¥ng b√°o th·∫ª √¥n t·∫≠p theo b·ªô (Periodic Targeted Reminder)
        job_queue.run_repeating(
            run_periodic_reminders_job, 
            interval=timedelta(minutes=config.PERIODIC_REMINDER_INTERVAL_MIN), 
            first=timedelta(seconds=20), 
            name="FlashcardPeriodicTargetedReminderJob" 
        )
        logger.info(f"ƒê√£ l√™n l·ªãch ch·∫°y job g·ª≠i th√¥ng b√°o th·∫ª theo b·ªô ({config.PERIODIC_REMINDER_INTERVAL_MIN} ph√∫t/l·∫ßn).")

        # <<< S·ª¨A L·∫¶N 3: X√ìA B·ªé L√äN L·ªäCH CHO run_due_reminders_job >>>
        # # Job nh·∫Øc nh·ªü th·∫ª ƒë·∫øn h·∫°n (Due Card Reminder)
        # try:
        #     run_hour_utc_due = config.DUE_REMINDER_DAILY_HOUR_UTC
        #     # ... (logic c≈© c·ªßa due reminder job) ...
        # except Exception as e_schedule_due:
        #     # ... (log l·ªói c≈©) ...
        logger.info("ƒê√£ x√≥a b·ªè vi·ªác l√™n l·ªãch cho Due Reminder Job (thay b·∫±ng Morning Brief).")
        # <<< K·∫æT TH√öC S·ª¨A L·∫¶N 3 >>>

        # L√™n l·ªãch cho Morning Brief Job
        try:
            run_hour_utc_morning = config.MORNING_BRIEF_JOB_HOUR_UTC
            if not (0 <= run_hour_utc_morning <= 23):
                logger.error(f"Gi√° tr·ªã MORNING_BRIEF_JOB_HOUR_UTC ({run_hour_utc_morning}) kh√¥ng h·ª£p l·ªá. D√πng 1 gi·ªù UTC.")
                run_hour_utc_morning = 1
            
            time_to_run_morning = dt_time(hour=run_hour_utc_morning, minute=1, second=0, tzinfo=timezone.utc) 
            job_queue.run_daily(
                run_morning_brief_job,
                time=time_to_run_morning,
                name="FlashcardMorningBriefJob"
            )
            try:
                now_server_local_morning = datetime.now().astimezone()
                today_server_local_morning = now_server_local_morning.date()
                potential_run_utc_morning = datetime(today_server_local_morning.year, today_server_local_morning.month, today_server_local_morning.day, run_hour_utc_morning, 1, 0, tzinfo=timezone.utc)
                if potential_run_utc_morning < datetime.now(timezone.utc): 
                    potential_run_utc_morning += timedelta(days=1)
                first_run_local_display_morning = potential_run_utc_morning.astimezone(now_server_local_morning.tzinfo)
                logger.info(f"ƒê√£ l√™n l·ªãch Morning Brief Job ch·∫°y H√ÄNG NG√ÄY v√†o {run_hour_utc_morning}:01:00 UTC. L·∫ßn ch·∫°y ti·∫øp theo d·ª± ki·∫øn (gi·ªù server): {first_run_local_display_morning.strftime('%Y-%m-%d %H:%M:%S %Z')}.")
            except Exception as e_log_time_morning:
                 logger.warning(f"Kh√¥ng th·ªÉ t√≠nh to√°n th·ªùi gian hi·ªÉn th·ªã local cho Morning Brief Job: {e_log_time_morning}. Job v·∫´n ƒë∆∞·ª£c l√™n l·ªãch v√†o {run_hour_utc_morning}:01:00 UTC h√†ng ng√†y.")
        except Exception as e_schedule_morning:
            logger.error(f"L·ªói khi l√™n l·ªãch Morning Brief Job h√†ng ng√†y: {e_schedule_morning}", exc_info=True)
        
        # Job nh·∫Øc nh·ªü kh√¥ng ho·∫°t ƒë·ªông
        try:
            check_interval_hours = max(1, config.INACTIVITY_CHECK_INTERVAL_HOURS)
            job_queue.run_repeating(
                run_inactivity_reminder_job,
                interval=timedelta(hours=check_interval_hours),
                first=timedelta(minutes=10), 
                name="FlashcardInactivityReminderJob"
            )
            logger.info(f"ƒê√£ l√™n l·ªãch ch·∫°y job nh·∫Øc nh·ªü kh√¥ng ho·∫°t ƒë·ªông m·ªói {check_interval_hours} gi·ªù.")
        except Exception as e_schedule_inactive:
            logger.error(f"L·ªói khi l√™n l·ªãch Inactivity Reminder Job: {e_schedule_inactive}", exc_info=True)
    else:
         logger.warning("JobQueue kh√¥ng kh·∫£ d·ª•ng. Kh√¥ng th·ªÉ l√™n l·ªãch c√°c t√°c v·ª• ƒë·ªãnh k·ª≥.")

    logger.info("ƒêƒÉng k√Ω handlers v√† jobs ho√†n t·∫•t.")

async def set_commands():
    """Thi·∫øt l·∫≠p danh s√°ch l·ªánh g·ª£i √Ω hi·ªÉn th·ªã tr√™n Telegram."""
    logger.info("‚è≥ ƒêang thi·∫øt l·∫≠p danh s√°ch l·ªánh bot...")
    bot_instance = None
    try:
        bot_instance = Bot(token=BOT_TOKEN)
        commands = [
            BotCommand("flashcard", "üìö M·ªü menu ch√≠nh"),
            BotCommand("flashcard_stats", "üìà Th·ªëng k√™"),
            BotCommand("flashcard_learn", "üéì Ch·∫ø ƒë·ªô h·ªçc tu·∫ßn t·ª±"),
            BotCommand("flashcard_review_all", "üîÅ Ch·∫ø ƒë·ªô √¥n to√†n b·ªô"),
            BotCommand("flashcard_cram_set", "üöÄ Ch·∫ø ƒë·ªô √¥n t·∫≠p nhanh b·ªô hi·ªán t·∫°i"),
            BotCommand("flashcard_settings", "‚öôÔ∏è C√†i ƒë·∫∑t"),
            BotCommand("flashcard_remind", "üîî C√†i ƒë·∫∑t Th√¥ng b√°o"), 
            BotCommand("help", "‚ùì H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
        ]
        await bot_instance.set_my_commands(commands)
        logger.info(f"‚úÖ L·ªánh bot ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng ({len(commands)} l·ªánh).")
        return True
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi thi·∫øt l·∫≠p l·ªánh bot: {e}", exc_info=True)
        return False

async def main():
    """Kh·ªüi t·∫°o v√† ch·∫°y ·ª©ng d·ª•ng Telegram bot."""
    logger.info("--- Kh·ªüi t·∫°o Flashcard Bot ---")
    if not BOT_TOKEN:
        logger.critical("L·ªñI NGHI√äM TR·ªåNG: BOT_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.")
        print("L·ªñI: Kh√¥ng t√¨m th·∫•y BOT_TOKEN.", file=sys.stderr)
        sys.exit(1)

    app = None
    try:
        app_builder = ApplicationBuilder().token(BOT_TOKEN)
        app = app_builder.build()
        logger.info("Application ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.")

        app.bot_data['application'] = app

        if 'cache_job_running' not in app.bot_data: app.bot_data['cache_job_running'] = False
        if 'cache_job_task' not in app.bot_data: app.bot_data['cache_job_task'] = None
        logger.debug(f"Tr·∫°ng th√°i bot_data ban ƒë·∫ßu: {app.bot_data}")

        await set_commands()
        register_all_handlers(app)

        logger.info(">>> Bot chu·∫©n b·ªã ch·∫°y (async)...")
        await app.initialize()
        await app.start()

        if app.updater:
            await app.updater.start_polling(allowed_updates=Update.ALL_TYPES)
            logger.info(">>> Bot ƒëang ch·∫°y (async)... Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
            stop_event = asyncio.Event()
            await stop_event.wait() 
        else:
            logger.error("Updater kh√¥ng ƒë∆∞·ª£c kh·ªüi t·∫°o.")
            return

    except (KeyboardInterrupt, SystemExit):
        logger.info("Nh·∫≠n t√≠n hi·ªáu d·ª´ng...")
    except Exception as e:
        logger.critical(f"L·ªói nghi√™m tr·ªçng khi ch·∫°y bot: {e}", exc_info=True)
    finally:
        if app is not None:
            logger.info("--- B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫Øt bot ---")
            try:
                if app.updater and app.updater.running: await app.updater.stop()
                if app.running: await app.stop()
                await app.shutdown()
                logger.info("--- Bot ƒë√£ t·∫Øt ho√†n to√†n ---")
            except Exception as e_shutdown:
                logger.error(f"L·ªói khi t·∫Øt bot: {e_shutdown}", exc_info=True)
        else:
            logger.info("--- Bot kh√¥ng kh·ªüi t·∫°o th√†nh c√¥ng ƒë·ªÉ t·∫Øt ---")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
         if "Cannot run the event loop while another loop is running" in str(e):
             logger.warning("B·ªè qua l·ªói RuntimeError loop khi d·ª´ng.")
         else:
             logger.critical(f"L·ªói RuntimeError khi ch·∫°y asyncio: {e}.")
    except Exception as e:
        logger.critical(f"L·ªói kh√¥ng x√°c ƒë·ªãnh c·∫•p cao nh·∫•t: {e}", exc_info=True)

