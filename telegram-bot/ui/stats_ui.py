# File: flashcard-telegram-bot/ui/stats_ui.py
"""
Module ch·ª©a c√°c h√†m x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng cho ch·ª©c nƒÉng
hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng (leaderboard) v√† menu th·ªëng k√™.
(S·ª≠a l·∫ßn 1: C·∫•u tr√∫c l·∫°i menu th·ªëng k√™, th√™m c√°c h√†m build keyboard m·ªõi,
             x√≥a build_leaderboard_period_menu)
"""

import logging
import html
import asyncio
import re 

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode 

from utils.helpers import get_chat_display_name
from config import LEADERBOARD_LIMIT 

logger = logging.getLogger(__name__)

def build_new_stats_menu_keyboard():
    """
    S·ª≠a l·∫ßn 1: T·∫°o b√†n ph√≠m cho menu th·ªëng k√™ ch√≠nh m·ªõi.
    """
    log_prefix = "[UI_BUILD_NEW_STATS_MENU]"
    logger.debug(f"{log_prefix} T·∫°o keyboard cho menu th·ªëng k√™ ch√≠nh m·ªõi.")
    keyboard = [
        [InlineKeyboardButton("üìä Th·ªëng k√™ C√° nh√¢n", callback_data="stats:show_personal_stats")], # Callback m·ªõi
        [InlineKeyboardButton("üèÜ B·∫£ng X·∫øp h·∫°ng", callback_data="stats:show_leaderboard_options")], # Callback m·ªõi
        [InlineKeyboardButton("üîô Menu ch√≠nh", callback_data="handle_callback_back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_leaderboard_direct_options_keyboard():
    """
    S·ª≠a l·∫ßn 1: T·∫°o b√†n ph√≠m hi·ªÉn th·ªã tr·ª±c ti·∫øp c√°c l·ª±a ch·ªçn k·ª≥ b·∫£ng x·∫øp h·∫°ng.
    """
    log_prefix = "[UI_BUILD_LB_DIRECT_OPTIONS]"
    logger.debug(f"{log_prefix} T·∫°o keyboard ch·ªçn k·ª≥ BXH tr·ª±c ti·∫øp.")
    keyboard = [
        [InlineKeyboardButton("üìÖ BXH H√¥m Nay", callback_data="leaderboard:daily")],
        [InlineKeyboardButton("üóìÔ∏è BXH Tu·∫ßn N√†y", callback_data="leaderboard:weekly")],
        [InlineKeyboardButton("üà∑Ô∏è BXH Th√°ng N√†y", callback_data="leaderboard:monthly")],
        [InlineKeyboardButton("‚è≥ BXH M·ªçi L√∫c", callback_data="leaderboard:all_time")],
        [InlineKeyboardButton("üìä Quay l·∫°i Menu Th·ªëng k√™", callback_data="stats:main")] # Quay l·∫°i menu th·ªëng k√™ m·ªõi
    ]
    return InlineKeyboardMarkup(keyboard)

# S·ª≠a l·∫ßn 1: X√≥a h√†m build_leaderboard_period_menu() v√¨ kh√¥ng c√≤n d√πng menu trung gian
# def build_leaderboard_period_menu():
#     # ... (code c≈©) ...
#     pass

async def format_leaderboard_display(leaderboard_data, title, context, period_key='period_score', is_all_time=False):
    """
    ƒê·ªãnh d·∫°ng vƒÉn b·∫£n hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng Top N.
    S·ª≠ d·ª•ng HTML, hi·ªÉn th·ªã th√™m stats v√† ghi ch√∫.
    (H√†m n√†y gi·ªØ nguy√™n logic hi·ªÉn th·ªã chi ti·∫øt c·ªßa m·ªôt b·∫£ng x·∫øp h·∫°ng)
    """
    log_prefix = f"[UI_FORMAT_LEADERBOARD|Title:{title}|AllTime:{is_all_time}]"
    logger.debug(f"{log_prefix} ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã leaderboard v·ªõi key ƒëi·ªÉm '{period_key}'.")

    if not leaderboard_data:
        return "‚ÑπÔ∏è Ch∆∞a c√≥ ai tr√™n b·∫£ng x·∫øp h·∫°ng n√†y!"

    top_users_data = leaderboard_data
    actual_top_n = len(top_users_data)
    logger.debug(f"{log_prefix} Hi·ªÉn th·ªã top {actual_top_n} users.")

    bot_instance = None
    if hasattr(context, 'bot'): bot_instance = context.bot
    elif context.application and hasattr(context.application, 'bot'): bot_instance = context.application.bot

    if not bot_instance:
         logger.error(f"{log_prefix} Kh√¥ng th·ªÉ l·∫•y bot instance.")
         return "L·ªói: Kh√¥ng th·ªÉ t·∫£i t√™n ng∆∞·ªùi d√πng."

    telegram_ids_to_fetch = [user_row.get('telegram_id') for user_row in top_users_data if user_row.get('telegram_id')]
    display_names_map = {}
    if telegram_ids_to_fetch:
        tasks = [get_chat_display_name(bot_instance, tg_id) for tg_id in telegram_ids_to_fetch]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        for i, tg_id in enumerate(telegram_ids_to_fetch):
            if isinstance(results[i], Exception): display_names_map[tg_id] = str(tg_id)
            else: display_names_map[tg_id] = results[i]
        logger.debug(f"{log_prefix} ƒê√£ l·∫•y xong t√™n hi·ªÉn th·ªã.")

    dynamic_title = title.replace(f"(Top 5)", f"(Top {actual_top_n})").replace(f"(Top {LEADERBOARD_LIMIT})", f"(Top {actual_top_n})")
    message_lines = [f"<b>{html.escape(dynamic_title)}</b>"]

    if is_all_time:
        legend = "[T·ªïng s·ªë b·ªô ƒë√£ h·ªçc / T·ªïng s·ªë th·∫ª ƒë√£ h·ªçc]"
    else:
        legend = "[T·ªïng s·ªë b·ªô ƒë√£ h·ªçc / Th·∫ª m·ªõi trong k·ª≥ / L∆∞·ª£t √¥n trong k·ª≥]"
    message_lines.append(f"<i>{html.escape(legend)}</i>\n")
    
    rank_display_map = {0: "ü•á", 1: "ü•à", 2: "ü•â"}
    for i in range(3, LEADERBOARD_LIMIT):
        rank_display_map[i] = f"{i+1}."

    for rank, user_row in enumerate(top_users_data):
        telegram_id = user_row.get('telegram_id')
        score = user_row.get(period_key, 0)
        extra_stats = ""
        if is_all_time:
            total_sets = user_row.get('total_learned_sets', 'N/A')
            total_cards = user_row.get('total_learned_cards', 0)
            extra_stats = f"[{total_sets}/{total_cards}]"
        else:
            total_sets = user_row.get('learned_sets', 'N/A') 
            new_cards = user_row.get('new_cards_period', 0)
            reviews = user_row.get('reviews_period', 0)
            extra_stats = f"[{total_sets}/{new_cards}/{reviews}]"
        
        if telegram_id is None: continue

        display_name = display_names_map.get(telegram_id, str(telegram_id))
        escaped_name = html.escape(display_name)
        mention_html = f'<a href="tg://user?id={telegram_id}">{escaped_name}</a>'
        rank_display = rank_display_map.get(rank, f"{rank + 1}.")
        message_lines.append(f"{rank_display} {mention_html}: <b>{score}</b> ƒëi·ªÉm {html.escape(extra_stats)}")

    final_message = "\n".join(message_lines)
    return final_message
