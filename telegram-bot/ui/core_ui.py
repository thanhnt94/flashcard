# File: flashcard-telegram-bot/ui/core_ui.py
"""
Module ch·ª©a c√°c h√†m x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng c·ªët l√µi, v√≠ d·ª• menu ch√≠nh,
menu ch·ªçn ch·∫ø ƒë·ªô h·ªçc, menu qu·∫£n l√Ω b·ªô t·ª´, ph√¢n trang.
(S·ª≠a l·∫ßn 1: C·∫≠p nh·∫≠t callback data cho n√∫t "Xo√° b·ªô t·ª´" trong build_set_management_keyboard)
"""
import logging
import html

from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram import Bot 
from database.query_user import get_user_by_telegram_id
from database.query_set import get_sets
from utils.helpers import get_chat_display_name
from config import (
    DEFAULT_LEARNING_MODE, LEARNING_MODE_DISPLAY_NAMES, MODE_REVIEW_ALL_DUE,
    MODE_CRAM_ALL, MODE_REVIEW_HARDEST, MODE_SEQ_INTERSPERSED, MODE_SEQ_RANDOM_NEW,
    MODE_NEW_SEQUENTIAL, MODE_NEW_RANDOM, MODE_DUE_ONLY_RANDOM, CAN_ACCESS_ADMIN_MENU,
    AUDIO_REVIEW_CALLBACK_PREFIX, ROLE_PERMISSIONS, AUDIO_N_OPTIONS, MODE_CRAM_SET,
    ROLE_DISPLAY_CONFIG,
    SET_MGMT_DELETE_MENU_PFX # <<< S·ª¨A L·∫¶N 1: TH√äM IMPORT
)

logger = logging.getLogger(__name__)

async def build_main_menu(telegram_id, bot_instance):
    # Gi·ªØ nguy√™n logic
    log_prefix = f"[UI_BUILD_MAIN|UserTG:{telegram_id}]"
    logger.debug(f"{log_prefix} B·∫Øt ƒë·∫ßu x√¢y d·ª±ng giao di·ªán ch√≠nh.")
    try:
        user = get_user_by_telegram_id(telegram_id)
        user_role = user.get('user_role', 'user')
        if user_role == 'banned':
            logger.warning(f"{log_prefix} Ng∆∞·ªùi d√πng ID {telegram_id} c√≥ vai tr√≤ 'banned'. Ch·∫∑n truy c·∫≠p.")
            ban_icon, ban_message_base = ROLE_DISPLAY_CONFIG.get('banned', ("üö´", "B·ªã kh√≥a"))
            ban_message = f"{ban_icon} T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ {ban_message_base.lower()}\. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n\." 
            return ban_message, None 

        current_set_id = user.get("current_set_id")
        current_mode = user.get("current_mode", DEFAULT_LEARNING_MODE)
        score = user.get('score', 0)
        username = await get_chat_display_name(bot_instance, telegram_id)
        logger.debug(f"{log_prefix} Info: username='{username}', current_set_id={current_set_id}, current_mode='{current_mode}', role='{user_role}', score={score}")
        default_display = ("üë§", user_role.capitalize())
        role_icon, role_name = ROLE_DISPLAY_CONFIG.get(user_role, default_display)
        greeting = f"üëã Xin ch√†o {role_icon} {username}!"
        mode_display_name = LEARNING_MODE_DISPLAY_NAMES.get(current_mode, current_mode)
        text_lines = [greeting]
        modes_hiding_set = {MODE_REVIEW_ALL_DUE, MODE_CRAM_ALL, MODE_REVIEW_HARDEST}
        if current_mode not in modes_hiding_set:
            set_title_display = "**Ch∆∞a ch·ªçn b·ªô n√†o**"
            if current_set_id:
                logger.debug(f"{log_prefix} ƒêang h·ªçc b·ªô: {current_set_id}. L·∫•y th√¥ng tin b·ªô...")
                try:
                    set_info_tuple = get_sets(set_id=current_set_id)
                    set_data = set_info_tuple[0][0] if set_info_tuple and set_info_tuple[0] else None
                    if set_data:
                         set_title = set_data.get("title")
                         if set_title: set_title_display = f"**{html.escape(set_title)}**"
                         else: logger.warning(f"{log_prefix} Set ID {current_set_id} kh√¥ng c√≥ title."); set_title_display = f"**ID kh√¥ng t√™n ({current_set_id})**"
                    else: logger.warning(f"{log_prefix} Kh√¥ng t√¨m th·∫•y th√¥ng tin cho set_id {current_set_id}."); set_title_display = f"**ID kh√¥ng h·ª£p l·ªá ({current_set_id})**"
                except Exception as e_set: logger.error(f"{log_prefix} L·ªói l·∫•y th√¥ng tin b·ªô {current_set_id}: {e_set}"); set_title_display = f"**L·ªói t·∫£i t√™n b·ªô ({current_set_id})**"
            text_lines.append(f"\nüìö B·ªô hi·ªán t·∫°i: {set_title_display}")
        else: logger.debug(f"{log_prefix} Ch·∫ø ƒë·ªô '{current_mode}', ·∫©n th√¥ng tin b·ªô hi·ªán t·∫°i."); text_lines.append("")
        text_lines.append(f"‚ö° Ch·∫ø ƒë·ªô: **{mode_display_name}**")
        text_lines.append(f"üíØ ƒêi·ªÉm s·ªë: **{score}**")
        text_lines.append("---"); text_lines.append("Ch·ªçn m·ªôt h√†nh ƒë·ªông:")
        text = "\n".join(text_lines)
        keyboard = [
            [InlineKeyboardButton("üîÑ Thay ƒë·ªïi b·ªô", callback_data="_display_set_selection"), InlineKeyboardButton("‚ö° Thay ƒë·ªïi ch·∫ø ƒë·ªô", callback_data="show_mode_selection")],
            [InlineKeyboardButton("üóÇÔ∏è Qu·∫£n l√Ω b·ªô", callback_data="show_set_management"), InlineKeyboardButton("üìà Th·ªëng k√™", callback_data="stats:main")],
            [InlineKeyboardButton("üéß √în t·∫≠p Audio", callback_data=f"{AUDIO_REVIEW_CALLBACK_PREFIX}:choose_set"), InlineKeyboardButton("üìä Xu·∫•t d·ªØ li·ªáu", callback_data="do_export")],
            [InlineKeyboardButton("‚öôÔ∏è C√†i ƒë·∫∑t", callback_data="show_unified_settings"), InlineKeyboardButton("‚ùì Tr·ª£ gi√∫p", callback_data="show_help")]
        ]
        user_permissions = ROLE_PERMISSIONS.get(user_role, set())
        if CAN_ACCESS_ADMIN_MENU in user_permissions:
            logger.debug(f"{log_prefix} User l√† admin, th√™m h√†ng n√∫t admin.")
            keyboard.append( [InlineKeyboardButton("üõ†Ô∏è Menu Admin", callback_data="flashcard_admin"), InlineKeyboardButton("üì¢ G·ª≠i TB", callback_data="start_broadcast")] )
        else: logger.debug(f"{log_prefix} User kh√¥ng ph·∫£i admin.")
        keyboard.append( [InlineKeyboardButton("‚ñ∂Ô∏è Ti·∫øp t·ª•c h·ªçc", callback_data="continue")] )
        reply_markup = InlineKeyboardMarkup(keyboard); logger.debug(f"{log_prefix} ƒê√£ t·∫°o xong text v√† keyboard layout cu·ªëi c√πng."); return text, reply_markup
    except Exception as e:
        logger.error(f"{log_prefix} L·ªói kh√¥ng mong mu·ªën khi build menu ch√≠nh: {e}", exc_info=True)
        return "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i menu ch√≠nh.", None

def build_mode_category_keyboard():
    # Gi·ªØ nguy√™n logic
    log_prefix = "[UI_BUILD_MODE_CATEGORY]"
    logger.debug(f"{log_prefix} ƒêang t·∫°o keyboard ch·ªçn danh m·ª•c ch·∫ø ƒë·ªô h·ªçc.")
    keyboard = [
        [InlineKeyboardButton("üéì Ghi nh·ªõ s√¢u (SRS)", callback_data="mode_category:srs")],
        [InlineKeyboardButton("‚ûï Ch·ªâ h·ªçc m·ªõi", callback_data="mode_category:new")],
        [InlineKeyboardButton("üéØ Ch·ªâ √¥n t·∫≠p", callback_data="mode_category:review")],
        [InlineKeyboardButton("üîô Quay l·∫°i Menu ch√≠nh", callback_data="handle_callback_back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug(f"{log_prefix} ƒê√£ t·∫°o xong keyboard ch·ªçn danh m·ª•c ch·∫ø ƒë·ªô.")
    return reply_markup

def _build_mode_submenu(category_modes):
    # Gi·ªØ nguy√™n logic
    log_prefix = "[UI_BUILD_MODE_SUBMENU]"
    keyboard = []
    for mode_code in category_modes:
        mode_name = LEARNING_MODE_DISPLAY_NAMES.get(mode_code, mode_code)
        callback_data = f"select_mode:{mode_code}"
        keyboard.append([InlineKeyboardButton(mode_name, callback_data=callback_data)])
        logger.debug(f"{log_prefix} Th√™m n√∫t: '{mode_name}' (Code: {mode_code})")
    keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i Ch·ªçn danh m·ª•c", callback_data="show_mode_selection")])
    return InlineKeyboardMarkup(keyboard)

def build_srs_mode_submenu():
    # Gi·ªØ nguy√™n logic
    srs_modes = [MODE_SEQ_INTERSPERSED, MODE_SEQ_RANDOM_NEW]
    return _build_mode_submenu(srs_modes)

def build_new_only_submenu():
    # Gi·ªØ nguy√™n logic
    new_only_modes = [MODE_NEW_SEQUENTIAL, MODE_NEW_RANDOM]
    return _build_mode_submenu(new_only_modes)

def build_review_submenu():
    # Gi·ªØ nguy√™n logic
    review_modes = [MODE_DUE_ONLY_RANDOM, MODE_REVIEW_ALL_DUE, MODE_REVIEW_HARDEST, MODE_CRAM_SET, MODE_CRAM_ALL]
    return _build_mode_submenu(review_modes)

def build_pagination_keyboard(current_page, total_pages, base_callback_prefix):
    # Gi·ªØ nguy√™n logic
    log_prefix = "[UI_BUILD_PAGINATION_KB]"
    nav_row = []
    if total_pages <= 1: logger.debug(f"{log_prefix} Ch·ªâ c√≥ {total_pages} trang, kh√¥ng c·∫ßn n√∫t."); return nav_row
    if current_page > 1:
        prev_callback = f"{base_callback_prefix}:prev:{current_page}"; nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è Tr∆∞·ªõc", callback_data=prev_callback)); logger.debug(f"{log_prefix} Th√™m n√∫t Tr∆∞·ªõc (Callback: {prev_callback})")
    if current_page < total_pages:
        next_callback = f"{base_callback_prefix}:next:{current_page}"; nav_row.append(InlineKeyboardButton("Sau ‚û°Ô∏è", callback_data=next_callback)); logger.debug(f"{log_prefix} Th√™m n√∫t Sau (Callback: {next_callback})")
    logger.debug(f"{log_prefix} ƒê√£ t·∫°o h√†ng n√∫t ƒëi·ªÅu h∆∞·ªõng: {len(nav_row)} n√∫t."); return nav_row

def build_set_management_keyboard(has_pending_reports=False):
    """
    X√¢y d·ª±ng b√†n ph√≠m inline cho menu qu·∫£n l√Ω b·ªô t·ª´.
    S·ª≠a l·∫ßn 1: S·ª≠ d·ª•ng SET_MGMT_DELETE_MENU_PFX cho n√∫t X√≥a b·ªô t·ª´.
    """
    log_prefix = "[UI_BUILD_SET_MGMT]"
    logger.debug(f"{log_prefix} ƒêang t·∫°o keyboard qu·∫£n l√Ω b·ªô (has_pending_reports={has_pending_reports}).")
    keyboard = [
        [ 
            InlineKeyboardButton("üì§ Upload b·ªô t·ª´ m·ªõi", callback_data="trigger_upload"),
            InlineKeyboardButton("üîÉ C·∫≠p nh·∫≠t b·ªô t·ª´", callback_data="trigger_update_set")
        ],
        [ 
            # S·ª≠a l·∫ßn 1: S·ª≠ d·ª•ng h·∫±ng s·ªë callback ƒë√∫ng
            InlineKeyboardButton("üóëÔ∏è Xo√° b·ªô t·ª´", callback_data=SET_MGMT_DELETE_MENU_PFX), 
            InlineKeyboardButton("üìã Export b·ªô t·ª´", callback_data="trigger_export_set")
        ]
    ]
    last_row = []
    if has_pending_reports:
        view_reports_button = InlineKeyboardButton("üìä Xem B√°o c√°o L·ªói", callback_data="view_reports_menu")
        last_row.append(view_reports_button)
        logger.debug(f"{log_prefix} ƒê√£ th√™m n√∫t Xem B√°o c√°o L·ªói.")
    back_button = InlineKeyboardButton("üîô Menu ch√≠nh", callback_data="handle_callback_back_to_main")
    last_row.append(back_button)
    keyboard.append(last_row)
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug(f"{log_prefix} ƒê√£ t·∫°o xong keyboard qu·∫£n l√Ω b·ªô.")
    return reply_markup

def build_audio_n_selection_keyboard(mode, set_id):
    # Gi·ªØ nguy√™n logic
    log_prefix = f"[UI_BUILD_AUDIO_N_SELECT|Mode:{mode}|Set:{set_id}]"; logger.debug(f"{log_prefix} ƒêang t·∫°o keyboard ch·ªçn N.")
    if not mode or not set_id: logger.error(f"{log_prefix} Thi·∫øu mode ho·∫∑c set_id."); return None
    if not AUDIO_N_OPTIONS or not isinstance(AUDIO_N_OPTIONS, list): logger.error(f"{log_prefix} AUDIO_N_OPTIONS kh√¥ng h·ª£p l·ªá trong config."); return None
    keyboard = []; row = []
    for n_value in AUDIO_N_OPTIONS:
        if not isinstance(n_value, int) or n_value <= 0: logger.warning(f"{log_prefix} B·ªè qua gi√° tr·ªã N kh√¥ng h·ª£p l·ªá: {n_value}"); continue
        button_text = f"üéß {n_value} th·∫ª"; callback_data = f"{AUDIO_REVIEW_CALLBACK_PREFIX}:trigger:{mode}:{set_id}:{n_value}"; row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        if len(row) == 3: keyboard.append(row); row = []
    if row: keyboard.append(row)
    back_callback_data = f"{AUDIO_REVIEW_CALLBACK_PREFIX}:show_options:{set_id}"; keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i", callback_data=back_callback_data)])
    if not keyboard: logger.warning(f"{log_prefix} Kh√¥ng t·∫°o ƒë∆∞·ª£c n√∫t ch·ªçn N n√†o."); return None
    reply_markup = InlineKeyboardMarkup(keyboard); logger.debug(f"{log_prefix} ƒê√£ t·∫°o xong keyboard ch·ªçn N."); return reply_markup
