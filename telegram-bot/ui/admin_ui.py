# Path: flashcard_v2/ui/admin_ui.py
"""
Module ch·ª©a c√°c h√†m x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng cho c√°c ch·ª©c nƒÉng qu·∫£n tr·ªã (admin),
nh∆∞ menu admin, danh s√°ch ng∆∞·ªùi d√πng, th√¥ng tin chi ti·∫øt ng∆∞·ªùi d√πng, v.v.
ƒê√£ th√™m hi·ªÉn th·ªã icon vai tr√≤ trong danh s√°ch ng∆∞·ªùi d√πng.
"""
import logging
import html
import asyncio

# S·ª≠ d·ª•ng import tuy·ªát ƒë·ªëi
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from config import ROLE_PERMISSIONS # D√πng ƒë·ªÉ l·∫•y danh s√°ch roles
from config import ROLE_DISPLAY_CONFIG # <<< Import c·∫•u h√¨nh hi·ªÉn th·ªã vai tr√≤
from utils.helpers import get_chat_display_name

# Kh·ªüi t·∫°o logger
logger = logging.getLogger(__name__)

def build_admin_main_menu():
    """
    X√¢y d·ª±ng b√†n ph√≠m inline cho menu ch·ª©c nƒÉng admin ch√≠nh.
    Bao g·ªìm Qu·∫£n l√Ω Th√†nh vi√™n v√† Qu·∫£n l√Ω Cache.
    """
    log_prefix = "[UI_BUILD_ADMIN_MENU]"
    logger.debug("{} ƒêang t·∫°o menu admin ch√≠nh.".format(log_prefix))
    keyboard = [
        [InlineKeyboardButton("üë• Qu·∫£n l√Ω Th√†nh vi√™n", callback_data="manage_users")],
        [InlineKeyboardButton("üßπ Qu·∫£n l√Ω Cache Audio", callback_data="admin_cache:show_menu")],
        [InlineKeyboardButton("üîô Quay l·∫°i Menu Ch√≠nh", callback_data="handle_callback_back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("{} ƒê√£ t·∫°o xong keyboard menu admin.".format(log_prefix))
    return reply_markup

def build_admin_cache_menu():
    """
    X√¢y d·ª±ng b√†n ph√≠m inline cho menu con qu·∫£n l√Ω cache audio.
    """
    log_prefix = "[UI_BUILD_ADMIN_CACHE_MENU]"
    logger.debug("{} ƒêang t·∫°o menu con qu·∫£n l√Ω cache.".format(log_prefix))
    keyboard = [
        [
            InlineKeyboardButton("üóëÔ∏è D·ªçn Cache", callback_data="admin_cache:ask_clear"),
            InlineKeyboardButton("‚ñ∂Ô∏è B.ƒë·∫ßu T·∫°o Cache", callback_data="admin_cache:start_job"),
        ],
        [
            InlineKeyboardButton("‚èπÔ∏è D·ª´ng T·∫°o Cache", callback_data="admin_cache:stop_job"),
            InlineKeyboardButton("üîô Quay l·∫°i Menu Admin", callback_data="flashcard_admin"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("{} ƒê√£ t·∫°o xong keyboard menu con qu·∫£n l√Ω cache.".format(log_prefix))
    return reply_markup

async def build_user_management_keyboard(users_list, bot_instance):
    """
    X√¢y d·ª±ng b√†n ph√≠m inline hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng ƒë·ªÉ qu·∫£n l√Ω.
    ƒê√£ th√™m icon vai tr√≤ v√†o tr∆∞·ªõc t√™n ng∆∞·ªùi d√πng.

    Args:
        users_list (list): Danh s√°ch c√°c dictionary ch·ª©a th√¥ng tin user (t·ª´ get_all_users).
        bot_instance (telegram.Bot): Instance c·ªßa bot ƒë·ªÉ l·∫•y t√™n hi·ªÉn th·ªã.

    Returns:
        InlineKeyboardMarkup: B√†n ph√≠m inline ho·∫∑c None n·∫øu danh s√°ch r·ªóng.
    """
    log_prefix = "[UI_BUILD_USER_LIST]"
    logger.debug("{} ƒêang t·∫°o keyboard danh s√°ch user.".format(log_prefix))
    if not users_list:
        logger.warning("{} Danh s√°ch user r·ªóng.".format(log_prefix))
        return None

    keyboard = []
    tasks = []
    user_telegram_ids_in_list = []
    # L·∫•y danh s√°ch telegram_id v√† t·∫°o task l·∫•y t√™n
    for user in users_list:
        telegram_id = user.get('telegram_id')
        if telegram_id:
            user_telegram_ids_in_list.append(telegram_id)
            # T·∫°o coroutine l·∫•y t√™n cho m·ªói ID
            tasks.append(get_chat_display_name(bot_instance, telegram_id))
        else:
            logger.warning("{} B·ªè qua user kh√¥ng c√≥ telegram_id: {}".format(log_prefix, user))

    # L·∫•y t√™n hi·ªÉn th·ªã b·∫•t ƒë·ªìng b·ªô
    logger.debug("{} Chu·∫©n b·ªã l·∫•y username cho {} user...".format(log_prefix, len(tasks)))
    usernames_results = await asyncio.gather(*tasks, return_exceptions=True)
    logger.debug("{} ƒê√£ l·∫•y xong usernames.".format(log_prefix))

    # T·∫°o map telegram_id -> username
    username_map = {}
    for i, tg_id in enumerate(user_telegram_ids_in_list):
        if i < len(usernames_results):
             # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† Exception kh√¥ng
             if not isinstance(usernames_results[i], Exception):
                 username_map[tg_id] = usernames_results[i]
             else:
                 # Log l·ªói v√† d√πng ID l√†m t√™n thay th·∫ø
                 logger.warning("{} L·ªói l·∫•y t√™n cho TG ID {}: {}".format(log_prefix, tg_id, usernames_results[i]))
                 username_map[tg_id] = str(tg_id) # D√πng ID n·∫øu l·ªói
        else:
             # Tr∆∞·ªùng h·ª£p hi·∫øm g·∫∑p: s·ªë k·∫øt qu·∫£ √≠t h∆°n s·ªë ID
             username_map[tg_id] = str(tg_id)

    # T·∫°o c√°c n√∫t b·∫•m v·ªõi icon vai tr√≤
    default_icon = "‚ùî" # Icon m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y vai tr√≤ trong config
    for user in users_list:
        telegram_id = user.get('telegram_id')
        if not telegram_id:
            continue # B·ªè qua n·∫øu v·∫´n c√≤n user thi·∫øu ID

        username = username_map.get(telegram_id, str(telegram_id)) # L·∫•y t√™n t·ª´ map
        user_role = user.get('user_role', 'user') # L·∫•y vai tr√≤ c·ªßa user

        # === L·∫§Y ICON VAI TR√í T·ª™ CONFIG ===
        role_icon, _ = ROLE_DISPLAY_CONFIG.get(user_role, (default_icon, ""))
        # ====================================

        callback_data = "user_info:{}".format(telegram_id)
        # Th√™m icon v√†o ƒë·∫ßu button_text
        button_text = "{} {} (ID: {})".format(role_icon, username, telegram_id)
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # Th√™m n√∫t quay l·∫°i
    keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i Menu Admin", callback_data="flashcard_admin")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("{} ƒê√£ t·∫°o xong keyboard danh s√°ch user v·ªõi icon vai tr√≤.".format(log_prefix))
    return reply_markup

def build_user_info_display(target_user_info, username):
    """
    X√¢y d·ª±ng n·ªôi dung tin nh·∫Øn v√† b√†n ph√≠m hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa ng∆∞·ªùi d√πng.

    Args:
        target_user_info (dict): Dictionary ch·ª©a th√¥ng tin user t·ª´ DB.
        username (str): T√™n hi·ªÉn th·ªã c·ªßa ng∆∞·ªùi d√πng.

    Returns:
        tuple: (text, reply_markup) ho·∫∑c (None, None) n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.
    """
    log_prefix = "[UI_BUILD_USER_INFO]"
    if not target_user_info or not isinstance(target_user_info, dict):
        logger.error("{} D·ªØ li·ªáu target_user_info kh√¥ng h·ª£p l·ªá.".format(log_prefix))
        return None, None

    target_telegram_id = target_user_info.get('telegram_id', 'N/A')
    log_prefix = "[UI_BUILD_USER_INFO|UserTG:{}]".format(target_telegram_id)
    logger.debug("{} T·∫°o hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt.".format(log_prefix))

    # L·∫•y th√¥ng tin t·ª´ dict
    user_role = target_user_info.get('user_role', 'user')
    daily_limit = target_user_info.get('daily_new_limit', 'N/A')
    score = target_user_info.get('score', 0)
    front_audio_status = "B·∫≠t" if target_user_info.get('front_audio', 1) == 1 else "T·∫Øt"
    back_audio_status = "B·∫≠t" if target_user_info.get('back_audio', 1) == 1 else "T·∫Øt"
    notify_status = "B·∫≠t" if target_user_info.get('is_notification_enabled', 0) == 1 else "T·∫Øt"
    notify_interval = target_user_info.get('notification_interval_minutes', 'N/A')

    # L·∫•y icon vai tr√≤ t·ª´ config
    role_icon, _ = ROLE_DISPLAY_CONFIG.get(user_role, ("üë§","")) # L·∫•y icon, b·ªè qua t√™n

    # T·∫°o n·ªôi dung tin nh·∫Øn
    message = (
        "{} **Th√¥ng tin Th√†nh vi√™n**\n\n" # Th√™m icon v√†o ti√™u ƒë·ªÅ
        "- ID Telegram: `{}`\n"
        "- T√™n hi·ªÉn th·ªã: {}\n"
        "- Vai tr√≤: `{}`\n"
        "- Gi·ªõi h·∫°n th·∫ª m·ªõi/ng√†y: `{}`\n"
        "- ƒêi·ªÉm s·ªë: `{}`\n"
        "- Audio Tr∆∞·ªõc: `{}`\n"
        "- Audio Sau: `{}`\n"
        "- Th√¥ng b√°o: `{}` (M·ªói `{}` ph√∫t)\n"
    ).format(role_icon, target_telegram_id, html.escape(username), user_role, daily_limit, score, front_audio_status, back_audio_status, notify_status, notify_interval)

    # T·∫°o b√†n ph√≠m
    keyboard = [
        [InlineKeyboardButton("üëë Thay ƒë·ªïi Vai tr√≤", callback_data="set_role:{}".format(target_telegram_id))],
        [InlineKeyboardButton("‚öôÔ∏è S·ª≠a Gi·ªõi h·∫°n th·∫ª m·ªõi", callback_data="edit_limit:{}".format(target_telegram_id))],
        [InlineKeyboardButton("üîô Quay l·∫°i Danh s√°ch", callback_data="manage_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("{} ƒê√£ t·∫°o xong text v√† keyboard th√¥ng tin user.".format(log_prefix))
    return message, reply_markup

def build_set_role_keyboard(target_telegram_id):
    """
    X√¢y d·ª±ng b√†n ph√≠m inline ƒë·ªÉ ch·ªçn vai tr√≤ m·ªõi cho ng∆∞·ªùi d√πng.
    T·ª± ƒë·ªông l·∫•y danh s√°ch vai tr√≤ t·ª´ config.ROLE_PERMISSIONS.

    Args:
        target_telegram_id (int): ID Telegram c·ªßa ng∆∞·ªùi d√πng c·∫ßn ƒë·∫∑t vai tr√≤.

    Returns:
        InlineKeyboardMarkup: B√†n ph√≠m inline ho·∫∑c None n·∫øu l·ªói.
    """
    log_prefix = "[UI_BUILD_SET_ROLE|TargetTG:{}]".format(target_telegram_id)
    logger.debug("{} ƒêang t·∫°o keyboard ch·ªçn role.".format(log_prefix))

    # L·∫•y danh s√°ch c√°c role h·ª£p l·ªá t·ª´ config
    # ROLE_PERMISSIONS l√† dict {role_name: set_of_permissions}
    # L·∫•y keys() s·∫Ω ra list c√°c role_name ('user', 'lite', 'vip', 'admin', 'banned')
    valid_roles = list(ROLE_PERMISSIONS.keys()) # Chuy·ªÉn sang list ƒë·ªÉ s·∫Øp x·∫øp n·∫øu c·∫ßn

    if not valid_roles:
        logger.error("{} Kh√¥ng t√¨m th·∫•y ƒë·ªãnh nghƒ©a vai tr√≤ trong ROLE_PERMISSIONS.".format(log_prefix))
        return None

    # S·∫Øp x·∫øp vai tr√≤ theo th·ª© t·ª± mong mu·ªën (v√≠ d·ª•: admin -> vip -> lite -> user -> banned)
    role_order = ['admin', 'vip', 'lite', 'user', 'banned']
    # Ch·ªâ gi·ªØ l·∫°i c√°c vai tr√≤ c√≥ trong config v√† s·∫Øp x·∫øp
    sorted_roles = [role for role in role_order if role in valid_roles]
    # Th√™m c√°c vai tr√≤ kh√°c (n·∫øu c√≥) ch∆∞a ƒë∆∞·ª£c li·ªát k√™ v√†o cu·ªëi
    for role in valid_roles:
        if role not in sorted_roles:
            sorted_roles.append(role)

    keyboard = []
    # T·∫°o n√∫t cho m·ªói vai tr√≤ ƒë√£ s·∫Øp x·∫øp
    for role_name in sorted_roles:
        # L·∫•y icon v√† t√™n hi·ªÉn th·ªã t·ª´ config
        role_icon, display_name = ROLE_DISPLAY_CONFIG.get(role_name, (None, role_name.capitalize()))
        button_text = "{} {}".format(role_icon, display_name) if role_icon else display_name
        callback_data = "set_role_confirm:{}:{}".format(target_telegram_id, role_name)
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])

    # Th√™m n√∫t quay l·∫°i
    keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i Th√¥ng tin User", callback_data="user_info:{}".format(target_telegram_id))])
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("{} ƒê√£ t·∫°o xong keyboard ch·ªçn role.".format(log_prefix))
    return reply_markup