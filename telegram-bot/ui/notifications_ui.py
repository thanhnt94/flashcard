# File: flashcard-telegram-bot/ui/notifications_ui.py
"""
Module ch·ª©a c√°c h√†m x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng cho c√†i ƒë·∫∑t th√¥ng b√°o.
(S·ª≠a l·∫ßn 3: S·ª≠a l·ªói import NOTIFY_TARGET_SET_PAGE)
(S·ª≠a l·∫ßn 4: ƒê·ªïi t√™n "L·ªùi ch√†o bu·ªïi s√°ng" th√†nh "Morning Brief",
             ƒë·∫∑t n√∫t b·∫≠t/t·∫Øt Morning Brief v√† n√∫t Quay l·∫°i chung h√†ng,
             ƒë·∫∑t enable_morning_brief m·∫∑c ƒë·ªãnh l√† False khi hi·ªÉn th·ªã n·∫øu ch∆∞a c√≥ trong user_info)
"""
import logging
import math 
import html 

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from config import (
    NOTIFY_TOGGLE_PERIODIC, 
    NOTIFY_INTERVAL_MENU,
    NOTIFY_INTERVAL_SET,
    NOTIFY_CALLBACK_PREFIX, 
    NOTIFY_CHOOSE_TARGET_SET_MENU, 
    NOTIFY_SELECT_TARGET_SET_ACTION, 
    NOTIFY_CLEAR_TARGET_SET_ACTION, 
    NOTIFY_TOGGLE_MORNING_BRIEF_ACTION, 
    SETS_PER_PAGE,
    NOTIFY_TARGET_SET_PAGE 
)
from database.query_user import get_user_by_telegram_id 
from database.query_set import get_sets 
from ui.core_ui import build_pagination_keyboard 

logger = logging.getLogger(__name__)

def build_notification_settings_menu(user_info, success_message=None):
    """
    X√¢y d·ª±ng n·ªôi dung tin nh·∫Øn v√† b√†n ph√≠m cho giao di·ªán c√†i ƒë·∫∑t th√¥ng b√°o.
    S·ª≠a l·∫ßn 4: ƒê·ªïi t√™n "L·ªùi ch√†o bu·ªïi s√°ng" th√†nh "Morning Brief" v√† ƒëi·ªÅu ch·ªânh layout n√∫t.
    """
    log_prefix = "[UI_BUILD_NOTIFY_SETTINGS]"
    if not user_info or not isinstance(user_info, dict):
        logger.error(f"{log_prefix} D·ªØ li·ªáu user_info kh√¥ng h·ª£p l·ªá.")
        return None, None
    
    user_id_tg = user_info.get('telegram_id', 'N/A') 
    log_prefix = f"[UI_BUILD_NOTIFY_SETTINGS|UserTG:{user_id_tg}]"
    logger.debug(f"{log_prefix} ƒêang t·∫°o giao di·ªán c√†i ƒë·∫∑t th√¥ng b√°o (v4).")

    is_periodic_enabled = user_info.get('is_notification_enabled', 0) == 1
    periodic_status_text = "üü¢ B·∫≠t" if is_periodic_enabled else "üî¥ T·∫Øt"
    periodic_toggle_button_text = "üî¥ T·∫Øt TB √¥n t·∫≠p b·ªô" if is_periodic_enabled else "üü¢ B·∫≠t TB √¥n t·∫≠p b·ªô"
    periodic_interval = user_info.get('notification_interval_minutes', 60)
    
    target_set_id = user_info.get('notification_target_set_id')
    target_set_display = "Ch∆∞a ch·ªçn b·ªô"
    if target_set_id:
        try:
            set_info_list, _ = get_sets(set_id=target_set_id, columns=['title'])
            if set_info_list and set_info_list[0]:
                target_set_display = html.escape(set_info_list[0].get('title', f"ID: {target_set_id}"))
            else:
                target_set_display = f"ID: {target_set_id} (kh√¥ng t√¨m th·∫•y)"
        except Exception as e_get_set:
            logger.error(f"{log_prefix} L·ªói khi l·∫•y t√™n b·ªô th·∫ª {target_set_id}: {e_get_set}")
            target_set_display = f"ID: {target_set_id} (l·ªói t·∫£i)"

    # S·ª≠a l·∫ßn 4: enable_morning_brief m·∫∑c ƒë·ªãnh l√† False (0) n·∫øu kh√¥ng c√≥ trong user_info
    is_morning_brief_enabled = user_info.get('enable_morning_brief', 0) == 1 
    morning_brief_status_text = "‚òÄÔ∏è B·∫≠t" if is_morning_brief_enabled else "üåë T·∫Øt"
    morning_brief_toggle_button_text = "üåë T·∫Øt Morning Brief" if is_morning_brief_enabled else "‚òÄÔ∏è B·∫≠t Morning Brief"

    message_lines = []
    if success_message:
        message_lines.append(f"{success_message}\n")
    
    message_lines.append(f"üîî **C√†i ƒë·∫∑t Th√¥ng b√°o & Nh·∫Øc nh·ªü**\n")
    
    message_lines.append(f"--- Th√¥ng b√°o √în t·∫≠p t·ª´ B·ªô th·∫ª ---")
    message_lines.append(f"  Tr·∫°ng th√°i: **{periodic_status_text}**")
    message_lines.append(f"  B·ªô th·∫ª m·ª•c ti√™u: **{target_set_display}**")
    message_lines.append(f"  Kho·∫£ng c√°ch TB: `{periodic_interval}` ph√∫t\n")

    # S·ª≠a l·∫ßn 4: ƒê·ªïi t√™n th√†nh "Morning Brief"
    message_lines.append(f"--- Morning Brief ---") 
    message_lines.append(f"  Tr·∫°ng th√°i: **{morning_brief_status_text}**\n")
    
    message_lines.append("Ch·ªçn h√†nh ƒë·ªông:")
    message_text = "\n".join(message_lines)

    keyboard = [
        [
            InlineKeyboardButton(periodic_toggle_button_text, callback_data=NOTIFY_TOGGLE_PERIODIC),
            InlineKeyboardButton("‚è∞ Kho·∫£ng c√°ch TB b·ªô", callback_data=NOTIFY_INTERVAL_MENU)
        ],
        [
            InlineKeyboardButton("üìö Ch·ªçn/ƒê·ªïi b·ªô", callback_data=NOTIFY_CHOOSE_TARGET_SET_MENU),
        ],
        # S·ª≠a l·∫ßn 4: Gom n√∫t Morning Brief v√† n√∫t Quay l·∫°i v√†o h√†ng 3
        [
            InlineKeyboardButton(morning_brief_toggle_button_text, callback_data=NOTIFY_TOGGLE_MORNING_BRIEF_ACTION),
            InlineKeyboardButton("üîô Quay l·∫°i ", callback_data="settings:back_to_unified")
        ]
    ]
    if target_set_id:
        keyboard[1].append(InlineKeyboardButton("üóëÔ∏è X√≥a ch·ªçn b·ªô", callback_data=NOTIFY_CLEAR_TARGET_SET_ACTION))

    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug(f"{log_prefix} ƒê√£ t·∫°o xong text v√† keyboard (v4).")
    return message_text, reply_markup

# C√°c h√†m build_notification_set_selection_keyboard v√† build_interval_selection_keyboard gi·ªØ nguy√™n
def build_notification_set_selection_keyboard(user_id_db, all_user_sets_info, current_page=1):
    log_prefix = f"[UI_BUILD_NOTIFY_SET_SELECT|UserDBID:{user_id_db}|Page:{current_page}]"
    logger.debug(f"{log_prefix} ƒêang t·∫°o keyboard ch·ªçn b·ªô cho th√¥ng b√°o.")

    if not all_user_sets_info:
        text = "B·∫°n ch∆∞a h·ªçc b·ªô th·∫ª n√†o ƒë·ªÉ c√≥ th·ªÉ ch·ªçn nh·∫≠n th√¥ng b√°o."
        keyboard_empty = [[InlineKeyboardButton("üîô Quay l·∫°i C√†i ƒë·∫∑t Th√¥ng b√°o", callback_data=f"{NOTIFY_CALLBACK_PREFIX}:back_to_notify_menu")]] 
        return text, InlineKeyboardMarkup(keyboard_empty)

    items_per_page = SETS_PER_PAGE 
    total_items = len(all_user_sets_info)
    total_pages = math.ceil(total_items / items_per_page)
    current_page = max(1, min(current_page, total_pages)) 
    
    start_index = (current_page - 1) * items_per_page
    end_index = start_index + items_per_page
    sets_on_page = all_user_sets_info[start_index:end_index]

    text = f"üìö Ch·ªçn m·ªôt b·ªô th·∫ª ƒë·ªÉ nh·∫≠n th√¥ng b√°o √¥n t·∫≠p (Trang {current_page}/{total_pages}):"
    keyboard = []

    if not sets_on_page:
        text = f"Kh√¥ng c√≥ b·ªô th·∫ª n√†o tr√™n trang {current_page}."
    else:
        for set_info in sets_on_page:
            set_id = set_info.get('set_id')
            title = set_info.get('title', f"ID: {set_id}")
            if set_id is None:
                continue
            button_text = f"üìå {html.escape(title)}"
            callback_data = f"{NOTIFY_SELECT_TARGET_SET_ACTION}{set_id}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    pagination_row = build_pagination_keyboard(current_page, total_pages, NOTIFY_TARGET_SET_PAGE)
    if pagination_row:
        keyboard.append(pagination_row)
    
    keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i C√†i ƒë·∫∑t Th√¥ng b√°o", callback_data=f"{NOTIFY_CALLBACK_PREFIX}:back_to_notify_menu")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    return text, reply_markup


def build_interval_selection_keyboard(): 
    log_prefix = "[UI_BUILD_INTERVAL_MENU]"
    interval_options = [5, 10, 15, 30, 45, 60, 120, 180, 240] 
    keyboard = []
    row = []
    for interval in interval_options:
        button_text = f"üïí {interval} ph√∫t"
        callback_data = f"{NOTIFY_INTERVAL_SET}{interval}"
        row.append(InlineKeyboardButton(button_text, callback_data=callback_data))
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üîô Quay l·∫°i C√†i ƒë·∫∑t Th√¥ng b√°o", callback_data=f"{NOTIFY_CALLBACK_PREFIX}:back_to_notify_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup
