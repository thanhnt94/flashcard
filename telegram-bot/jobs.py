# File: flashcard-telegram-bot/jobs.py
"""
Module ch·ª©a c√°c h√†m callback ƒë∆∞·ª£c th·ª±c thi b·ªüi JobQueue c·ªßa bot.
(S·ª≠a l·∫ßn 4: Trong run_periodic_reminders_job, th√™m ki·ªÉm tra last_seen c·ªßa user.)
(S·ª≠a l·∫ßn 5: S·ª≠ d·ª•ng h·∫±ng s·ªë NOTIFICATION_MIN_INACTIVITY_MIN t·ª´ config 
             cho ki·ªÉm tra last_seen trong run_periodic_reminders_job.)
"""
import logging
import asyncio
import time
import html
import sqlite3 
from datetime import datetime 
from datetime import timedelta
from datetime import timezone
from datetime import time as dt_time 

from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import Application
from telegram.ext import CallbackContext 
from telegram.error import Forbidden
from telegram.error import BadRequest
from telegram.error import TelegramError

from services.notification_service import (
    get_targeted_set_reminder_card, 
    get_inactive_users_data,
    get_morning_brief_stats 
)
from database.query_user import get_user_by_telegram_id, update_user_by_telegram_id 
from database.connection import database_connect
from utils.exceptions import DatabaseError
from utils.exceptions import UserNotFoundError
import config # Import config ƒë·ªÉ s·ª≠ d·ª•ng h·∫±ng s·ªë

logger = logging.getLogger(__name__)


async def run_periodic_reminders_job(context):
    """
    H√†m ch·∫°y ƒë·ªãnh k·ª≥, g·ª≠i th√¥ng b√°o √¥n t·∫≠p th·∫ª ng·∫´u nhi√™n t·ª´ b·ªô th·∫ª ng∆∞·ªùi d√πng ƒë√£ ch·ªçn.
    S·ª≠a l·∫ßn 5: S·ª≠ d·ª•ng config.NOTIFICATION_MIN_INACTIVITY_MIN.
    """
    log_prefix = "[JOB_RUNNER_PERIODIC_TARGETED]"
    logger.info("{} B·∫Øt ƒë·∫ßu ch·∫°y job g·ª≠i th√¥ng b√°o √¥n t·∫≠p theo b·ªô.".format(log_prefix))
    if not context or not isinstance(context, CallbackContext):
        logger.error("{} Context kh√¥ng h·ª£p l·ªá.".format(log_prefix))
        return
    
    app = context.bot_data.get('application')
    if not app or not isinstance(app, Application):
        logger.error("{} Kh√¥ng t√¨m th·∫•y application trong bot_data.".format(log_prefix))
        return
    bot = app.bot
    application_user_data = app.user_data 
    if bot is None or application_user_data is None:
         logger.error("{} Kh√¥ng th·ªÉ l·∫•y bot ho·∫∑c application_user_data.".format(log_prefix))
         return

    conn = None
    eligible_users_for_targeted_reminder = [] 
    
    try:
        conn = database_connect()
        if conn is None:
            raise DatabaseError("Kh√¥ng th·ªÉ k·∫øt n·ªëi DB l·∫•y user cho periodic targeted.")
        conn.row_factory = sqlite3.Row 
        cursor_users = conn.cursor()
        current_timestamp = int(time.time())
        
        query_enabled_users = """
            SELECT user_id, telegram_id, notification_interval_minutes,
                   last_notification_sent_time, notification_target_set_id, 
                   timezone_offset, last_seen 
            FROM Users 
            WHERE is_notification_enabled = 1 AND notification_target_set_id IS NOT NULL
        """
        cursor_users.execute(query_enabled_users)
        all_qualifying_users = [dict(row) for row in cursor_users.fetchall()]
        logger.info("{} T√¨m th·∫•y {} user ƒë√£ b·∫≠t TB v√† ch·ªçn b·ªô.".format(log_prefix, len(all_qualifying_users)))

        # S·ª≠a l·∫ßn 5: S·ª≠ d·ª•ng h·∫±ng s·ªë t·ª´ config
        inactivity_threshold_seconds = config.NOTIFICATION_MIN_INACTIVITY_MIN * 60

        for user_row in all_qualifying_users:
            user_id_db = user_row.get('user_id')
            telegram_id_db = user_row.get('telegram_id')
            interval_minutes = user_row.get('notification_interval_minutes')
            last_sent_ts = user_row.get('last_notification_sent_time')
            target_set_id_db = user_row.get('notification_target_set_id')
            tz_offset = user_row.get('timezone_offset', config.DEFAULT_TIMEZONE_OFFSET)
            last_seen_ts = user_row.get('last_seen') 

            user_log_prefix_check = "{}[CheckUserUID:{},TG:{},Set:{}]".format(log_prefix, user_id_db, telegram_id_db, target_set_id_db)

            if not all([user_id_db, telegram_id_db, interval_minutes, target_set_id_db]):
                logger.warning(f"{user_log_prefix_check} Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt, b·ªè qua.")
                continue
            if interval_minutes <= 0:
                logger.debug(f"{user_log_prefix_check} Kho·∫£ng c√°ch kh√¥ng h·ª£p l·ªá ({interval_minutes}), b·ªè qua.")
                continue
            
            if last_seen_ts is not None:
                time_since_last_seen = current_timestamp - last_seen_ts
                if time_since_last_seen < inactivity_threshold_seconds:
                    logger.info(f"{user_log_prefix_check} Ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông (last_seen {time_since_last_seen}s < {inactivity_threshold_seconds}s). B·ªè qua th√¥ng b√°o.")
                    continue 
            else: 
                logger.debug(f"{user_log_prefix_check} last_seen l√† NULL, ti·∫øp t·ª•c ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán kh√°c.")

            try:
                user_local_tz = timezone(timedelta(hours=tz_offset))
                now_user_local_time = datetime.now(user_local_tz)
                current_user_hour = now_user_local_time.hour
                is_user_sleep_time = False
                if config.SLEEP_START_HOUR > config.SLEEP_END_HOUR: 
                    if current_user_hour >= config.SLEEP_START_HOUR or current_user_hour < config.SLEEP_END_HOUR:
                        is_user_sleep_time = True
                else: 
                    if config.SLEEP_START_HOUR <= current_user_hour < config.SLEEP_END_HOUR:
                        is_user_sleep_time = True
                if is_user_sleep_time:
                    logger.debug(f"{user_log_prefix_check} ƒêang trong gi·ªù ng·ªß c·ªßa user (Local Hour: {current_user_hour}). B·ªè qua.")
                    continue
            except Exception as e_sleep_check:
                logger.error(f"{user_log_prefix_check} L·ªói ki·ªÉm tra gi·ªù ng·ªß user: {e_sleep_check}. Ti·∫øp t·ª•c g·ª≠i.")

            is_time_to_send = True 
            if last_sent_ts is not None:
                time_since_last = current_timestamp - last_sent_ts
                required_interval_seconds = interval_minutes * 60
                if time_since_last < required_interval_seconds:
                    is_time_to_send = False 
            
            if is_time_to_send:
                eligible_users_for_targeted_reminder.append({
                    'user_id': user_id_db,
                    'telegram_id': telegram_id_db,
                    'target_set_id': target_set_id_db
                })
                logger.debug(f"{user_log_prefix_check} ƒê·ªß ƒëi·ªÅu ki·ªán g·ª≠i th√¥ng b√°o cho b·ªô.")
        
        logger.info("{} C√≥ {} ng∆∞·ªùi d√πng ƒë·ªß ƒëi·ªÅu ki·ªán nh·∫≠n TB theo b·ªô (sau khi check last_seen v√† sleep).".format(log_prefix, len(eligible_users_for_targeted_reminder)))

    except (sqlite3.Error, DatabaseError) as e:
        logger.error("{} L·ªói DB/User khi l·∫•y danh s√°ch user cho TB theo b·ªô: {}".format(log_prefix, e), exc_info=True)
        if conn: conn.close()
        return 
    finally:
        if conn: conn.close()

    if not eligible_users_for_targeted_reminder:
        logger.info("{} Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o c·∫ßn g·ª≠i th√¥ng b√°o theo b·ªô.".format(log_prefix))
        return

    # Ph·∫ßn g·ª≠i th√¥ng b√°o gi·ªØ nguy√™n logic ...
    successful_sends = 0; failed_sends = 0
    current_timestamp_for_update = int(time.time()) 
    for user_to_notify in eligible_users_for_targeted_reminder:
        user_id = user_to_notify.get('user_id'); telegram_id = user_to_notify.get('telegram_id'); target_set_id = user_to_notify.get('target_set_id')
        user_job_log_prefix = "{}[NotifyUserUID:{},TG:{},Set:{}]".format(log_prefix, user_id, telegram_id, target_set_id)
        user_specific_data = application_user_data.get(telegram_id, {}); history_key = f'notified_in_set_{target_set_id}'
        recently_notified_in_set = user_specific_data.get(history_key, [])
        if not isinstance(recently_notified_in_set, list): recently_notified_in_set = []
        reminder_card_data = None
        try: reminder_card_data = get_targeted_set_reminder_card(user_id, target_set_id, recently_notified_in_set)
        except Exception as e_get_card: logger.error(f"{user_job_log_prefix} L·ªói get_targeted_set_reminder_card: {e_get_card}", exc_info=True); failed_sends += 1; continue 
        if not reminder_card_data: logger.info(f"{user_job_log_prefix} Kh√¥ng c√≥ th·∫ª ph√π h·ª£p."); continue
        selected_card_id = reminder_card_data.get('selected_card_id'); notification_content_raw = reminder_card_data.get('notification_content')
        if not selected_card_id or not notification_content_raw: logger.warning(f"{user_job_log_prefix} D·ªØ li·ªáu th·∫ª l·ªói: {reminder_card_data}"); failed_sends += 1; continue
        message_sent_successfully = False; text_to_send = ""; parse_mode = 'Markdown' 
        try: content_processed = html.unescape(notification_content_raw); text_to_send = "üí° **{}**".format(content_processed) 
        except Exception as e_format: text_to_send = "üí° {}".format(notification_content_raw); parse_mode = None 
        try:
            await bot.send_message(chat_id=telegram_id, text=text_to_send, parse_mode=parse_mode)
            logger.info("{} ƒê√£ g·ª≠i TB th·∫ª {} b·ªô {}.".format(user_job_log_prefix, selected_card_id, target_set_id)); successful_sends += 1; message_sent_successfully = True
        except Forbidden: failed_sends += 1; logger.warning("{} Bot b·ªã ch·∫∑n.".format(user_job_log_prefix))
        except BadRequest as e_br: failed_sends += 1; logger.error("{} L·ªói BadRequest g·ª≠i: {} (N·ªôi dung: '{}', Mode: {})".format(user_job_log_prefix, e_br, text_to_send, parse_mode))
        except TelegramError as e_tg: failed_sends += 1; logger.error("{} L·ªói Telegram kh√°c: {}".format(user_job_log_prefix, e_tg))
        except Exception as e_send_unknown: failed_sends += 1; logger.error("{} L·ªói g·ª≠i TB: {}".format(user_job_log_prefix, e_send_unknown), exc_info=True)
        if message_sent_successfully:
            try: update_user_by_telegram_id(telegram_id, last_notification_sent_time=current_timestamp_for_update); logger.info("{} ƒê√£ c·∫≠p nh·∫≠t last_notification_sent_time.".format(user_job_log_prefix))
            except Exception as e_db_update: logger.error("{} L·ªói DB c·∫≠p nh·∫≠t last_sent_time: {}".format(user_job_log_prefix, e_db_update))
            try:
                 if not isinstance(application_user_data.get(telegram_id), dict): application_user_data[telegram_id] = {} 
                 user_specific_data_for_history = application_user_data[telegram_id]
                 current_history_for_set = user_specific_data_for_history.get(history_key, [])
                 if not isinstance(current_history_for_set, list): current_history_for_set = []
                 current_history_for_set.insert(0, selected_card_id)
                 current_history_for_set = current_history_for_set[:config.NOTIFICATION_SET_REMINDER_MEMORY] 
                 user_specific_data_for_history[history_key] = current_history_for_set
                 logger.debug("{} ƒê√£ c·∫≠p nh·∫≠t user_data history cho b·ªô {}: {}".format(user_job_log_prefix, target_set_id, current_history_for_set))
            except Exception as e_user_data_hist: logger.error("{} L·ªói c·∫≠p nh·∫≠t user_data history cho b·ªô: {}".format(user_job_log_prefix, e_user_data_hist), exc_info=True)
        await asyncio.sleep(config.BROADCAST_SEND_DELAY) 
    logger.info("{} K·∫øt th√∫c job TB theo b·ªô. Th√†nh c√¥ng: {}, Th·∫•t b·∫°i: {}.".format(log_prefix, successful_sends, failed_sends))

async def run_morning_brief_job(context):
    # Gi·ªØ nguy√™n logic
    log_prefix = "[JOB_RUNNER_MORNING_BRIEF]"; logger.info("{} B·∫Øt ƒë·∫ßu job g·ª≠i L·ªùi ch√†o bu·ªïi s√°ng.".format(log_prefix))
    if not context or not isinstance(context, CallbackContext): logger.error("{} Context kh√¥ng h·ª£p l·ªá.".format(log_prefix)); return
    app = context.bot_data.get('application')
    if not app or not isinstance(app, Application): logger.error("{} Kh√¥ng t√¨m th·∫•y application trong bot_data.".format(log_prefix)); return
    bot = app.bot
    if bot is None: logger.error("{} Kh√¥ng th·ªÉ l·∫•y bot t·ª´ application.".format(log_prefix)); return
    conn = None; users_to_greet = []
    try:
        conn = database_connect();
        if conn is None: raise DatabaseError("Kh√¥ng th·ªÉ k·∫øt n·ªëi DB l·∫•y user cho morning brief.")
        conn.row_factory = sqlite3.Row; cursor = conn.cursor()
        query_users = "SELECT user_id, telegram_id, timezone_offset, last_morning_brief_sent_date FROM Users WHERE enable_morning_brief = 1 AND user_role != 'banned'"
        cursor.execute(query_users); all_eligible_users = [dict(row) for row in cursor.fetchall()]
        logger.info("{} T√¨m th·∫•y {} user ƒë√£ b·∫≠t L·ªùi ch√†o bu·ªïi s√°ng.".format(log_prefix, len(all_eligible_users)))
        today_date_str_utc = datetime.now(timezone.utc).strftime('%Y-%m-%d')
        for user_row in all_eligible_users:
            user_id_db = user_row.get('user_id'); telegram_id_db = user_row.get('telegram_id'); tz_offset = user_row.get('timezone_offset', config.DEFAULT_TIMEZONE_OFFSET); last_sent_date_db = user_row.get('last_morning_brief_sent_date')
            user_log_prefix_check = "{}[CheckUserUID:{},TG:{}]".format(log_prefix, user_id_db, telegram_id_db)
            if not user_id_db or not telegram_id_db: logger.warning(f"{user_log_prefix_check} Thi·∫øu user_id ho·∫∑c telegram_id, b·ªè qua."); continue
            if last_sent_date_db == today_date_str_utc: logger.debug(f"{user_log_prefix_check} ƒê√£ g·ª≠i l·ªùi ch√†o h√¥m nay ({last_sent_date_db}), b·ªè qua."); continue
            try:
                user_local_tz = timezone(timedelta(hours=tz_offset)); now_user_local_time = datetime.now(user_local_tz); current_user_hour = now_user_local_time.hour
                if not (config.MORNING_BRIEF_LOCAL_START_HOUR <= current_user_hour < config.MORNING_BRIEF_LOCAL_END_HOUR):
                    logger.debug(f"{user_log_prefix_check} Gi·ªù ƒë·ªãa ph∆∞∆°ng ({current_user_hour}h) kh√¥ng trong kho·∫£ng ({config.MORNING_BRIEF_LOCAL_START_HOUR}h-{config.MORNING_BRIEF_LOCAL_END_HOUR}h)."); continue
            except Exception as e_time_check: logger.error(f"{user_log_prefix_check} L·ªói ki·ªÉm tra gi·ªù ƒë·ªãa ph∆∞∆°ng: {e_time_check}. B·ªè qua."); continue
            users_to_greet.append({'user_id': user_id_db, 'telegram_id': telegram_id_db})
            logger.debug(f"{user_log_prefix_check} ƒê·ªß ƒëi·ªÅu ki·ªán nh·∫≠n l·ªùi ch√†o.")
        logger.info("{} C√≥ {} ng∆∞·ªùi d√πng ƒë·ªß ƒëi·ªÅu ki·ªán nh·∫≠n L·ªùi ch√†o bu·ªïi s√°ng.".format(log_prefix, len(users_to_greet)))
    except (sqlite3.Error, DatabaseError) as e_db_greet: logger.error("{} L·ªói DB khi l·∫•y danh s√°ch user cho l·ªùi ch√†o: {}".format(log_prefix, e_db_greet), exc_info=True);
    finally:
        if conn: conn.close()
    if not users_to_greet: logger.info("{} Kh√¥ng c√≥ ai ƒë·ªÉ g·ª≠i L·ªùi ch√†o bu·ªïi s√°ng.".format(log_prefix)); return
    successful_sends = 0; failed_sends = 0
    for user_data in users_to_greet:
        user_id = user_data.get('user_id'); telegram_id = user_data.get('telegram_id'); user_job_log_prefix = "{}[GreetUserUID:{},TG:{}]".format(log_prefix, user_id, telegram_id)
        greeting_text = "Ch√†o bu·ªïi s√°ng t·ªët l√†nh! ‚òÄÔ∏è\n"; stats_text_parts = []
        try:
            brief_stats = get_morning_brief_stats(user_id)
            due_today = brief_stats.get('due_today_srs', 0)
            if due_today > 0: stats_text_parts.append(f"H√¥m nay b·∫°n c√≥ **{due_today}** th·∫ª c·∫ßn √¥n t·∫≠p.")
            else: stats_text_parts.append("B·∫°n kh√¥ng c√≥ th·∫ª n√†o ƒë·∫øn h·∫°n √¥n t·∫≠p h√¥m nay. Tuy·ªát v·ªùi!")
        except Exception as e_get_stats: stats_text_parts.append("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªçc t·∫≠p c·ªßa b·∫°n l√∫c n√†y.")
        final_message = greeting_text + "\n".join(stats_text_parts) + "\n\nCh√∫c b·∫°n m·ªôt ng√†y h·ªçc t·∫≠p hi·ªáu qu·∫£! üí™"
        keyboard = [[InlineKeyboardButton("üìö B·∫Øt ƒë·∫ßu h·ªçc ngay!", callback_data="handle_callback_back_to_main")]]; reply_markup = InlineKeyboardMarkup(keyboard)
        message_sent_successfully = False
        try:
            await bot.send_message(chat_id=telegram_id, text=final_message, reply_markup=reply_markup, parse_mode='Markdown')
            successful_sends += 1; message_sent_successfully = True
        except Forbidden: failed_sends += 1; logger.warning(f"{user_job_log_prefix} Bot b·ªã ch·∫∑n.")
        except BadRequest as e_br_greet: failed_sends += 1; logger.error(f"{user_job_log_prefix} L·ªói BadRequest: {e_br_greet}")
        except TelegramError as e_tg_greet: failed_sends += 1; logger.error(f"{user_job_log_prefix} L·ªói Telegram: {e_tg_greet}")
        except Exception as e_send_greet_unknown: failed_sends += 1; logger.error(f"{user_job_log_prefix} L·ªói g·ª≠i l·ªùi ch√†o: {e_send_greet_unknown}", exc_info=True)
        if message_sent_successfully:
            try: update_user_by_telegram_id(telegram_id, last_morning_brief_sent_date=today_date_str_utc) 
            except Exception as e_db_update_greet: logger.error(f"{user_job_log_prefix} L·ªói DB c·∫≠p nh·∫≠t last_morning_brief_sent_date: {e_db_update_greet}")
        await asyncio.sleep(config.BROADCAST_SEND_DELAY)
    logger.info("{} K·∫øt th√∫c job L·ªùi ch√†o bu·ªïi s√°ng. Th√†nh c√¥ng: {}, Th·∫•t b·∫°i: {}.".format(log_prefix, successful_sends, failed_sends))

async def run_inactivity_reminder_job(context):
    # Gi·ªØ nguy√™n logic
    log_prefix = "[JOB_RUNNER_INACTIVE]"; logger.info("{} B·∫Øt ƒë·∫ßu job nh·∫Øc nh·ªü kh√¥ng ho·∫°t ƒë·ªông.".format(log_prefix))
    if not context or not isinstance(context, CallbackContext): return
    app = context.bot_data.get('application')
    if not app or not isinstance(app, Application): return
    bot = app.bot
    if bot is None: return
    inactive_users_data = []
    try: inactive_users_data = get_inactive_users_data() 
    except Exception as e_get: return 
    if not inactive_users_data: return
    successful_sends = 0; failed_sends = 0; inactive_days_config = config.INACTIVITY_REMINDER_DAYS
    for user_data in inactive_users_data:
        telegram_id = user_data.get('telegram_id'); user_id = user_data.get('user_id') 
        if not telegram_id: failed_sends += 1; continue
        user_job_log_prefix = "{}[UserUID:{},TG:{}]".format(log_prefix, user_id, telegram_id)
        reminder_text = "üëã ƒê√£ {} ng√†y r·ªìi b·∫°n ch∆∞a √¥n b√†i tr√™n Flashcard Bot. H√£y quay l·∫°i luy·ªán t·∫≠p ƒë·ªÉ kh√¥ng qu√™n ki·∫øn th·ª©c nh√©!".format(inactive_days_config)
        keyboard = [[InlineKeyboardButton("üìö H·ªçc b√†i ngay!", callback_data="handle_callback_back_to_main")]]; reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await bot.send_message(chat_id=telegram_id, text=reminder_text, reply_markup=reply_markup)
            successful_sends += 1
        except Forbidden: failed_sends += 1
        except (BadRequest, TelegramError): failed_sends += 1
        except Exception: failed_sends += 1
        await asyncio.sleep(config.BROADCAST_SEND_DELAY) 
    logger.info("{} K·∫øt th√∫c job nh·∫Øc nh·ªü kh√¥ng ho·∫°t ƒë·ªông. Th√†nh c√¥ng: {}, Th·∫•t b·∫°i: {}.".format(log_prefix, successful_sends, failed_sends))

